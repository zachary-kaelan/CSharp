// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: anki_vector/messaging/nav_map.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Anki.Vector.ExternalInterface {

  /// <summary>Holder for reflection information generated from anki_vector/messaging/nav_map.proto</summary>
  public static partial class NavMapReflection {

    #region Descriptor
    /// <summary>File descriptor for anki_vector/messaging/nav_map.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NavMapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiNhbmtpX3ZlY3Rvci9tZXNzYWdpbmcvbmF2X21hcC5wcm90bxIeQW5raS5W",
            "ZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlIngKDk5hdk1hcFF1YWRJbmZvEkMK",
            "B2NvbnRlbnQYASABKA4yMi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZh",
            "Y2UuTmF2Tm9kZUNvbnRlbnRUeXBlEg0KBWRlcHRoGAIgASgNEhIKCmNvbG9y",
            "X3JnYmEYAyABKA0iewoKTmF2TWFwSW5mbxISCgpyb290X2RlcHRoGAEgASgF",
            "EhQKDHJvb3Rfc2l6ZV9tbRgCIAEoAhIVCg1yb290X2NlbnRlcl94GAMgASgC",
            "EhUKDXJvb3RfY2VudGVyX3kYBCABKAISFQoNcm9vdF9jZW50ZXJfehgFIAEo",
            "AiImChFOYXZNYXBGZWVkUmVxdWVzdBIRCglmcmVxdWVuY3kYASABKAIiqQEK",
            "Ek5hdk1hcEZlZWRSZXNwb25zZRIRCglvcmlnaW5faWQYASABKA0SPAoIbWFw",
            "X2luZm8YAiABKAsyKi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2Uu",
            "TmF2TWFwSW5mbxJCCgpxdWFkX2luZm9zGAMgAygLMi4uQW5raS5WZWN0b3Iu",
            "ZXh0ZXJuYWxfaW50ZXJmYWNlLk5hdk1hcFF1YWRJbmZvKsgCChJOYXZOb2Rl",
            "Q29udGVudFR5cGUSFAoQTkFWX05PREVfVU5LTk9XThAAEh4KGk5BVl9OT0RF",
            "X0NMRUFSX09GX09CU1RBQ0xFEAESGwoXTkFWX05PREVfQ0xFQVJfT0ZfQ0xJ",
            "RkYQAhIaChZOQVZfTk9ERV9PQlNUQUNMRV9DVUJFEAMSHwobTkFWX05PREVf",
            "T0JTVEFDTEVfUFJPWElNSVRZEAQSKAokTkFWX05PREVfT0JTVEFDTEVfUFJP",
            "WElNSVRZX0VYUExPUkVEEAUSIgoeTkFWX05PREVfT0JTVEFDTEVfVU5SRUNP",
            "R05JWkVEEAYSEgoOTkFWX05PREVfQ0xJRkYQBxIdChlOQVZfTk9ERV9JTlRF",
            "UkVTVElOR19FREdFEAgSIQodTkFWX05PREVfTk9OX0lOVEVSRVNUSU5HX0VE",
            "R0UQCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Anki.Vector.ExternalInterface.NavNodeContentType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.NavMapQuadInfo), global::Anki.Vector.ExternalInterface.NavMapQuadInfo.Parser, new[]{ "Content", "Depth", "ColorRgba" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.NavMapInfo), global::Anki.Vector.ExternalInterface.NavMapInfo.Parser, new[]{ "RootDepth", "RootSizeMm", "RootCenterX", "RootCenterY", "RootCenterZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.NavMapFeedRequest), global::Anki.Vector.ExternalInterface.NavMapFeedRequest.Parser, new[]{ "Frequency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.NavMapFeedResponse), global::Anki.Vector.ExternalInterface.NavMapFeedResponse.Parser, new[]{ "OriginId", "MapInfo", "QuadInfos" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Every tile in the nav map will be tagged with a content key referring to
  /// the different environmental elements that Vector can identify.
  /// </summary>
  public enum NavNodeContentType {
    [pbr::OriginalName("NAV_NODE_UNKNOWN")] NavNodeUnknown = 0,
    [pbr::OriginalName("NAV_NODE_CLEAR_OF_OBSTACLE")] NavNodeClearOfObstacle = 1,
    [pbr::OriginalName("NAV_NODE_CLEAR_OF_CLIFF")] NavNodeClearOfCliff = 2,
    [pbr::OriginalName("NAV_NODE_OBSTACLE_CUBE")] NavNodeObstacleCube = 3,
    [pbr::OriginalName("NAV_NODE_OBSTACLE_PROXIMITY")] NavNodeObstacleProximity = 4,
    [pbr::OriginalName("NAV_NODE_OBSTACLE_PROXIMITY_EXPLORED")] NavNodeObstacleProximityExplored = 5,
    [pbr::OriginalName("NAV_NODE_OBSTACLE_UNRECOGNIZED")] NavNodeObstacleUnrecognized = 6,
    [pbr::OriginalName("NAV_NODE_CLIFF")] NavNodeCliff = 7,
    [pbr::OriginalName("NAV_NODE_INTERESTING_EDGE")] NavNodeInterestingEdge = 8,
    [pbr::OriginalName("NAV_NODE_NON_INTERESTING_EDGE")] NavNodeNonInterestingEdge = 9,
  }

  #endregion

  #region Messages
  /// <summary>
  /// An individual sample of vector's nav map.  This quad's size will vary and
  /// depends on the resolution the map requires to effectively identify
  /// boundaries in the environment.
  /// </summary>
  public sealed partial class NavMapQuadInfo : pb::IMessage<NavMapQuadInfo> {
    private static readonly pb::MessageParser<NavMapQuadInfo> _parser = new pb::MessageParser<NavMapQuadInfo>(() => new NavMapQuadInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavMapQuadInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.NavMapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapQuadInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapQuadInfo(NavMapQuadInfo other) : this() {
      content_ = other.content_;
      depth_ = other.depth_;
      colorRgba_ = other.colorRgba_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapQuadInfo Clone() {
      return new NavMapQuadInfo(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.NavNodeContentType content_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.NavNodeContentType Content {
      get { return content_; }
      set {
        content_ = value;
      }
    }

    /// <summary>Field number for the "depth" field.</summary>
    public const int DepthFieldNumber = 2;
    private uint depth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Depth {
      get { return depth_; }
      set {
        depth_ = value;
      }
    }

    /// <summary>Field number for the "color_rgba" field.</summary>
    public const int ColorRgbaFieldNumber = 3;
    private uint colorRgba_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ColorRgba {
      get { return colorRgba_; }
      set {
        colorRgba_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavMapQuadInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavMapQuadInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      if (Depth != other.Depth) return false;
      if (ColorRgba != other.ColorRgba) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content != 0) hash ^= Content.GetHashCode();
      if (Depth != 0) hash ^= Depth.GetHashCode();
      if (ColorRgba != 0) hash ^= ColorRgba.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Content);
      }
      if (Depth != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Depth);
      }
      if (ColorRgba != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ColorRgba);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Content);
      }
      if (Depth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Depth);
      }
      if (ColorRgba != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ColorRgba);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavMapQuadInfo other) {
      if (other == null) {
        return;
      }
      if (other.Content != 0) {
        Content = other.Content;
      }
      if (other.Depth != 0) {
        Depth = other.Depth;
      }
      if (other.ColorRgba != 0) {
        ColorRgba = other.ColorRgba;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Content = (global::Anki.Vector.ExternalInterface.NavNodeContentType) input.ReadEnum();
            break;
          }
          case 16: {
            Depth = input.ReadUInt32();
            break;
          }
          case 24: {
            ColorRgba = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// General information about the nav map as a whole.
  /// </summary>
  public sealed partial class NavMapInfo : pb::IMessage<NavMapInfo> {
    private static readonly pb::MessageParser<NavMapInfo> _parser = new pb::MessageParser<NavMapInfo>(() => new NavMapInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavMapInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.NavMapReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapInfo(NavMapInfo other) : this() {
      rootDepth_ = other.rootDepth_;
      rootSizeMm_ = other.rootSizeMm_;
      rootCenterX_ = other.rootCenterX_;
      rootCenterY_ = other.rootCenterY_;
      rootCenterZ_ = other.rootCenterZ_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapInfo Clone() {
      return new NavMapInfo(this);
    }

    /// <summary>Field number for the "root_depth" field.</summary>
    public const int RootDepthFieldNumber = 1;
    private int rootDepth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RootDepth {
      get { return rootDepth_; }
      set {
        rootDepth_ = value;
      }
    }

    /// <summary>Field number for the "root_size_mm" field.</summary>
    public const int RootSizeMmFieldNumber = 2;
    private float rootSizeMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RootSizeMm {
      get { return rootSizeMm_; }
      set {
        rootSizeMm_ = value;
      }
    }

    /// <summary>Field number for the "root_center_x" field.</summary>
    public const int RootCenterXFieldNumber = 3;
    private float rootCenterX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RootCenterX {
      get { return rootCenterX_; }
      set {
        rootCenterX_ = value;
      }
    }

    /// <summary>Field number for the "root_center_y" field.</summary>
    public const int RootCenterYFieldNumber = 4;
    private float rootCenterY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RootCenterY {
      get { return rootCenterY_; }
      set {
        rootCenterY_ = value;
      }
    }

    /// <summary>Field number for the "root_center_z" field.</summary>
    public const int RootCenterZFieldNumber = 5;
    private float rootCenterZ_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RootCenterZ {
      get { return rootCenterZ_; }
      set {
        rootCenterZ_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavMapInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavMapInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RootDepth != other.RootDepth) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RootSizeMm, other.RootSizeMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RootCenterX, other.RootCenterX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RootCenterY, other.RootCenterY)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RootCenterZ, other.RootCenterZ)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RootDepth != 0) hash ^= RootDepth.GetHashCode();
      if (RootSizeMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RootSizeMm);
      if (RootCenterX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RootCenterX);
      if (RootCenterY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RootCenterY);
      if (RootCenterZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RootCenterZ);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RootDepth != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RootDepth);
      }
      if (RootSizeMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RootSizeMm);
      }
      if (RootCenterX != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RootCenterX);
      }
      if (RootCenterY != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RootCenterY);
      }
      if (RootCenterZ != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RootCenterZ);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RootDepth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RootDepth);
      }
      if (RootSizeMm != 0F) {
        size += 1 + 4;
      }
      if (RootCenterX != 0F) {
        size += 1 + 4;
      }
      if (RootCenterY != 0F) {
        size += 1 + 4;
      }
      if (RootCenterZ != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavMapInfo other) {
      if (other == null) {
        return;
      }
      if (other.RootDepth != 0) {
        RootDepth = other.RootDepth;
      }
      if (other.RootSizeMm != 0F) {
        RootSizeMm = other.RootSizeMm;
      }
      if (other.RootCenterX != 0F) {
        RootCenterX = other.RootCenterX;
      }
      if (other.RootCenterY != 0F) {
        RootCenterY = other.RootCenterY;
      }
      if (other.RootCenterZ != 0F) {
        RootCenterZ = other.RootCenterZ;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RootDepth = input.ReadInt32();
            break;
          }
          case 21: {
            RootSizeMm = input.ReadFloat();
            break;
          }
          case 29: {
            RootCenterX = input.ReadFloat();
            break;
          }
          case 37: {
            RootCenterY = input.ReadFloat();
            break;
          }
          case 45: {
            RootCenterZ = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Requests nav map data from the robot at a specified maximum update frequency.
  /// Responses in the nav map stream may be sent less frequently if the robot does
  /// not consider there to be relevant new information.
  /// </summary>
  public sealed partial class NavMapFeedRequest : pb::IMessage<NavMapFeedRequest> {
    private static readonly pb::MessageParser<NavMapFeedRequest> _parser = new pb::MessageParser<NavMapFeedRequest>(() => new NavMapFeedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavMapFeedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.NavMapReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapFeedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapFeedRequest(NavMapFeedRequest other) : this() {
      frequency_ = other.frequency_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapFeedRequest Clone() {
      return new NavMapFeedRequest(this);
    }

    /// <summary>Field number for the "frequency" field.</summary>
    public const int FrequencyFieldNumber = 1;
    private float frequency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Frequency {
      get { return frequency_; }
      set {
        frequency_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavMapFeedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavMapFeedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Frequency, other.Frequency)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Frequency != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Frequency);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Frequency != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Frequency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Frequency != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavMapFeedRequest other) {
      if (other == null) {
        return;
      }
      if (other.Frequency != 0F) {
        Frequency = other.Frequency;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Frequency = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A full nav map sent from the robot.  It contains an origin_id that
  /// which can be compared against the robot's current origin_id, general
  /// info about the map, and a collection of quads representing the map's
  /// content.
  /// </summary>
  public sealed partial class NavMapFeedResponse : pb::IMessage<NavMapFeedResponse> {
    private static readonly pb::MessageParser<NavMapFeedResponse> _parser = new pb::MessageParser<NavMapFeedResponse>(() => new NavMapFeedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NavMapFeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.NavMapReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapFeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapFeedResponse(NavMapFeedResponse other) : this() {
      originId_ = other.originId_;
      mapInfo_ = other.mapInfo_ != null ? other.mapInfo_.Clone() : null;
      quadInfos_ = other.quadInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NavMapFeedResponse Clone() {
      return new NavMapFeedResponse(this);
    }

    /// <summary>Field number for the "origin_id" field.</summary>
    public const int OriginIdFieldNumber = 1;
    private uint originId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginId {
      get { return originId_; }
      set {
        originId_ = value;
      }
    }

    /// <summary>Field number for the "map_info" field.</summary>
    public const int MapInfoFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.NavMapInfo mapInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.NavMapInfo MapInfo {
      get { return mapInfo_; }
      set {
        mapInfo_ = value;
      }
    }

    /// <summary>Field number for the "quad_infos" field.</summary>
    public const int QuadInfosFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.NavMapQuadInfo> _repeated_quadInfos_codec
        = pb::FieldCodec.ForMessage(26, global::Anki.Vector.ExternalInterface.NavMapQuadInfo.Parser);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.NavMapQuadInfo> quadInfos_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.NavMapQuadInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.NavMapQuadInfo> QuadInfos {
      get { return quadInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NavMapFeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NavMapFeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OriginId != other.OriginId) return false;
      if (!object.Equals(MapInfo, other.MapInfo)) return false;
      if(!quadInfos_.Equals(other.quadInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OriginId != 0) hash ^= OriginId.GetHashCode();
      if (mapInfo_ != null) hash ^= MapInfo.GetHashCode();
      hash ^= quadInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OriginId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OriginId);
      }
      if (mapInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MapInfo);
      }
      quadInfos_.WriteTo(output, _repeated_quadInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OriginId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginId);
      }
      if (mapInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapInfo);
      }
      size += quadInfos_.CalculateSize(_repeated_quadInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NavMapFeedResponse other) {
      if (other == null) {
        return;
      }
      if (other.OriginId != 0) {
        OriginId = other.OriginId;
      }
      if (other.mapInfo_ != null) {
        if (mapInfo_ == null) {
          MapInfo = new global::Anki.Vector.ExternalInterface.NavMapInfo();
        }
        MapInfo.MergeFrom(other.MapInfo);
      }
      quadInfos_.Add(other.quadInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OriginId = input.ReadUInt32();
            break;
          }
          case 18: {
            if (mapInfo_ == null) {
              MapInfo = new global::Anki.Vector.ExternalInterface.NavMapInfo();
            }
            input.ReadMessage(MapInfo);
            break;
          }
          case 26: {
            quadInfos_.AddEntriesFrom(input, _repeated_quadInfos_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
