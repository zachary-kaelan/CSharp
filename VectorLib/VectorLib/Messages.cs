// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: anki_vector/messaging/messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Anki.Vector.ExternalInterface {

  /// <summary>Holder for reflection information generated from anki_vector/messaging/messages.proto</summary>
  public static partial class MessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for anki_vector/messaging/messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRhbmtpX3ZlY3Rvci9tZXNzYWdpbmcvbWVzc2FnZXMucHJvdG8SHkFua2ku",
            "VmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZRorYW5raV92ZWN0b3IvbWVzc2Fn",
            "aW5nL3Jlc3BvbnNlX3N0YXR1cy5wcm90bxomYW5raV92ZWN0b3IvbWVzc2Fn",
            "aW5nL2V4dGVuc2lvbnMucHJvdG8iDwoNS2VlcEFsaXZlUGluZyIZCglBbmlt",
            "YXRpb24SDAoEbmFtZRgBIAEoCSJ8ChJEcml2ZVdoZWVsc1JlcXVlc3QSFwoP",
            "bGVmdF93aGVlbF9tbXBzGAEgASgCEhgKEHJpZ2h0X3doZWVsX21tcHMYAiAB",
            "KAISGAoQbGVmdF93aGVlbF9tbXBzMhgDIAEoAhIZChFyaWdodF93aGVlbF9t",
            "bXBzMhgEIAEoAiJVChNEcml2ZVdoZWVsc1Jlc3BvbnNlEj4KBnN0YXR1cxgB",
            "IAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5SZXNwb25z",
            "ZVN0YXR1cyIsCg9Nb3ZlSGVhZFJlcXVlc3QSGQoRc3BlZWRfcmFkX3Blcl9z",
            "ZWMYASABKAIiUgoQTW92ZUhlYWRSZXNwb25zZRI+CgZzdGF0dXMYASABKAsy",
            "Li5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUmVzcG9uc2VTdGF0",
            "dXMiLAoPTW92ZUxpZnRSZXF1ZXN0EhkKEXNwZWVkX3JhZF9wZXJfc2VjGAEg",
            "ASgCIlIKEE1vdmVMaWZ0UmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4uQW5r",
            "aS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVzIrQB",
            "ChRQbGF5QW5pbWF0aW9uUmVxdWVzdBI8CglhbmltYXRpb24YASABKAsyKS5B",
            "bmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQW5pbWF0aW9uEg0KBWxv",
            "b3BzGAIgASgNEhkKEWlnbm9yZV9ib2R5X3RyYWNrGAMgASgIEhkKEWlnbm9y",
            "ZV9oZWFkX3RyYWNrGAQgASgIEhkKEWlnbm9yZV9saWZ0X3RyYWNrGAUgASgI",
            "IpgBChVQbGF5QW5pbWF0aW9uUmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4u",
            "QW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVz",
            "Ej8KBnJlc3VsdBgCIAEoDjIvLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVy",
            "ZmFjZS5CZWhhdmlvclJlc3VsdHMiFwoVTGlzdEFuaW1hdGlvbnNSZXF1ZXN0",
            "IpwBChZMaXN0QW5pbWF0aW9uc1Jlc3BvbnNlEj4KBnN0YXR1cxgBIAEoCzIu",
            "LkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5SZXNwb25zZVN0YXR1",
            "cxJCCg9hbmltYXRpb25fbmFtZXMYAiADKAsyKS5BbmtpLlZlY3Rvci5leHRl",
            "cm5hbF9pbnRlcmZhY2UuQW5pbWF0aW9uIl8KGkRpc3BsYXlGYWNlSW1hZ2VS",
            "R0JSZXF1ZXN0EhEKCWZhY2VfZGF0YRgBIAEoDBITCgtkdXJhdGlvbl9tcxgC",
            "IAEoDRIZChFpbnRlcnJ1cHRfcnVubmluZxgDIAEoCCJdChtEaXNwbGF5RmFj",
            "ZUltYWdlUkdCUmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4uQW5raS5WZWN0",
            "b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVzIhsKGU1lZXRW",
            "aWN0b3JGYWNlU2NhblN0YXJ0ZWQiHAoaTWVldFZpY3RvckZhY2VTY2FuQ29t",
            "cGxldGUivwIKBlN0YXR1cxJiCh1tZWV0X3ZpY3Rvcl9mYWNlX3NjYW5fc3Rh",
            "cnRlZBgCIAEoCzI5LkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5N",
            "ZWV0VmljdG9yRmFjZVNjYW5TdGFydGVkSAASZAoebWVldF92aWN0b3JfZmFj",
            "ZV9zY2FuX2NvbXBsZXRlGAMgASgLMjouQW5raS5WZWN0b3IuZXh0ZXJuYWxf",
            "aW50ZXJmYWNlLk1lZXRWaWN0b3JGYWNlU2NhbkNvbXBsZXRlSAASXAoZZmFj",
            "ZV9lbnJvbGxtZW50X2NvbXBsZXRlZBgEIAEoCzI3LkFua2kuVmVjdG9yLmV4",
            "dGVybmFsX2ludGVyZmFjZS5GYWNlRW5yb2xsbWVudENvbXBsZXRlZEgAQg0K",
            "C3N0YXR1c190eXBlIqwBCghXYWtlV29yZBJICg93YWtlX3dvcmRfYmVnaW4Y",
            "ASABKAsyLS5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuV2FrZVdv",
            "cmRCZWdpbkgAEkQKDXdha2Vfd29yZF9lbmQYAiABKAsyKy5BbmtpLlZlY3Rv",
            "ci5leHRlcm5hbF9pbnRlcmZhY2UuV2FrZVdvcmRFbmRIAEIQCg53YWtlX3dv",
            "cmRfdHlwZSJiChFUaW1lU3RhbXBlZFN0YXR1cxI2CgZzdGF0dXMYASABKAsy",
            "Ji5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuU3RhdHVzEhUKDXRp",
            "bWVzdGFtcF91dGMYAiABKA0icAoKUG9zZVN0cnVjdBIJCgF4GAEgASgCEgkK",
            "AXkYAiABKAISCQoBehgDIAEoAhIKCgJxMBgEIAEoAhIKCgJxMRgFIAEoAhIK",
            "CgJxMhgGIAEoAhIKCgJxMxgHIAEoAhIRCglvcmlnaW5faWQYCCABKA0iLAoJ",
            "QWNjZWxEYXRhEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgCIisK",
            "CEd5cm9EYXRhEgkKAXgYASABKAISCQoBeRgCIAEoAhIJCgF6GAMgASgCIqMB",
            "CghQcm94RGF0YRITCgtkaXN0YW5jZV9tbRgBIAEoDRIWCg5zaWduYWxfcXVh",
            "bGl0eRgCIAEoAhIZChFpc19pbl92YWxpZF9yYW5nZRgDIAEoCBIfChdpc192",
            "YWxpZF9zaWduYWxfcXVhbGl0eRgEIAEoCBIWCg5pc19saWZ0X2luX2ZvdhgF",
            "IAEoCBIWCg5pc190b29fcGl0Y2hlZBgGIAEoCCI+CglUb3VjaERhdGESFwoP",
            "cmF3X3RvdWNoX3ZhbHVlGAEgASgNEhgKEGlzX2JlaW5nX3RvdWNoZWQYAiAB",
            "KAgiggUKClJvYm90U3RhdGUSOAoEcG9zZRgBIAEoCzIqLkFua2kuVmVjdG9y",
            "LmV4dGVybmFsX2ludGVyZmFjZS5Qb3NlU3RydWN0EhYKDnBvc2VfYW5nbGVf",
            "cmFkGAIgASgCEhYKDnBvc2VfcGl0Y2hfcmFkGAMgASgCEh0KFWxlZnRfd2hl",
            "ZWxfc3BlZWRfbW1wcxgEIAEoAhIeChZyaWdodF93aGVlbF9zcGVlZF9tbXBz",
            "GAUgASgCEhYKDmhlYWRfYW5nbGVfcmFkGAYgASgCEhYKDmxpZnRfaGVpZ2h0",
            "X21tGAcgASgCEjgKBWFjY2VsGAggASgLMikuQW5raS5WZWN0b3IuZXh0ZXJu",
            "YWxfaW50ZXJmYWNlLkFjY2VsRGF0YRI2CgRneXJvGAkgASgLMiguQW5raS5W",
            "ZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkd5cm9EYXRhEhoKEmNhcnJ5aW5n",
            "X29iamVjdF9pZBgKIAEoBRIhChljYXJyeWluZ19vYmplY3Rfb25fdG9wX2lk",
            "GAsgASgFEh8KF2hlYWRfdHJhY2tpbmdfb2JqZWN0X2lkGAwgASgFEh4KFmxv",
            "Y2FsaXplZF90b19vYmplY3RfaWQYDSABKAUSHQoVbGFzdF9pbWFnZV90aW1l",
            "X3N0YW1wGA4gASgNEg4KBnN0YXR1cxgPIAEoDRI7Cglwcm94X2RhdGEYECAB",
            "KAsyKC5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUHJveERhdGES",
            "PQoKdG91Y2hfZGF0YRgRIAEoCzIpLkFua2kuVmVjdG9yLmV4dGVybmFsX2lu",
            "dGVyZmFjZS5Ub3VjaERhdGEiIQoJQ2xhZFBvaW50EgkKAXgYASABKAISCQoB",
            "eRgCIAEoAiJRCghDbGFkUmVjdBISCgp4X3RvcF9sZWZ0GAEgASgCEhIKCnlf",
            "dG9wX2xlZnQYAiABKAISDQoFd2lkdGgYAyABKAISDgoGaGVpZ2h0GAQgASgC",
            "IooEChFSb2JvdE9ic2VydmVkRmFjZRIPCgdmYWNlX2lkGAEgASgFEhEKCXRp",
            "bWVzdGFtcBgCIAEoDRI4CgRwb3NlGAMgASgLMiouQW5raS5WZWN0b3IuZXh0",
            "ZXJuYWxfaW50ZXJmYWNlLlBvc2VTdHJ1Y3QSOgoIaW1nX3JlY3QYBCABKAsy",
            "KC5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQ2xhZFJlY3QSDAoE",
            "bmFtZRgFIAEoCRJECgpleHByZXNzaW9uGAYgASgOMjAuQW5raS5WZWN0b3Iu",
            "ZXh0ZXJuYWxfaW50ZXJmYWNlLkZhY2lhbEV4cHJlc3Npb24SGQoRZXhwcmVz",
            "c2lvbl92YWx1ZXMYByADKA0SOwoIbGVmdF9leWUYCCADKAsyKS5BbmtpLlZl",
            "Y3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQ2xhZFBvaW50EjwKCXJpZ2h0X2V5",
            "ZRgJIAMoCzIpLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5DbGFk",
            "UG9pbnQSNwoEbm9zZRgKIAMoCzIpLkFua2kuVmVjdG9yLmV4dGVybmFsX2lu",
            "dGVyZmFjZS5DbGFkUG9pbnQSOAoFbW91dGgYCyADKAsyKS5BbmtpLlZlY3Rv",
            "ci5leHRlcm5hbF9pbnRlcmZhY2UuQ2xhZFBvaW50IjwKGlJvYm90Q2hhbmdl",
            "ZE9ic2VydmVkRmFjZUlEEg4KBm9sZF9pZBgBIAEoBRIOCgZuZXdfaWQYAiAB",
            "KAUiMQoQQXBwSW50ZW50UmVxdWVzdBIOCgZpbnRlbnQYASABKAkSDQoFcGFy",
            "YW0YAiABKAkiEQoPQXBwRGlzY29ubmVjdGVkIlMKEUFwcEludGVudFJlc3Bv",
            "bnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2lu",
            "dGVyZmFjZS5SZXNwb25zZVN0YXR1cyJ+ChdGYWNlRW5yb2xsbWVudENvbXBs",
            "ZXRlZBJECgZyZXN1bHQYASABKA4yNC5BbmtpLlZlY3Rvci5leHRlcm5hbF9p",
            "bnRlcmZhY2UuRmFjZUVucm9sbG1lbnRSZXN1bHQSDwoHZmFjZV9pZBgCIAEo",
            "BRIMCgRuYW1lGAMgASgJIh0KG0NhbmNlbEZhY2VFbnJvbGxtZW50UmVxdWVz",
            "dCJeChxDYW5jZWxGYWNlRW5yb2xsbWVudFJlc3BvbnNlEj4KBnN0YXR1cxgB",
            "IAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5SZXNwb25z",
            "ZVN0YXR1cyIdChtSZXF1ZXN0RW5yb2xsZWROYW1lc1JlcXVlc3QiwgEKD0xv",
            "YWRlZEtub3duRmFjZRIkChxzZWNvbmRzX3NpbmNlX2ZpcnN0X2Vucm9sbGVk",
            "GAEgASgDEiIKGnNlY29uZHNfc2luY2VfbGFzdF91cGRhdGVkGAIgASgDEh8K",
            "F3NlY29uZHNfc2luY2VfbGFzdF9zZWVuGAMgASgDEiUKHWxhc3Rfc2Vlbl9z",
            "ZWNvbmRzX3NpbmNlX2Vwb2NoGAQgASgDEg8KB2ZhY2VfaWQYBSABKAUSDAoE",
            "bmFtZRgGIAEoCSI5ChhSb2JvdFJlbmFtZWRFbnJvbGxlZEZhY2USDwoHZmFj",
            "ZV9pZBgBIAEoBRIMCgRuYW1lGAIgASgJIp4BChxSZXF1ZXN0RW5yb2xsZWRO",
            "YW1lc1Jlc3BvbnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4",
            "dGVybmFsX2ludGVyZmFjZS5SZXNwb25zZVN0YXR1cxI+CgVmYWNlcxgCIAMo",
            "CzIvLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5Mb2FkZWRLbm93",
            "bkZhY2UiVAodVXBkYXRlRW5yb2xsZWRGYWNlQnlJRFJlcXVlc3QSDwoHZmFj",
            "ZV9pZBgBIAEoBRIQCghvbGRfbmFtZRgCIAEoCRIQCghuZXdfbmFtZRgDIAEo",
            "CSJgCh5VcGRhdGVFbnJvbGxlZEZhY2VCeUlEUmVzcG9uc2USPgoGc3RhdHVz",
            "GAEgASgLMi4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3Bv",
            "bnNlU3RhdHVzIi8KHEVyYXNlRW5yb2xsZWRGYWNlQnlJRFJlcXVlc3QSDwoH",
            "ZmFjZV9pZBgBIAEoBSJfCh1FcmFzZUVucm9sbGVkRmFjZUJ5SURSZXNwb25z",
            "ZRI+CgZzdGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRl",
            "cmZhY2UuUmVzcG9uc2VTdGF0dXMiHgocRXJhc2VBbGxFbnJvbGxlZEZhY2Vz",
            "UmVxdWVzdCJfCh1FcmFzZUFsbEVucm9sbGVkRmFjZXNSZXNwb25zZRI+CgZz",
            "dGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2Uu",
            "UmVzcG9uc2VTdGF0dXMiiAEKFlNldEZhY2VUb0Vucm9sbFJlcXVlc3QSDAoE",
            "bmFtZRgBIAEoCRITCgtvYnNlcnZlZF9pZBgCIAEoBRIPCgdzYXZlX2lkGAMg",
            "ASgFEhUKDXNhdmVfdG9fcm9ib3QYBCABKAgSEAoIc2F5X25hbWUYBSABKAgS",
            "EQoJdXNlX211c2ljGAYgASgIIlkKF1NldEZhY2VUb0Vucm9sbFJlc3BvbnNl",
            "Ej4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVy",
            "ZmFjZS5SZXNwb25zZVN0YXR1cyIYChZEcml2ZU9mZkNoYXJnZXJSZXF1ZXN0",
            "IpoBChdEcml2ZU9mZkNoYXJnZXJSZXNwb25zZRI+CgZzdGF0dXMYASABKAsy",
            "Li5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUmVzcG9uc2VTdGF0",
            "dXMSPwoGcmVzdWx0GAIgASgOMi8uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50",
            "ZXJmYWNlLkJlaGF2aW9yUmVzdWx0cyIXChVEcml2ZU9uQ2hhcmdlclJlcXVl",
            "c3QimQEKFkRyaXZlT25DaGFyZ2VyUmVzcG9uc2USPgoGc3RhdHVzGAEgASgL",
            "Mi4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3Rh",
            "dHVzEj8KBnJlc3VsdBgCIAEoDjIvLkFua2kuVmVjdG9yLmV4dGVybmFsX2lu",
            "dGVyZmFjZS5CZWhhdmlvclJlc3VsdHMiDwoNV2FrZVdvcmRCZWdpbiI4CgtX",
            "YWtlV29yZEVuZBIUCgxpbnRlbnRfaGVhcmQYASABKAgSEwoLaW50ZW50X2pz",
            "b24YAiABKAkibgoJUGhvdG9JbmZvEhAKCHBob3RvX2lkGAEgASgNEhUKDXRp",
            "bWVzdGFtcF91dGMYAiABKA0SGwoTcGhvdG9fY29waWVkX3RvX2FwcBgDIAEo",
            "CBIbChN0aHVtYl9jb3BpZWRfdG9fYXBwGAQgASgIIhMKEVBob3Rvc0luZm9S",
            "ZXF1ZXN0IpQBChJQaG90b3NJbmZvUmVzcG9uc2USPgoGc3RhdHVzGAEgASgL",
            "Mi4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3Rh",
            "dHVzEj4KC3Bob3RvX2luZm9zGAIgAygLMikuQW5raS5WZWN0b3IuZXh0ZXJu",
            "YWxfaW50ZXJmYWNlLlBob3RvSW5mbyIgCgxQaG90b1JlcXVlc3QSEAoIcGhv",
            "dG9faWQYASABKA0iNgoQUGhvdG9QYXRoTWVzc2FnZRIPCgdzdWNjZXNzGAEg",
            "ASgIEhEKCWZ1bGxfcGF0aBgCIAEoCSJvCg1QaG90b1Jlc3BvbnNlEj4KBnN0",
            "YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5S",
            "ZXNwb25zZVN0YXR1cxIPCgdzdWNjZXNzGAIgASgIEg0KBWltYWdlGAMgASgM",
            "IiQKEFRodW1ibmFpbFJlcXVlc3QSEAoIcGhvdG9faWQYASABKA0iOgoUVGh1",
            "bWJuYWlsUGF0aE1lc3NhZ2USDwoHc3VjY2VzcxgBIAEoCBIRCglmdWxsX3Bh",
            "dGgYAiABKAkicwoRVGh1bWJuYWlsUmVzcG9uc2USPgoGc3RhdHVzGAEgASgL",
            "Mi4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3Rh",
            "dHVzEg8KB3N1Y2Nlc3MYAiABKAgSDQoFaW1hZ2UYAyABKAwiJgoSRGVsZXRl",
            "UGhvdG9SZXF1ZXN0EhAKCHBob3RvX2lkGAEgASgNImYKE0RlbGV0ZVBob3Rv",
            "UmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4uQW5raS5WZWN0b3IuZXh0ZXJu",
            "YWxfaW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVzEg8KB3N1Y2Nlc3MYAiABKAgi",
            "HgoKUGhvdG9UYWtlbhIQCghwaG90b19pZBgBIAEoDSLBAgoRUGF0aE1vdGlv",
            "blByb2ZpbGUSEgoKc3BlZWRfbW1wcxgBIAEoAhITCgthY2NlbF9tbXBzMhgC",
            "IAEoAhITCgtkZWNlbF9tbXBzMhgDIAEoAhIkChxwb2ludF90dXJuX3NwZWVk",
            "X3JhZF9wZXJfc2VjGAQgASgCEiUKHXBvaW50X3R1cm5fYWNjZWxfcmFkX3Bl",
            "cl9zZWMyGAUgASgCEiUKHXBvaW50X3R1cm5fZGVjZWxfcmFkX3Blcl9zZWMy",
            "GAYgASgCEhcKD2RvY2tfc3BlZWRfbW1wcxgHIAEoAhIYChBkb2NrX2FjY2Vs",
            "X21tcHMyGAggASgCEhgKEGRvY2tfZGVjZWxfbW1wczIYCSABKAISGgoScmV2",
            "ZXJzZV9zcGVlZF9tbXBzGAogASgCEhEKCWlzX2N1c3RvbRgLIAEoCCL4DAoM",
            "QWN0aW9uUmVzdWx0EksKBGNvZGUYASABKA4yPS5BbmtpLlZlY3Rvci5leHRl",
            "cm5hbF9pbnRlcmZhY2UuQWN0aW9uUmVzdWx0LkFjdGlvblJlc3VsdENvZGUi",
            "mgwKEEFjdGlvblJlc3VsdENvZGUSGQoVQUNUSU9OX1JFU1VMVF9TVUNDRVNT",
            "EAASHAoVQUNUSU9OX1JFU1VMVF9SVU5OSU5HEICAgAgSLAolQUNUSU9OX1JF",
            "U1VMVF9DQU5DRUxMRURfV0hJTEVfUlVOTklORxCAgIAQEhIKC05PVF9TVEFS",
            "VEVEEIGAgBASDAoFQUJPUlQQgICAGBITCgxBTklNX0FCT1JURUQQgYCAGBIR",
            "CgpCQURfTUFSS0VSEIKAgBgSFgoPQkFEX01FU1NBR0VfVEFHEIOAgBgSEQoK",
            "QkFEX09CSkVDVBCEgIAYEg8KCEJBRF9QT1NFEIWAgBgSDgoHQkFEX1RBRxCG",
            "gIAYEh4KF0NIQVJHRVJfVU5QTFVHR0VEX0FCT1JUEIeAgBgSIQoaQ0xJRkZf",
            "QUxJR05fRkFJTEVEX1RJTUVPVVQQiICAGBIkCh1DTElGRl9BTElHTl9GQUlM",
            "RURfTk9fVFVSTklORxCJgIAYEiYKH0NMSUZGX0FMSUdOX0ZBSUxFRF9PVkVS",
            "X1RVUk5JTkcQioCAGBIiChtDTElGRl9BTElHTl9GQUlMRURfTk9fV0hJVEUQ",
            "i4CAGBIhChpDTElGRl9BTElHTl9GQUlMRURfU1RPUFBFRBCMgIAYEiEKGkZB",
            "SUxFRF9TRVRUSU5HX0NBTElCUkFUSU9OEI2AgBgSKAohRk9MTE9XSU5HX1BB",
            "VEhfQlVUX05PVF9UUkFWRVJTSU5HEI6AgBgSEgoLSU5URVJSVVBURUQQj4CA",
            "GBIfChhJTlZBTElEX09GRl9UUkVBRFNfU1RBVEUQkICAGBIZChJNSVNNQVRD",
            "SEVEX1VQX0FYSVMQkYCAGBITCgxOT19BTklNX05BTUUQkoCAGBIWCg9OT19E",
            "SVNUQU5DRV9TRVQQk4CAGBIOCgdOT19GQUNFEJSAgBgSEgoLTk9fR09BTF9T",
            "RVQQlYCAGBIZChJOT19QUkVBQ1RJT05fUE9TRVMQloCAGBIgChlOT1RfQ0FS",
            "UllJTkdfT0JKRUNUX0FCT1JUEJeAgBgSGwoUTk9UX09OX0NIQVJHRVJfQUJP",
            "UlQQmICAGBIVCg5OVUxMX1NVQkFDVElPThCZgIAYEiEKGlBBVEhfUExBTk5J",
            "TkdfRkFJTEVEX0FCT1JUEJqAgBgSKAohUElDS1VQX09CSkVDVF9VTkVYUEVD",
            "VEVETFlfTU9WSU5HEJuAgBgSIwocU0VORF9NRVNTQUdFX1RPX1JPQk9UX0ZB",
            "SUxFRBCcgIAYEhwKFVNUSUxMX0NBUlJZSU5HX09CSkVDVBCdgIAYEg4KB1RJ",
            "TUVPVVQQnoCAGBIUCg1UUkFDS1NfTE9DS0VEEJ+AgBgSHQoWVU5FWFBFQ1RF",
            "RF9ET0NLX0FDVElPThCggIAYEhgKEVVOS05PV05fVE9PTF9DT0RFEKGAgBgS",
            "HAoVVVBEQVRFX0RFUklWRURfRkFJTEVEEKKAgBgSIAoZVklTVUFMX09CU0VS",
            "VkFUSU9OX0ZBSUxFRBCjgIAYEiAKGVNIT1VMRE5UX0RSSVZFX09OX0NIQVJH",
            "RVIQpICAGBIMCgVSRVRSWRCAgIAgEiMKHERJRF9OT1RfUkVBQ0hfUFJFQUNU",
            "SU9OX1BPU0UQgYCAIBIdChZGQUlMRURfVFJBVkVSU0lOR19QQVRIEIKAgCAS",
            "IQoaTEFTVF9QSUNLX0FORF9QTEFDRV9GQUlMRUQQg4CAIBIkCh1NT1RPUl9T",
            "VE9QUEVEX01BS0lOR19QUk9HUkVTUxCEgIAgEiAKGU5PVF9DQVJSWUlOR19P",
            "QkpFQ1RfUkVUUlkQhYCAIBIbChROT1RfT05fQ0hBUkdFUl9SRVRSWRCGgIAg",
            "EiEKGlBBVEhfUExBTk5JTkdfRkFJTEVEX1JFVFJZEIeAgCASHgoXUExBQ0VN",
            "RU5UX0dPQUxfTk9UX0ZSRUUQiICAIBIsCiVQSUNLVVBfT0JKRUNUX1VORVhQ",
            "RUNURURMWV9OT1RfTU9WSU5HEImAgCASFwoQU1RJTExfT05fQ0hBUkdFUhCK",
            "gIAgEh0KFlVORVhQRUNURURfUElUQ0hfQU5HTEUQi4CAICKnAQoPR29Ub1Bv",
            "c2VSZXF1ZXN0EgwKBHhfbW0YASABKAISDAoEeV9tbRgCIAEoAhILCgNyYWQY",
            "AyABKAISRgoLbW90aW9uX3Byb2YYBCABKAsyMS5BbmtpLlZlY3Rvci5leHRl",
            "cm5hbF9pbnRlcmZhY2UuUGF0aE1vdGlvblByb2ZpbGUSDgoGaWRfdGFnGAUg",
            "ASgFEhMKC251bV9yZXRyaWVzGAYgASgFIpABChBHb1RvUG9zZVJlc3BvbnNl",
            "Ej4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVy",
            "ZmFjZS5SZXNwb25zZVN0YXR1cxI8CgZyZXN1bHQYAiABKAsyLC5BbmtpLlZl",
            "Y3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQWN0aW9uUmVzdWx0ItACChNEb2Nr",
            "V2l0aEN1YmVSZXF1ZXN0EhEKCW9iamVjdF9pZBgBIAEoBRIfChdkaXN0YW5j",
            "ZV9mcm9tX21hcmtlcl9tbRgCIAEoAhIaChJhcHByb2FjaF9hbmdsZV9yYWQY",
            "AyABKAISRQoOYWxpZ25tZW50X3R5cGUYBCABKA4yLS5BbmtpLlZlY3Rvci5l",
            "eHRlcm5hbF9pbnRlcmZhY2UuQWxpZ25tZW50VHlwZRIaChJ1c2VfYXBwcm9h",
            "Y2hfYW5nbGUYBSABKAgSGQoRdXNlX3ByZV9kb2NrX3Bvc2UYBiABKAgSRgoL",
            "bW90aW9uX3Byb2YYByABKAsyMS5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRl",
            "cmZhY2UuUGF0aE1vdGlvblByb2ZpbGUSDgoGaWRfdGFnGAggASgFEhMKC251",
            "bV9yZXRyaWVzGAkgASgFIpQBChREb2NrV2l0aEN1YmVSZXNwb25zZRI+CgZz",
            "dGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2Uu",
            "UmVzcG9uc2VTdGF0dXMSPAoGcmVzdWx0GAIgASgLMiwuQW5raS5WZWN0b3Iu",
            "ZXh0ZXJuYWxfaW50ZXJmYWNlLkFjdGlvblJlc3VsdCJ/ChREcml2ZVN0cmFp",
            "Z2h0UmVxdWVzdBISCgpzcGVlZF9tbXBzGAEgASgCEg8KB2Rpc3RfbW0YAiAB",
            "KAISHQoVc2hvdWxkX3BsYXlfYW5pbWF0aW9uGAMgASgIEg4KBmlkX3RhZxgE",
            "IAEoBRITCgtudW1fcmV0cmllcxgFIAEoBSKVAQoVRHJpdmVTdHJhaWdodFJl",
            "c3BvbnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFs",
            "X2ludGVyZmFjZS5SZXNwb25zZVN0YXR1cxI8CgZyZXN1bHQYAiABKAsyLC5B",
            "bmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQWN0aW9uUmVzdWx0IqkB",
            "ChJUdXJuSW5QbGFjZVJlcXVlc3QSEQoJYW5nbGVfcmFkGAEgASgCEhkKEXNw",
            "ZWVkX3JhZF9wZXJfc2VjGAIgASgCEhoKEmFjY2VsX3JhZF9wZXJfc2VjMhgD",
            "IAEoAhIPCgd0b2xfcmFkGAQgASgCEhMKC2lzX2Fic29sdXRlGAUgASgNEg4K",
            "BmlkX3RhZxgGIAEoBRITCgtudW1fcmV0cmllcxgHIAEoBSKTAQoTVHVybklu",
            "UGxhY2VSZXNwb25zZRI+CgZzdGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5l",
            "eHRlcm5hbF9pbnRlcmZhY2UuUmVzcG9uc2VTdGF0dXMSPAoGcmVzdWx0GAIg",
            "ASgLMiwuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkFjdGlvblJl",
            "c3VsdCKeAQoTU2V0SGVhZEFuZ2xlUmVxdWVzdBIRCglhbmdsZV9yYWQYASAB",
            "KAISHQoVbWF4X3NwZWVkX3JhZF9wZXJfc2VjGAIgASgCEhoKEmFjY2VsX3Jh",
            "ZF9wZXJfc2VjMhgDIAEoAhIUCgxkdXJhdGlvbl9zZWMYBCABKAISDgoGaWRf",
            "dGFnGAUgASgFEhMKC251bV9yZXRyaWVzGAYgASgFIpQBChRTZXRIZWFkQW5n",
            "bGVSZXNwb25zZRI+CgZzdGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5leHRl",
            "cm5hbF9pbnRlcmZhY2UuUmVzcG9uc2VTdGF0dXMSPAoGcmVzdWx0GAIgASgL",
            "MiwuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkFjdGlvblJlc3Vs",
            "dCKfAQoUU2V0TGlmdEhlaWdodFJlcXVlc3QSEQoJaGVpZ2h0X21tGAEgASgC",
            "Eh0KFW1heF9zcGVlZF9yYWRfcGVyX3NlYxgCIAEoAhIaChJhY2NlbF9yYWRf",
            "cGVyX3NlYzIYAyABKAISFAoMZHVyYXRpb25fc2VjGAQgASgCEg4KBmlkX3Rh",
            "ZxgFIAEoBRITCgtudW1fcmV0cmllcxgGIAEoBSKVAQoVU2V0TGlmdEhlaWdo",
            "dFJlc3BvbnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVy",
            "bmFsX2ludGVyZmFjZS5SZXNwb25zZVN0YXR1cxI8CgZyZXN1bHQYAiABKAsy",
            "LC5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuQWN0aW9uUmVzdWx0",
            "IrkDCgxOZXR3b3JrU3RhdHMSIwobZ19uZXRfc3RhdDFfbnVtX2Nvbm5lY3Rp",
            "b25zGAEgASgFEh8KF2dfbmV0X3N0YXQyX2xhdGVuY3lfYXZnGAIgASgCEh4K",
            "FmdfbmV0X3N0YXQzX2xhdGVuY3lfc2QYAyABKAISHwoXZ19uZXRfc3RhdDRf",
            "bGF0ZW5jeV9taW4YBCABKAISHwoXZ19uZXRfc3RhdDVfbGF0ZW5jeV9tYXgY",
            "BSABKAISIwobZ19uZXRfc3RhdDZfcGluZ19hcnJpdmVkX3BjGAYgASgCEiUK",
            "HWdfbmV0X3N0YXQ3X2V4dF9xdWV1ZWRfYXZnX21zGAcgASgCEiUKHWdfbmV0",
            "X3N0YXQ4X2V4dF9xdWV1ZWRfbWluX21zGAggASgCEiUKHWdfbmV0X3N0YXQ5",
            "X2V4dF9xdWV1ZWRfbWF4X21zGAkgASgCEiEKGWdfbmV0X3N0YXRhX3F1ZXVl",
            "ZF9hdmdfbXMYCiABKAISIQoZZ19uZXRfc3RhdGJfcXVldWVkX21pbl9tcxgL",
            "IAEoAhIhChlnX25ldF9zdGF0Y19xdWV1ZWRfbWF4X21zGAwgASgCIhUKE0Jh",
            "dHRlcnlTdGF0ZVJlcXVlc3QiyQIKFEJhdHRlcnlTdGF0ZVJlc3BvbnNlEj4K",
            "BnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2ludGVyZmFj",
            "ZS5SZXNwb25zZVN0YXR1cxJDCg1iYXR0ZXJ5X2xldmVsGAIgASgOMiwuQW5r",
            "aS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkJhdHRlcnlMZXZlbBIVCg1i",
            "YXR0ZXJ5X3ZvbHRzGAMgASgCEhMKC2lzX2NoYXJnaW5nGAQgASgIEh4KFmlz",
            "X29uX2NoYXJnZXJfcGxhdGZvcm0YBSABKAgSHQoVc3VnZ2VzdGVkX2NoYXJn",
            "ZXJfc2VjGAYgASgCEkEKDGN1YmVfYmF0dGVyeRgHIAEoCzIrLkFua2kuVmVj",
            "dG9yLmV4dGVybmFsX2ludGVyZmFjZS5DdWJlQmF0dGVyeSLTAQoLQ3ViZUJh",
            "dHRlcnkSSwoFbGV2ZWwYASABKA4yPC5BbmtpLlZlY3Rvci5leHRlcm5hbF9p",
            "bnRlcmZhY2UuQ3ViZUJhdHRlcnkuQ3ViZUJhdHRlcnlMZXZlbBISCgpmYWN0",
            "b3J5X2lkGAIgASgJEhUKDWJhdHRlcnlfdm9sdHMYAyABKAISIwobdGltZV9z",
            "aW5jZV9sYXN0X3JlYWRpbmdfc2VjGAQgASgCIicKEEN1YmVCYXR0ZXJ5TGV2",
            "ZWwSBwoDTG93EAASCgoGTm9ybWFsEAEiFQoTVmVyc2lvblN0YXRlUmVxdWVz",
            "dCKDAQoUVmVyc2lvblN0YXRlUmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4u",
            "QW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVz",
            "EhIKCm9zX3ZlcnNpb24YAiABKAkSFwoPZW5naW5lX2J1aWxkX2lkGAMgASgJ",
            "IhUKE05ldHdvcmtTdGF0ZVJlcXVlc3QimwEKFE5ldHdvcmtTdGF0ZVJlc3Bv",
            "bnNlEj4KBnN0YXR1cxgBIAEoCzIuLkFua2kuVmVjdG9yLmV4dGVybmFsX2lu",
            "dGVyZmFjZS5SZXNwb25zZVN0YXR1cxJDCg1uZXR3b3JrX3N0YXRzGAIgASgL",
            "MiwuQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLk5ldHdvcmtTdGF0",
            "cyJRCg5TYXlUZXh0UmVxdWVzdBIMCgR0ZXh0GAEgASgJEhgKEHVzZV92ZWN0",
            "b3Jfdm9pY2UYAiABKAgSFwoPZHVyYXRpb25fc2NhbGFyGAMgASgCIvUBCg9T",
            "YXlUZXh0UmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4uQW5raS5WZWN0b3Iu",
            "ZXh0ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVzEk0KBXN0YXRlGAIg",
            "ASgOMj4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLlNheVRleHRS",
            "ZXNwb25zZS5VdHRlcmFuY2VTdGF0ZSJTCg5VdHRlcmFuY2VTdGF0ZRILCgdJ",
            "TlZBTElEEAASDgoKR0VORVJBVElORxABEgkKBVJFQURZEAISCwoHUExBWUlO",
            "RxADEgwKCEZJTklTSEVEEAQimwEKD1N0aW11bGF0aW9uSW5mbxIWCg5lbW90",
            "aW9uX2V2ZW50cxgBIAMoCRINCgV2YWx1ZRgCIAEoAhIQCgh2ZWxvY2l0eRgD",
            "IAEoAhINCgVhY2NlbBgEIAEoAhIaChJ2YWx1ZV9iZWZvcmVfZXZlbnQYBSAB",
            "KAISEQoJbWluX3ZhbHVlGAYgASgCEhEKCW1heF92YWx1ZRgHIAEoAiJZChRB",
            "dWRpb1NlbmRNb2RlUmVxdWVzdBJBCgRtb2RlGAEgASgOMjMuQW5raS5WZWN0",
            "b3IuZXh0ZXJuYWxfaW50ZXJmYWNlLkF1ZGlvUHJvY2Vzc2luZ01vZGUiWQoU",
            "QXVkaW9TZW5kTW9kZUNoYW5nZWQSQQoEbW9kZRgBIAEoDjIzLkFua2kuVmVj",
            "dG9yLmV4dGVybmFsX2ludGVyZmFjZS5BdWRpb1Byb2Nlc3NpbmdNb2RlIugB",
            "CgpBdWRpb0NodW5rEhgKEHJvYm90X3RpbWVfc3RhbXAYASABKA0SEAoIZ3Jv",
            "dXBfaWQYAiABKA0SEAoIY2h1bmtfaWQYAyABKA0SGQoRYXVkaW9fY2h1bmtf",
            "Y291bnQYBCABKA0SFAoMc2lnbmFsX3Bvd2VyGAUgASgMEhsKE2RpcmVjdGlv",
            "bl9zdHJlbmd0aHMYBiABKAwSGAoQc291cmNlX2RpcmVjdGlvbhgHIAEoDRIZ",
            "ChFzb3VyY2VfY29uZmlkZW5jZRgIIAEoDRIZChFub2lzZV9mbG9vcl9wb3dl",
            "chgJIAEoDSISChBBdWRpb0ZlZWRSZXF1ZXN0IsgBChFBdWRpb0ZlZWRSZXNw",
            "b25zZRIYChByb2JvdF90aW1lX3N0YW1wGAEgASgNEhAKCGdyb3VwX2lkGAIg",
            "ASgNEhQKDHNpZ25hbF9wb3dlchgDIAEoDBIbChNkaXJlY3Rpb25fc3RyZW5n",
            "dGhzGAQgASgMEhgKEHNvdXJjZV9kaXJlY3Rpb24YBSABKA0SGQoRc291cmNl",
            "X2NvbmZpZGVuY2UYBiABKA0SGQoRbm9pc2VfZmxvb3JfcG93ZXIYByABKA06",
            "BICmHQEiLgocRW5hYmxlTWFya2VyRGV0ZWN0aW9uUmVxdWVzdBIOCgZlbmFi",
            "bGUYASABKAgiXwodRW5hYmxlTWFya2VyRGV0ZWN0aW9uUmVzcG9uc2USPgoG",
            "c3RhdHVzGAEgASgLMi4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNl",
            "LlJlc3BvbnNlU3RhdHVzIrEBChpFbmFibGVGYWNlRGV0ZWN0aW9uUmVxdWVz",
            "dBIOCgZlbmFibGUYASABKAgSHgoWZW5hYmxlX3NtaWxlX2RldGVjdGlvbhgC",
            "IAEoCBIkChxlbmFibGVfZXhwcmVzc2lvbl9lc3RpbWF0aW9uGAMgASgIEh4K",
            "FmVuYWJsZV9ibGlua19kZXRlY3Rpb24YBCABKAgSHQoVZW5hYmxlX2dhemVf",
            "ZGV0ZWN0aW9uGAUgASgIIl0KG0VuYWJsZUZhY2VEZXRlY3Rpb25SZXNwb25z",
            "ZRI+CgZzdGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRl",
            "cmZhY2UuUmVzcG9uc2VTdGF0dXMiLgocRW5hYmxlTW90aW9uRGV0ZWN0aW9u",
            "UmVxdWVzdBIOCgZlbmFibGUYASABKAgiXwodRW5hYmxlTW90aW9uRGV0ZWN0",
            "aW9uUmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4uQW5raS5WZWN0b3IuZXh0",
            "ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVzIikKF0VuYWJsZU1pcnJv",
            "ck1vZGVSZXF1ZXN0Eg4KBmVuYWJsZRgBIAEoCCJaChhFbmFibGVNaXJyb3JN",
            "b2RlUmVzcG9uc2USPgoGc3RhdHVzGAEgASgLMi4uQW5raS5WZWN0b3IuZXh0",
            "ZXJuYWxfaW50ZXJmYWNlLlJlc3BvbnNlU3RhdHVzIhQKEk1pcnJvck1vZGVE",
            "aXNhYmxlZCItChtFbmFibGVJbWFnZVN0cmVhbWluZ1JlcXVlc3QSDgoGZW5h",
            "YmxlGAEgASgIIl4KHEVuYWJsZUltYWdlU3RyZWFtaW5nUmVzcG9uc2USPgoG",
            "c3RhdHVzGAEgASgLMi4uQW5raS5WZWN0b3IuZXh0ZXJuYWxfaW50ZXJmYWNl",
            "LlJlc3BvbnNlU3RhdHVzIhkKF1Zpc2lvbk1vZGVzQXV0b0Rpc2FibGVkItED",
            "CgpJbWFnZUNodW5rEhgKEGZyYW1lX3RpbWVfc3RhbXAYASABKA0SEAoIaW1h",
            "Z2VfaWQYAiABKA0SDQoFd2lkdGgYAyABKA0SDgoGaGVpZ2h0GAQgASgNElAK",
            "DmltYWdlX2VuY29kaW5nGAUgASgOMjguQW5raS5WZWN0b3IuZXh0ZXJuYWxf",
            "aW50ZXJmYWNlLkltYWdlQ2h1bmsuSW1hZ2VFbmNvZGluZxIVCg1kaXNwbGF5",
            "X2luZGV4GAYgASgNEhkKEWltYWdlX2NodW5rX2NvdW50GAcgASgNEhAKCGNo",
            "dW5rX2lkGAggASgNEgwKBGRhdGEYCSABKAwi0wEKDUltYWdlRW5jb2RpbmcS",
            "FwoTTk9ORV9JTUFHRV9FTkNPRElORxAAEgwKCFJBV19HUkFZEAESCwoHUkFX",
            "X1JHQhACEggKBFlVWVYQAxIMCghZVVY0MjBTUBAEEgkKBUJBWUVSEAUSDQoJ",
            "SlBFR19HUkFZEAYSDgoKSlBFR19DT0xPUhAHEhkKFUpQRUdfQ09MT1JfSEFM",
            "Rl9XSURUSBAIEhcKE0pQRUdfTUlOSU1JWkVEX0dSQVkQCRIYChRKUEVHX01J",
            "TklNSVpFRF9DT0xPUhAKIhMKEUNhbWVyYUZlZWRSZXF1ZXN0IqYBChJDYW1l",
            "cmFGZWVkUmVzcG9uc2USGAoQZnJhbWVfdGltZV9zdGFtcBgBIAEoDRIQCghp",
            "bWFnZV9pZBgCIAEoDRJQCg5pbWFnZV9lbmNvZGluZxgDIAEoDjI4LkFua2ku",
            "VmVjdG9yLmV4dGVybmFsX2ludGVyZmFjZS5JbWFnZUNodW5rLkltYWdlRW5j",
            "b2RpbmcSDAoEZGF0YRgEIAEoDDoEgKYdASI1ChJTZXRFeWVDb2xvclJlcXVl",
            "c3QSCwoDaHVlGAEgASgCEhIKCnNhdHVyYXRpb24YAiABKAIiVQoTU2V0RXll",
            "Q29sb3JSZXNwb25zZRI+CgZzdGF0dXMYASABKAsyLi5BbmtpLlZlY3Rvci5l",
            "eHRlcm5hbF9pbnRlcmZhY2UuUmVzcG9uc2VTdGF0dXMilgEKGFNES0luaXRp",
            "YWxpemF0aW9uUmVxdWVzdBIaChJzZGtfbW9kdWxlX3ZlcnNpb24YASABKAkS",
            "FgoOcHl0aG9uX3ZlcnNpb24YAiABKAkSHQoVcHl0aG9uX2ltcGxlbWVudGF0",
            "aW9uGAMgASgJEhIKCm9zX3ZlcnNpb24YBCABKAkSEwoLY3B1X3ZlcnNpb24Y",
            "BSABKAkiWwoZU0RLSW5pdGlhbGl6YXRpb25SZXNwb25zZRI+CgZzdGF0dXMY",
            "ASABKAsyLi5BbmtpLlZlY3Rvci5leHRlcm5hbF9pbnRlcmZhY2UuUmVzcG9u",
            "c2VTdGF0dXMq3AQKC1JvYm90U3RhdHVzEhUKEVJPQk9UX1NUQVRVU19OT05F",
            "EAASGgoWUk9CT1RfU1RBVFVTX0lTX01PVklORxABEiIKHlJPQk9UX1NUQVRV",
            "U19JU19DQVJSWUlOR19CTE9DSxACEiYKIlJPQk9UX1NUQVRVU19JU19QSUNL",
            "SU5HX09SX1BMQUNJTkcQBBIdChlST0JPVF9TVEFUVVNfSVNfUElDS0VEX1VQ",
            "EAgSIgoeUk9CT1RfU1RBVFVTX0lTX0JVVFRPTl9QUkVTU0VEEBASGwoXUk9C",
            "T1RfU1RBVFVTX0lTX0ZBTExJTkcQIBIdChlST0JPVF9TVEFUVVNfSVNfQU5J",
            "TUFUSU5HEEASHAoXUk9CT1RfU1RBVFVTX0lTX1BBVEhJTkcQgAESHQoYUk9C",
            "T1RfU1RBVFVTX0xJRlRfSU5fUE9TEIACEh0KGFJPQk9UX1NUQVRVU19IRUFE",
            "X0lOX1BPUxCABBIhChxST0JPVF9TVEFUVVNfQ0FMTV9QT1dFUl9NT0RFEIAI",
            "Eh8KGlJPQk9UX1NUQVRVU19JU19PTl9DSEFSR0VSEIAgEh0KGFJPQk9UX1NU",
            "QVRVU19JU19DSEFSR0lORxCAQBIhChtST0JPVF9TVEFUVVNfQ0xJRkZfREVU",
            "RUNURUQQgIABEiQKHlJPQk9UX1NUQVRVU19BUkVfV0hFRUxTX01PVklORxCA",
            "gAISIAoaUk9CT1RfU1RBVFVTX0lTX0JFSU5HX0hFTEQQgIAEEiUKH1JPQk9U",
            "X1NUQVRVU19JU19NT1RJT05fREVURUNURUQQgIAIKr0BChBGYWNpYWxFeHBy",
            "ZXNzaW9uEhYKEkVYUFJFU1NJT05fVU5LTk9XThAAEhYKEkVYUFJFU1NJT05f",
            "TkVVVFJBTBABEhgKFEVYUFJFU1NJT05fSEFQUElORVNTEAISFwoTRVhQUkVT",
            "U0lPTl9TVVJQUklTRRADEhQKEEVYUFJFU1NJT05fQU5HRVIQBBIWChJFWFBS",
            "RVNTSU9OX1NBRE5FU1MQBRIUChBFWFBSRVNTSU9OX0NPVU5UEAUaAhABKswB",
            "ChRGYWNlRW5yb2xsbWVudFJlc3VsdBILCgdTVUNDRVNTEAASEgoOU0FXX1dS",
            "T05HX0ZBQ0UQARIWChJTQVdfTVVMVElQTEVfRkFDRVMQAhINCglUSU1FRF9P",
            "VVQQAxIPCgtTQVZFX0ZBSUxFRBAEEg4KCklOQ09NUExFVEUQBRINCglDQU5D",
            "RUxMRUQQBhIPCgtOQU1FX0lOX1VTRRAHEhYKEk5BTUVEX1NUT1JBR0VfRlVM",
            "TBAIEhMKD1VOS05PV05fRkFJTFVSRRAJKmwKD0JlaGF2aW9yUmVzdWx0cxIa",
            "ChZCRUhBVklPUl9JTlZBTElEX1NUQVRFEAASGwoXQkVIQVZJT1JfQ09NUExF",
            "VEVfU1RBVEUQARIgChxCRUhBVklPUl9XT05UX0FDVElWQVRFX1NUQVRFEAIq",
            "UwoSQWN0aW9uVGFnQ29uc3RhbnRzEhMKD0lOVkFMSURfU0RLX1RBRxAAEhMK",
            "DUZJUlNUX1NES19UQUcQgYl6EhMKDExBU1RfU0RLX1RBRxDAjbcBKp4BCg1B",
            "bGlnbm1lbnRUeXBlEhoKFkFMSUdOTUVOVF9UWVBFX1VOS05PV04QABIeChpB",
            "TElHTk1FTlRfVFlQRV9MSUZUX0ZJTkdFUhABEh0KGUFMSUdOTUVOVF9UWVBF",
            "X0xJRlRfUExBVEUQAhIXChNBTElHTk1FTlRfVFlQRV9CT0RZEAMSGQoVQUxJ",
            "R05NRU5UX1RZUEVfQ1VTVE9NEAQqcwoMQmF0dGVyeUxldmVsEhkKFUJBVFRF",
            "UllfTEVWRUxfVU5LTk9XThAAEhUKEUJBVFRFUllfTEVWRUxfTE9XEAESGQoV",
            "QkFUVEVSWV9MRVZFTF9OT01JTkFMEAISFgoSQkFUVEVSWV9MRVZFTF9GVUxM",
            "EAMqzAEKDkF1ZGlvQ29uc3RhbnRzEhgKFEFVRElPX0NPTlNUQU5UU19OVUxM",
            "EAASHAoYTUlDX0RFVEVDVElPTl9ESVJFQ1RJT05TEAwSJQogU0FNUExFX0NP",
            "VU5UU19QRVJfRU5HSU5FX01FU1NBR0UQoAESIgodU0FNUExFX0NPVU5UU19Q",
            "RVJfU0RLX01FU1NBR0UQwAwSGwoWTUlDUk9QSE9ORV9TQU1QTEVfUkFURRCJ",
            "ehIaChVQUk9DRVNTRURfU0FNUExFX1JBVEUQgH0qhQEKE0F1ZGlvUHJvY2Vz",
            "c2luZ01vZGUSEQoNQVVESU9fVU5LTk9XThAAEg0KCUFVRElPX09GRhABEhMK",
            "D0FVRElPX0ZBU1RfTU9ERRACEhoKFkFVRElPX0RJUkVDVElPTkFMX01PREUQ",
            "AxIbChdBVURJT19WT0lDRV9ERVRFQ1RfTU9ERRAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Anki.Vector.ExternalInterface.ResponseStatusReflection.Descriptor, global::Anki.Vector.ExternalInterface.ExtensionsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Anki.Vector.ExternalInterface.RobotStatus), typeof(global::Anki.Vector.ExternalInterface.FacialExpression), typeof(global::Anki.Vector.ExternalInterface.FaceEnrollmentResult), typeof(global::Anki.Vector.ExternalInterface.BehaviorResults), typeof(global::Anki.Vector.ExternalInterface.ActionTagConstants), typeof(global::Anki.Vector.ExternalInterface.AlignmentType), typeof(global::Anki.Vector.ExternalInterface.BatteryLevel), typeof(global::Anki.Vector.ExternalInterface.AudioConstants), typeof(global::Anki.Vector.ExternalInterface.AudioProcessingMode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.KeepAlivePing), global::Anki.Vector.ExternalInterface.KeepAlivePing.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.Animation), global::Anki.Vector.ExternalInterface.Animation.Parser, new[]{ "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DriveWheelsRequest), global::Anki.Vector.ExternalInterface.DriveWheelsRequest.Parser, new[]{ "LeftWheelMmps", "RightWheelMmps", "LeftWheelMmps2", "RightWheelMmps2" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DriveWheelsResponse), global::Anki.Vector.ExternalInterface.DriveWheelsResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.MoveHeadRequest), global::Anki.Vector.ExternalInterface.MoveHeadRequest.Parser, new[]{ "SpeedRadPerSec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.MoveHeadResponse), global::Anki.Vector.ExternalInterface.MoveHeadResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.MoveLiftRequest), global::Anki.Vector.ExternalInterface.MoveLiftRequest.Parser, new[]{ "SpeedRadPerSec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.MoveLiftResponse), global::Anki.Vector.ExternalInterface.MoveLiftResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PlayAnimationRequest), global::Anki.Vector.ExternalInterface.PlayAnimationRequest.Parser, new[]{ "Animation", "Loops", "IgnoreBodyTrack", "IgnoreHeadTrack", "IgnoreLiftTrack" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PlayAnimationResponse), global::Anki.Vector.ExternalInterface.PlayAnimationResponse.Parser, new[]{ "Status", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ListAnimationsRequest), global::Anki.Vector.ExternalInterface.ListAnimationsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ListAnimationsResponse), global::Anki.Vector.ExternalInterface.ListAnimationsResponse.Parser, new[]{ "Status", "AnimationNames" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest), global::Anki.Vector.ExternalInterface.DisplayFaceImageRGBRequest.Parser, new[]{ "FaceData", "DurationMs", "InterruptRunning" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DisplayFaceImageRGBResponse), global::Anki.Vector.ExternalInterface.DisplayFaceImageRGBResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.MeetVictorFaceScanStarted), global::Anki.Vector.ExternalInterface.MeetVictorFaceScanStarted.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.MeetVictorFaceScanComplete), global::Anki.Vector.ExternalInterface.MeetVictorFaceScanComplete.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.Status), global::Anki.Vector.ExternalInterface.Status.Parser, new[]{ "MeetVictorFaceScanStarted", "MeetVictorFaceScanComplete", "FaceEnrollmentCompleted" }, new[]{ "StatusType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.WakeWord), global::Anki.Vector.ExternalInterface.WakeWord.Parser, new[]{ "WakeWordBegin", "WakeWordEnd" }, new[]{ "WakeWordType" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.TimeStampedStatus), global::Anki.Vector.ExternalInterface.TimeStampedStatus.Parser, new[]{ "Status", "TimestampUtc" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PoseStruct), global::Anki.Vector.ExternalInterface.PoseStruct.Parser, new[]{ "X", "Y", "Z", "Q0", "Q1", "Q2", "Q3", "OriginId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AccelData), global::Anki.Vector.ExternalInterface.AccelData.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.GyroData), global::Anki.Vector.ExternalInterface.GyroData.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ProxData), global::Anki.Vector.ExternalInterface.ProxData.Parser, new[]{ "DistanceMm", "SignalQuality", "IsInValidRange", "IsValidSignalQuality", "IsLiftInFov", "IsTooPitched" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.TouchData), global::Anki.Vector.ExternalInterface.TouchData.Parser, new[]{ "RawTouchValue", "IsBeingTouched" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.RobotState), global::Anki.Vector.ExternalInterface.RobotState.Parser, new[]{ "Pose", "PoseAngleRad", "PosePitchRad", "LeftWheelSpeedMmps", "RightWheelSpeedMmps", "HeadAngleRad", "LiftHeightMm", "Accel", "Gyro", "CarryingObjectId", "CarryingObjectOnTopId", "HeadTrackingObjectId", "LocalizedToObjectId", "LastImageTimeStamp", "Status", "ProxData", "TouchData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CladPoint), global::Anki.Vector.ExternalInterface.CladPoint.Parser, new[]{ "X", "Y" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CladRect), global::Anki.Vector.ExternalInterface.CladRect.Parser, new[]{ "XTopLeft", "YTopLeft", "Width", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.RobotObservedFace), global::Anki.Vector.ExternalInterface.RobotObservedFace.Parser, new[]{ "FaceId", "Timestamp", "Pose", "ImgRect", "Name", "Expression", "ExpressionValues", "LeftEye", "RightEye", "Nose", "Mouth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.RobotChangedObservedFaceID), global::Anki.Vector.ExternalInterface.RobotChangedObservedFaceID.Parser, new[]{ "OldId", "NewId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AppIntentRequest), global::Anki.Vector.ExternalInterface.AppIntentRequest.Parser, new[]{ "Intent", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AppDisconnected), global::Anki.Vector.ExternalInterface.AppDisconnected.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AppIntentResponse), global::Anki.Vector.ExternalInterface.AppIntentResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.FaceEnrollmentCompleted), global::Anki.Vector.ExternalInterface.FaceEnrollmentCompleted.Parser, new[]{ "Result", "FaceId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CancelFaceEnrollmentRequest), global::Anki.Vector.ExternalInterface.CancelFaceEnrollmentRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CancelFaceEnrollmentResponse), global::Anki.Vector.ExternalInterface.CancelFaceEnrollmentResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.RequestEnrolledNamesRequest), global::Anki.Vector.ExternalInterface.RequestEnrolledNamesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.LoadedKnownFace), global::Anki.Vector.ExternalInterface.LoadedKnownFace.Parser, new[]{ "SecondsSinceFirstEnrolled", "SecondsSinceLastUpdated", "SecondsSinceLastSeen", "LastSeenSecondsSinceEpoch", "FaceId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.RobotRenamedEnrolledFace), global::Anki.Vector.ExternalInterface.RobotRenamedEnrolledFace.Parser, new[]{ "FaceId", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.RequestEnrolledNamesResponse), global::Anki.Vector.ExternalInterface.RequestEnrolledNamesResponse.Parser, new[]{ "Status", "Faces" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest), global::Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDRequest.Parser, new[]{ "FaceId", "OldName", "NewName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDResponse), global::Anki.Vector.ExternalInterface.UpdateEnrolledFaceByIDResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDRequest), global::Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDRequest.Parser, new[]{ "FaceId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDResponse), global::Anki.Vector.ExternalInterface.EraseEnrolledFaceByIDResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EraseAllEnrolledFacesRequest), global::Anki.Vector.ExternalInterface.EraseAllEnrolledFacesRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EraseAllEnrolledFacesResponse), global::Anki.Vector.ExternalInterface.EraseAllEnrolledFacesResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetFaceToEnrollRequest), global::Anki.Vector.ExternalInterface.SetFaceToEnrollRequest.Parser, new[]{ "Name", "ObservedId", "SaveId", "SaveToRobot", "SayName", "UseMusic" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetFaceToEnrollResponse), global::Anki.Vector.ExternalInterface.SetFaceToEnrollResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DriveOffChargerRequest), global::Anki.Vector.ExternalInterface.DriveOffChargerRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DriveOffChargerResponse), global::Anki.Vector.ExternalInterface.DriveOffChargerResponse.Parser, new[]{ "Status", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DriveOnChargerRequest), global::Anki.Vector.ExternalInterface.DriveOnChargerRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DriveOnChargerResponse), global::Anki.Vector.ExternalInterface.DriveOnChargerResponse.Parser, new[]{ "Status", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.WakeWordBegin), global::Anki.Vector.ExternalInterface.WakeWordBegin.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.WakeWordEnd), global::Anki.Vector.ExternalInterface.WakeWordEnd.Parser, new[]{ "IntentHeard", "IntentJson" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PhotoInfo), global::Anki.Vector.ExternalInterface.PhotoInfo.Parser, new[]{ "PhotoId", "TimestampUtc", "PhotoCopiedToApp", "ThumbCopiedToApp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PhotosInfoRequest), global::Anki.Vector.ExternalInterface.PhotosInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PhotosInfoResponse), global::Anki.Vector.ExternalInterface.PhotosInfoResponse.Parser, new[]{ "Status", "PhotoInfos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PhotoRequest), global::Anki.Vector.ExternalInterface.PhotoRequest.Parser, new[]{ "PhotoId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PhotoPathMessage), global::Anki.Vector.ExternalInterface.PhotoPathMessage.Parser, new[]{ "Success", "FullPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PhotoResponse), global::Anki.Vector.ExternalInterface.PhotoResponse.Parser, new[]{ "Status", "Success", "Image" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ThumbnailRequest), global::Anki.Vector.ExternalInterface.ThumbnailRequest.Parser, new[]{ "PhotoId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ThumbnailPathMessage), global::Anki.Vector.ExternalInterface.ThumbnailPathMessage.Parser, new[]{ "Success", "FullPath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ThumbnailResponse), global::Anki.Vector.ExternalInterface.ThumbnailResponse.Parser, new[]{ "Status", "Success", "Image" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DeletePhotoRequest), global::Anki.Vector.ExternalInterface.DeletePhotoRequest.Parser, new[]{ "PhotoId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DeletePhotoResponse), global::Anki.Vector.ExternalInterface.DeletePhotoResponse.Parser, new[]{ "Status", "Success" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PhotoTaken), global::Anki.Vector.ExternalInterface.PhotoTaken.Parser, new[]{ "PhotoId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.PathMotionProfile), global::Anki.Vector.ExternalInterface.PathMotionProfile.Parser, new[]{ "SpeedMmps", "AccelMmps2", "DecelMmps2", "PointTurnSpeedRadPerSec", "PointTurnAccelRadPerSec2", "PointTurnDecelRadPerSec2", "DockSpeedMmps", "DockAccelMmps2", "DockDecelMmps2", "ReverseSpeedMmps", "IsCustom" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ActionResult), global::Anki.Vector.ExternalInterface.ActionResult.Parser, new[]{ "Code" }, null, new[]{ typeof(global::Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.GoToPoseRequest), global::Anki.Vector.ExternalInterface.GoToPoseRequest.Parser, new[]{ "XMm", "YMm", "Rad", "MotionProf", "IdTag", "NumRetries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.GoToPoseResponse), global::Anki.Vector.ExternalInterface.GoToPoseResponse.Parser, new[]{ "Status", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DockWithCubeRequest), global::Anki.Vector.ExternalInterface.DockWithCubeRequest.Parser, new[]{ "ObjectId", "DistanceFromMarkerMm", "ApproachAngleRad", "AlignmentType", "UseApproachAngle", "UsePreDockPose", "MotionProf", "IdTag", "NumRetries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DockWithCubeResponse), global::Anki.Vector.ExternalInterface.DockWithCubeResponse.Parser, new[]{ "Status", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DriveStraightRequest), global::Anki.Vector.ExternalInterface.DriveStraightRequest.Parser, new[]{ "SpeedMmps", "DistMm", "ShouldPlayAnimation", "IdTag", "NumRetries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.DriveStraightResponse), global::Anki.Vector.ExternalInterface.DriveStraightResponse.Parser, new[]{ "Status", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.TurnInPlaceRequest), global::Anki.Vector.ExternalInterface.TurnInPlaceRequest.Parser, new[]{ "AngleRad", "SpeedRadPerSec", "AccelRadPerSec2", "TolRad", "IsAbsolute", "IdTag", "NumRetries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.TurnInPlaceResponse), global::Anki.Vector.ExternalInterface.TurnInPlaceResponse.Parser, new[]{ "Status", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetHeadAngleRequest), global::Anki.Vector.ExternalInterface.SetHeadAngleRequest.Parser, new[]{ "AngleRad", "MaxSpeedRadPerSec", "AccelRadPerSec2", "DurationSec", "IdTag", "NumRetries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetHeadAngleResponse), global::Anki.Vector.ExternalInterface.SetHeadAngleResponse.Parser, new[]{ "Status", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetLiftHeightRequest), global::Anki.Vector.ExternalInterface.SetLiftHeightRequest.Parser, new[]{ "HeightMm", "MaxSpeedRadPerSec", "AccelRadPerSec2", "DurationSec", "IdTag", "NumRetries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetLiftHeightResponse), global::Anki.Vector.ExternalInterface.SetLiftHeightResponse.Parser, new[]{ "Status", "Result" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.NetworkStats), global::Anki.Vector.ExternalInterface.NetworkStats.Parser, new[]{ "GNetStat1NumConnections", "GNetStat2LatencyAvg", "GNetStat3LatencySd", "GNetStat4LatencyMin", "GNetStat5LatencyMax", "GNetStat6PingArrivedPc", "GNetStat7ExtQueuedAvgMs", "GNetStat8ExtQueuedMinMs", "GNetStat9ExtQueuedMaxMs", "GNetStataQueuedAvgMs", "GNetStatbQueuedMinMs", "GNetStatcQueuedMaxMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.BatteryStateRequest), global::Anki.Vector.ExternalInterface.BatteryStateRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.BatteryStateResponse), global::Anki.Vector.ExternalInterface.BatteryStateResponse.Parser, new[]{ "Status", "BatteryLevel", "BatteryVolts", "IsCharging", "IsOnChargerPlatform", "SuggestedChargerSec", "CubeBattery" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CubeBattery), global::Anki.Vector.ExternalInterface.CubeBattery.Parser, new[]{ "Level", "FactoryId", "BatteryVolts", "TimeSinceLastReadingSec" }, null, new[]{ typeof(global::Anki.Vector.ExternalInterface.CubeBattery.Types.CubeBatteryLevel) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.VersionStateRequest), global::Anki.Vector.ExternalInterface.VersionStateRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.VersionStateResponse), global::Anki.Vector.ExternalInterface.VersionStateResponse.Parser, new[]{ "Status", "OsVersion", "EngineBuildId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.NetworkStateRequest), global::Anki.Vector.ExternalInterface.NetworkStateRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.NetworkStateResponse), global::Anki.Vector.ExternalInterface.NetworkStateResponse.Parser, new[]{ "Status", "NetworkStats" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SayTextRequest), global::Anki.Vector.ExternalInterface.SayTextRequest.Parser, new[]{ "Text", "UseVectorVoice", "DurationScalar" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SayTextResponse), global::Anki.Vector.ExternalInterface.SayTextResponse.Parser, new[]{ "Status", "State" }, null, new[]{ typeof(global::Anki.Vector.ExternalInterface.SayTextResponse.Types.UtteranceState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.StimulationInfo), global::Anki.Vector.ExternalInterface.StimulationInfo.Parser, new[]{ "EmotionEvents", "Value", "Velocity", "Accel", "ValueBeforeEvent", "MinValue", "MaxValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AudioSendModeRequest), global::Anki.Vector.ExternalInterface.AudioSendModeRequest.Parser, new[]{ "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AudioSendModeChanged), global::Anki.Vector.ExternalInterface.AudioSendModeChanged.Parser, new[]{ "Mode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AudioChunk), global::Anki.Vector.ExternalInterface.AudioChunk.Parser, new[]{ "RobotTimeStamp", "GroupId", "ChunkId", "AudioChunkCount", "SignalPower", "DirectionStrengths", "SourceDirection", "SourceConfidence", "NoiseFloorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AudioFeedRequest), global::Anki.Vector.ExternalInterface.AudioFeedRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.AudioFeedResponse), global::Anki.Vector.ExternalInterface.AudioFeedResponse.Parser, new[]{ "RobotTimeStamp", "GroupId", "SignalPower", "DirectionStrengths", "SourceDirection", "SourceConfidence", "NoiseFloorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableMarkerDetectionRequest), global::Anki.Vector.ExternalInterface.EnableMarkerDetectionRequest.Parser, new[]{ "Enable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableMarkerDetectionResponse), global::Anki.Vector.ExternalInterface.EnableMarkerDetectionResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableFaceDetectionRequest), global::Anki.Vector.ExternalInterface.EnableFaceDetectionRequest.Parser, new[]{ "Enable", "EnableSmileDetection", "EnableExpressionEstimation", "EnableBlinkDetection", "EnableGazeDetection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableFaceDetectionResponse), global::Anki.Vector.ExternalInterface.EnableFaceDetectionResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableMotionDetectionRequest), global::Anki.Vector.ExternalInterface.EnableMotionDetectionRequest.Parser, new[]{ "Enable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableMotionDetectionResponse), global::Anki.Vector.ExternalInterface.EnableMotionDetectionResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableMirrorModeRequest), global::Anki.Vector.ExternalInterface.EnableMirrorModeRequest.Parser, new[]{ "Enable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableMirrorModeResponse), global::Anki.Vector.ExternalInterface.EnableMirrorModeResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.MirrorModeDisabled), global::Anki.Vector.ExternalInterface.MirrorModeDisabled.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableImageStreamingRequest), global::Anki.Vector.ExternalInterface.EnableImageStreamingRequest.Parser, new[]{ "Enable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.EnableImageStreamingResponse), global::Anki.Vector.ExternalInterface.EnableImageStreamingResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.VisionModesAutoDisabled), global::Anki.Vector.ExternalInterface.VisionModesAutoDisabled.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.ImageChunk), global::Anki.Vector.ExternalInterface.ImageChunk.Parser, new[]{ "FrameTimeStamp", "ImageId", "Width", "Height", "ImageEncoding", "DisplayIndex", "ImageChunkCount", "ChunkId", "Data" }, null, new[]{ typeof(global::Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CameraFeedRequest), global::Anki.Vector.ExternalInterface.CameraFeedRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.CameraFeedResponse), global::Anki.Vector.ExternalInterface.CameraFeedResponse.Parser, new[]{ "FrameTimeStamp", "ImageId", "ImageEncoding", "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetEyeColorRequest), global::Anki.Vector.ExternalInterface.SetEyeColorRequest.Parser, new[]{ "Hue", "Saturation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SetEyeColorResponse), global::Anki.Vector.ExternalInterface.SetEyeColorResponse.Parser, new[]{ "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SDKInitializationRequest), global::Anki.Vector.ExternalInterface.SDKInitializationRequest.Parser, new[]{ "SdkModuleVersion", "PythonVersion", "PythonImplementation", "OsVersion", "CpuVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Anki.Vector.ExternalInterface.SDKInitializationResponse), global::Anki.Vector.ExternalInterface.SDKInitializationResponse.Parser, new[]{ "Status" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RobotStatus {
    [pbr::OriginalName("ROBOT_STATUS_NONE")] None = 0,
    [pbr::OriginalName("ROBOT_STATUS_IS_MOVING")] IsMoving = 1,
    [pbr::OriginalName("ROBOT_STATUS_IS_CARRYING_BLOCK")] IsCarryingBlock = 2,
    [pbr::OriginalName("ROBOT_STATUS_IS_PICKING_OR_PLACING")] IsPickingOrPlacing = 4,
    [pbr::OriginalName("ROBOT_STATUS_IS_PICKED_UP")] IsPickedUp = 8,
    [pbr::OriginalName("ROBOT_STATUS_IS_BUTTON_PRESSED")] IsButtonPressed = 16,
    [pbr::OriginalName("ROBOT_STATUS_IS_FALLING")] IsFalling = 32,
    [pbr::OriginalName("ROBOT_STATUS_IS_ANIMATING")] IsAnimating = 64,
    [pbr::OriginalName("ROBOT_STATUS_IS_PATHING")] IsPathing = 128,
    [pbr::OriginalName("ROBOT_STATUS_LIFT_IN_POS")] LiftInPos = 256,
    [pbr::OriginalName("ROBOT_STATUS_HEAD_IN_POS")] HeadInPos = 512,
    [pbr::OriginalName("ROBOT_STATUS_CALM_POWER_MODE")] CalmPowerMode = 1024,
    [pbr::OriginalName("ROBOT_STATUS_IS_ON_CHARGER")] IsOnCharger = 4096,
    [pbr::OriginalName("ROBOT_STATUS_IS_CHARGING")] IsCharging = 8192,
    [pbr::OriginalName("ROBOT_STATUS_CLIFF_DETECTED")] CliffDetected = 16384,
    [pbr::OriginalName("ROBOT_STATUS_ARE_WHEELS_MOVING")] AreWheelsMoving = 32768,
    [pbr::OriginalName("ROBOT_STATUS_IS_BEING_HELD")] IsBeingHeld = 65536,
    [pbr::OriginalName("ROBOT_STATUS_IS_MOTION_DETECTED")] IsMotionDetected = 131072,
  }

  /// <summary>
  /// This is an int8 on the clad side.
  /// Proto field names are prefixed with "EXPRESSION_"
  /// </summary>
  public enum FacialExpression {
    /// <summary>
    /// e.g. expression estimation disabled.
    /// </summary>
    [pbr::OriginalName("EXPRESSION_UNKNOWN")] ExpressionUnknown = 0,
    [pbr::OriginalName("EXPRESSION_NEUTRAL")] ExpressionNeutral = 1,
    [pbr::OriginalName("EXPRESSION_HAPPINESS")] ExpressionHappiness = 2,
    [pbr::OriginalName("EXPRESSION_SURPRISE")] ExpressionSurprise = 3,
    [pbr::OriginalName("EXPRESSION_ANGER")] ExpressionAnger = 4,
    [pbr::OriginalName("EXPRESSION_SADNESS")] ExpressionSadness = 5,
    /// <summary>
    /// Clad does not account for "Unknown" in the count.
    /// </summary>
    [pbr::OriginalName("EXPRESSION_COUNT", PreferredAlias = false)] ExpressionCount = 5,
  }

  public enum FaceEnrollmentResult {
    [pbr::OriginalName("SUCCESS")] Success = 0,
    /// <summary>
    /// Failures:
    /// </summary>
    [pbr::OriginalName("SAW_WRONG_FACE")] SawWrongFace = 1,
    [pbr::OriginalName("SAW_MULTIPLE_FACES")] SawMultipleFaces = 2,
    [pbr::OriginalName("TIMED_OUT")] TimedOut = 3,
    [pbr::OriginalName("SAVE_FAILED")] SaveFailed = 4,
    [pbr::OriginalName("INCOMPLETE")] Incomplete = 5,
    [pbr::OriginalName("CANCELLED")] Cancelled = 6,
    [pbr::OriginalName("NAME_IN_USE")] NameInUse = 7,
    [pbr::OriginalName("NAMED_STORAGE_FULL")] NamedStorageFull = 8,
    [pbr::OriginalName("UNKNOWN_FAILURE")] UnknownFailure = 9,
  }

  public enum BehaviorResults {
    [pbr::OriginalName("BEHAVIOR_INVALID_STATE")] BehaviorInvalidState = 0,
    [pbr::OriginalName("BEHAVIOR_COMPLETE_STATE")] BehaviorCompleteState = 1,
    [pbr::OriginalName("BEHAVIOR_WONT_ACTIVATE_STATE")] BehaviorWontActivateState = 2,
  }

  public enum ActionTagConstants {
    [pbr::OriginalName("INVALID_SDK_TAG")] InvalidSdkTag = 0,
    [pbr::OriginalName("FIRST_SDK_TAG")] FirstSdkTag = 2000001,
    [pbr::OriginalName("LAST_SDK_TAG")] LastSdkTag = 3000000,
  }

  /// <summary>
  /// This is a uint8 in CLAD
  /// </summary>
  public enum AlignmentType {
    [pbr::OriginalName("ALIGNMENT_TYPE_UNKNOWN")] Unknown = 0,
    /// <summary>
    /// Fingers aligned with object
    /// </summary>
    [pbr::OriginalName("ALIGNMENT_TYPE_LIFT_FINGER")] LiftFinger = 1,
    /// <summary>
    /// Lift plate aligned with object
    /// </summary>
    [pbr::OriginalName("ALIGNMENT_TYPE_LIFT_PLATE")] LiftPlate = 2,
    /// <summary>
    /// Front of body aligned with object
    /// </summary>
    [pbr::OriginalName("ALIGNMENT_TYPE_BODY")] Body = 3,
    [pbr::OriginalName("ALIGNMENT_TYPE_CUSTOM")] Custom = 4,
  }

  public enum BatteryLevel {
    [pbr::OriginalName("BATTERY_LEVEL_UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("BATTERY_LEVEL_LOW")] Low = 1,
    [pbr::OriginalName("BATTERY_LEVEL_NOMINAL")] Nominal = 2,
    [pbr::OriginalName("BATTERY_LEVEL_FULL")] Full = 3,
  }

  /// <summary>
  /// Constants associated with the audio feed
  /// </summary>
  public enum AudioConstants {
    /// <summary>
    /// error value
    /// </summary>
    [pbr::OriginalName("AUDIO_CONSTANTS_NULL")] Null = 0,
    /// <summary>
    /// The number of audio directions the four microphones can isolate
    /// </summary>
    [pbr::OriginalName("MIC_DETECTION_DIRECTIONS")] MicDetectionDirections = 12,
    /// <summary>
    /// The number of audio samples in each internal audio chunk
    /// </summary>
    [pbr::OriginalName("SAMPLE_COUNTS_PER_ENGINE_MESSAGE")] SampleCountsPerEngineMessage = 160,
    /// <summary>
    /// The number of audio samples delivered in each audio feed response
    /// </summary>
    [pbr::OriginalName("SAMPLE_COUNTS_PER_SDK_MESSAGE")] SampleCountsPerSdkMessage = 1600,
    /// <summary>
    /// The sampling rate victor's microphones record at
    /// </summary>
    [pbr::OriginalName("MICROPHONE_SAMPLE_RATE")] MicrophoneSampleRate = 15625,
    /// <summary>
    /// The sampling rate the robot processes audio at
    /// </summary>
    [pbr::OriginalName("PROCESSED_SAMPLE_RATE")] ProcessedSampleRate = 16000,
  }

  /// <summary>
  /// The robot can process audio in a variety of ways
  /// </summary>
  public enum AudioProcessingMode {
    /// <summary>
    /// error value
    /// </summary>
    [pbr::OriginalName("AUDIO_UNKNOWN")] AudioUnknown = 0,
    /// <summary>
    /// deactivates audio SDK mode
    /// </summary>
    [pbr::OriginalName("AUDIO_OFF")] AudioOff = 1,
    /// <summary>
    /// unprocessed single microphone data - most performant on robot
    /// </summary>
    [pbr::OriginalName("AUDIO_FAST_MODE")] AudioFastMode = 2,
    /// <summary>
    /// beamforming support for focusing on specific direction - sounds cleanest
    /// </summary>
    [pbr::OriginalName("AUDIO_DIRECTIONAL_MODE")] AudioDirectionalMode = 3,
    /// <summary>
    /// multi-microphone non-beamforming - best for voice detection programs
    /// </summary>
    [pbr::OriginalName("AUDIO_VOICE_DETECT_MODE")] AudioVoiceDetectMode = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// A null message used by streams to verify that the client is
  /// still connected.
  /// </summary>
  public sealed partial class KeepAlivePing : pb::IMessage<KeepAlivePing> {
    private static readonly pb::MessageParser<KeepAlivePing> _parser = new pb::MessageParser<KeepAlivePing>(() => new KeepAlivePing());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepAlivePing> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAlivePing() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAlivePing(KeepAlivePing other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeepAlivePing Clone() {
      return new KeepAlivePing(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeepAlivePing);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeepAlivePing other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeepAlivePing other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Animation : pb::IMessage<Animation> {
    private static readonly pb::MessageParser<Animation> _parser = new pb::MessageParser<Animation>(() => new Animation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Animation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation(Animation other) : this() {
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Animation Clone() {
      return new Animation(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Animation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Animation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Animation other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DriveWheelsRequest : pb::IMessage<DriveWheelsRequest> {
    private static readonly pb::MessageParser<DriveWheelsRequest> _parser = new pb::MessageParser<DriveWheelsRequest>(() => new DriveWheelsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriveWheelsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveWheelsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveWheelsRequest(DriveWheelsRequest other) : this() {
      leftWheelMmps_ = other.leftWheelMmps_;
      rightWheelMmps_ = other.rightWheelMmps_;
      leftWheelMmps2_ = other.leftWheelMmps2_;
      rightWheelMmps2_ = other.rightWheelMmps2_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveWheelsRequest Clone() {
      return new DriveWheelsRequest(this);
    }

    /// <summary>Field number for the "left_wheel_mmps" field.</summary>
    public const int LeftWheelMmpsFieldNumber = 1;
    private float leftWheelMmps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftWheelMmps {
      get { return leftWheelMmps_; }
      set {
        leftWheelMmps_ = value;
      }
    }

    /// <summary>Field number for the "right_wheel_mmps" field.</summary>
    public const int RightWheelMmpsFieldNumber = 2;
    private float rightWheelMmps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightWheelMmps {
      get { return rightWheelMmps_; }
      set {
        rightWheelMmps_ = value;
      }
    }

    /// <summary>Field number for the "left_wheel_mmps2" field.</summary>
    public const int LeftWheelMmps2FieldNumber = 3;
    private float leftWheelMmps2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftWheelMmps2 {
      get { return leftWheelMmps2_; }
      set {
        leftWheelMmps2_ = value;
      }
    }

    /// <summary>Field number for the "right_wheel_mmps2" field.</summary>
    public const int RightWheelMmps2FieldNumber = 4;
    private float rightWheelMmps2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightWheelMmps2 {
      get { return rightWheelMmps2_; }
      set {
        rightWheelMmps2_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriveWheelsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriveWheelsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftWheelMmps, other.LeftWheelMmps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightWheelMmps, other.RightWheelMmps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftWheelMmps2, other.LeftWheelMmps2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightWheelMmps2, other.RightWheelMmps2)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftWheelMmps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftWheelMmps);
      if (RightWheelMmps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightWheelMmps);
      if (LeftWheelMmps2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftWheelMmps2);
      if (RightWheelMmps2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightWheelMmps2);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftWheelMmps != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(LeftWheelMmps);
      }
      if (RightWheelMmps != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RightWheelMmps);
      }
      if (LeftWheelMmps2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LeftWheelMmps2);
      }
      if (RightWheelMmps2 != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(RightWheelMmps2);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftWheelMmps != 0F) {
        size += 1 + 4;
      }
      if (RightWheelMmps != 0F) {
        size += 1 + 4;
      }
      if (LeftWheelMmps2 != 0F) {
        size += 1 + 4;
      }
      if (RightWheelMmps2 != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriveWheelsRequest other) {
      if (other == null) {
        return;
      }
      if (other.LeftWheelMmps != 0F) {
        LeftWheelMmps = other.LeftWheelMmps;
      }
      if (other.RightWheelMmps != 0F) {
        RightWheelMmps = other.RightWheelMmps;
      }
      if (other.LeftWheelMmps2 != 0F) {
        LeftWheelMmps2 = other.LeftWheelMmps2;
      }
      if (other.RightWheelMmps2 != 0F) {
        RightWheelMmps2 = other.RightWheelMmps2;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            LeftWheelMmps = input.ReadFloat();
            break;
          }
          case 21: {
            RightWheelMmps = input.ReadFloat();
            break;
          }
          case 29: {
            LeftWheelMmps2 = input.ReadFloat();
            break;
          }
          case 37: {
            RightWheelMmps2 = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DriveWheelsResponse : pb::IMessage<DriveWheelsResponse> {
    private static readonly pb::MessageParser<DriveWheelsResponse> _parser = new pb::MessageParser<DriveWheelsResponse>(() => new DriveWheelsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriveWheelsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveWheelsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveWheelsResponse(DriveWheelsResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveWheelsResponse Clone() {
      return new DriveWheelsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriveWheelsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriveWheelsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriveWheelsResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveHeadRequest : pb::IMessage<MoveHeadRequest> {
    private static readonly pb::MessageParser<MoveHeadRequest> _parser = new pb::MessageParser<MoveHeadRequest>(() => new MoveHeadRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveHeadRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveHeadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveHeadRequest(MoveHeadRequest other) : this() {
      speedRadPerSec_ = other.speedRadPerSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveHeadRequest Clone() {
      return new MoveHeadRequest(this);
    }

    /// <summary>Field number for the "speed_rad_per_sec" field.</summary>
    public const int SpeedRadPerSecFieldNumber = 1;
    private float speedRadPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedRadPerSec {
      get { return speedRadPerSec_; }
      set {
        speedRadPerSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveHeadRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveHeadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRadPerSec, other.SpeedRadPerSec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeedRadPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRadPerSec);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeedRadPerSec != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SpeedRadPerSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeedRadPerSec != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveHeadRequest other) {
      if (other == null) {
        return;
      }
      if (other.SpeedRadPerSec != 0F) {
        SpeedRadPerSec = other.SpeedRadPerSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SpeedRadPerSec = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveHeadResponse : pb::IMessage<MoveHeadResponse> {
    private static readonly pb::MessageParser<MoveHeadResponse> _parser = new pb::MessageParser<MoveHeadResponse>(() => new MoveHeadResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveHeadResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveHeadResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveHeadResponse(MoveHeadResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveHeadResponse Clone() {
      return new MoveHeadResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveHeadResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveHeadResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveHeadResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveLiftRequest : pb::IMessage<MoveLiftRequest> {
    private static readonly pb::MessageParser<MoveLiftRequest> _parser = new pb::MessageParser<MoveLiftRequest>(() => new MoveLiftRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveLiftRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLiftRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLiftRequest(MoveLiftRequest other) : this() {
      speedRadPerSec_ = other.speedRadPerSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLiftRequest Clone() {
      return new MoveLiftRequest(this);
    }

    /// <summary>Field number for the "speed_rad_per_sec" field.</summary>
    public const int SpeedRadPerSecFieldNumber = 1;
    private float speedRadPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedRadPerSec {
      get { return speedRadPerSec_; }
      set {
        speedRadPerSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveLiftRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveLiftRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRadPerSec, other.SpeedRadPerSec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeedRadPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRadPerSec);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeedRadPerSec != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SpeedRadPerSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeedRadPerSec != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveLiftRequest other) {
      if (other == null) {
        return;
      }
      if (other.SpeedRadPerSec != 0F) {
        SpeedRadPerSec = other.SpeedRadPerSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SpeedRadPerSec = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveLiftResponse : pb::IMessage<MoveLiftResponse> {
    private static readonly pb::MessageParser<MoveLiftResponse> _parser = new pb::MessageParser<MoveLiftResponse>(() => new MoveLiftResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveLiftResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLiftResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLiftResponse(MoveLiftResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveLiftResponse Clone() {
      return new MoveLiftResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveLiftResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveLiftResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveLiftResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayAnimationRequest : pb::IMessage<PlayAnimationRequest> {
    private static readonly pb::MessageParser<PlayAnimationRequest> _parser = new pb::MessageParser<PlayAnimationRequest>(() => new PlayAnimationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayAnimationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAnimationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAnimationRequest(PlayAnimationRequest other) : this() {
      animation_ = other.animation_ != null ? other.animation_.Clone() : null;
      loops_ = other.loops_;
      ignoreBodyTrack_ = other.ignoreBodyTrack_;
      ignoreHeadTrack_ = other.ignoreHeadTrack_;
      ignoreLiftTrack_ = other.ignoreLiftTrack_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAnimationRequest Clone() {
      return new PlayAnimationRequest(this);
    }

    /// <summary>Field number for the "animation" field.</summary>
    public const int AnimationFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.Animation animation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.Animation Animation {
      get { return animation_; }
      set {
        animation_ = value;
      }
    }

    /// <summary>Field number for the "loops" field.</summary>
    public const int LoopsFieldNumber = 2;
    private uint loops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Loops {
      get { return loops_; }
      set {
        loops_ = value;
      }
    }

    /// <summary>Field number for the "ignore_body_track" field.</summary>
    public const int IgnoreBodyTrackFieldNumber = 3;
    private bool ignoreBodyTrack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreBodyTrack {
      get { return ignoreBodyTrack_; }
      set {
        ignoreBodyTrack_ = value;
      }
    }

    /// <summary>Field number for the "ignore_head_track" field.</summary>
    public const int IgnoreHeadTrackFieldNumber = 4;
    private bool ignoreHeadTrack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreHeadTrack {
      get { return ignoreHeadTrack_; }
      set {
        ignoreHeadTrack_ = value;
      }
    }

    /// <summary>Field number for the "ignore_lift_track" field.</summary>
    public const int IgnoreLiftTrackFieldNumber = 5;
    private bool ignoreLiftTrack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreLiftTrack {
      get { return ignoreLiftTrack_; }
      set {
        ignoreLiftTrack_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayAnimationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayAnimationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Animation, other.Animation)) return false;
      if (Loops != other.Loops) return false;
      if (IgnoreBodyTrack != other.IgnoreBodyTrack) return false;
      if (IgnoreHeadTrack != other.IgnoreHeadTrack) return false;
      if (IgnoreLiftTrack != other.IgnoreLiftTrack) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (animation_ != null) hash ^= Animation.GetHashCode();
      if (Loops != 0) hash ^= Loops.GetHashCode();
      if (IgnoreBodyTrack != false) hash ^= IgnoreBodyTrack.GetHashCode();
      if (IgnoreHeadTrack != false) hash ^= IgnoreHeadTrack.GetHashCode();
      if (IgnoreLiftTrack != false) hash ^= IgnoreLiftTrack.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (animation_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Animation);
      }
      if (Loops != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Loops);
      }
      if (IgnoreBodyTrack != false) {
        output.WriteRawTag(24);
        output.WriteBool(IgnoreBodyTrack);
      }
      if (IgnoreHeadTrack != false) {
        output.WriteRawTag(32);
        output.WriteBool(IgnoreHeadTrack);
      }
      if (IgnoreLiftTrack != false) {
        output.WriteRawTag(40);
        output.WriteBool(IgnoreLiftTrack);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (animation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Animation);
      }
      if (Loops != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Loops);
      }
      if (IgnoreBodyTrack != false) {
        size += 1 + 1;
      }
      if (IgnoreHeadTrack != false) {
        size += 1 + 1;
      }
      if (IgnoreLiftTrack != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayAnimationRequest other) {
      if (other == null) {
        return;
      }
      if (other.animation_ != null) {
        if (animation_ == null) {
          Animation = new global::Anki.Vector.ExternalInterface.Animation();
        }
        Animation.MergeFrom(other.Animation);
      }
      if (other.Loops != 0) {
        Loops = other.Loops;
      }
      if (other.IgnoreBodyTrack != false) {
        IgnoreBodyTrack = other.IgnoreBodyTrack;
      }
      if (other.IgnoreHeadTrack != false) {
        IgnoreHeadTrack = other.IgnoreHeadTrack;
      }
      if (other.IgnoreLiftTrack != false) {
        IgnoreLiftTrack = other.IgnoreLiftTrack;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (animation_ == null) {
              Animation = new global::Anki.Vector.ExternalInterface.Animation();
            }
            input.ReadMessage(Animation);
            break;
          }
          case 16: {
            Loops = input.ReadUInt32();
            break;
          }
          case 24: {
            IgnoreBodyTrack = input.ReadBool();
            break;
          }
          case 32: {
            IgnoreHeadTrack = input.ReadBool();
            break;
          }
          case 40: {
            IgnoreLiftTrack = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayAnimationResponse : pb::IMessage<PlayAnimationResponse> {
    private static readonly pb::MessageParser<PlayAnimationResponse> _parser = new pb::MessageParser<PlayAnimationResponse>(() => new PlayAnimationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayAnimationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAnimationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAnimationResponse(PlayAnimationResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayAnimationResponse Clone() {
      return new PlayAnimationResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.BehaviorResults result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.BehaviorResults Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayAnimationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayAnimationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayAnimationResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 16: {
            Result = (global::Anki.Vector.ExternalInterface.BehaviorResults) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListAnimationsRequest : pb::IMessage<ListAnimationsRequest> {
    private static readonly pb::MessageParser<ListAnimationsRequest> _parser = new pb::MessageParser<ListAnimationsRequest>(() => new ListAnimationsRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAnimationsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAnimationsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAnimationsRequest(ListAnimationsRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAnimationsRequest Clone() {
      return new ListAnimationsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAnimationsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAnimationsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAnimationsRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ListAnimationsResponse : pb::IMessage<ListAnimationsResponse> {
    private static readonly pb::MessageParser<ListAnimationsResponse> _parser = new pb::MessageParser<ListAnimationsResponse>(() => new ListAnimationsResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAnimationsResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAnimationsResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAnimationsResponse(ListAnimationsResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      animationNames_ = other.animationNames_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAnimationsResponse Clone() {
      return new ListAnimationsResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "animation_names" field.</summary>
    public const int AnimationNamesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.Animation> _repeated_animationNames_codec
        = pb::FieldCodec.ForMessage(18, global::Anki.Vector.ExternalInterface.Animation.Parser);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.Animation> animationNames_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.Animation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.Animation> AnimationNames {
      get { return animationNames_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAnimationsResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAnimationsResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!animationNames_.Equals(other.animationNames_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= animationNames_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      animationNames_.WriteTo(output, _repeated_animationNames_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += animationNames_.CalculateSize(_repeated_animationNames_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAnimationsResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      animationNames_.Add(other.animationNames_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            animationNames_.AddEntriesFrom(input, _repeated_animationNames_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisplayFaceImageRGBRequest : pb::IMessage<DisplayFaceImageRGBRequest> {
    private static readonly pb::MessageParser<DisplayFaceImageRGBRequest> _parser = new pb::MessageParser<DisplayFaceImageRGBRequest>(() => new DisplayFaceImageRGBRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayFaceImageRGBRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayFaceImageRGBRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayFaceImageRGBRequest(DisplayFaceImageRGBRequest other) : this() {
      faceData_ = other.faceData_;
      durationMs_ = other.durationMs_;
      interruptRunning_ = other.interruptRunning_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayFaceImageRGBRequest Clone() {
      return new DisplayFaceImageRGBRequest(this);
    }

    /// <summary>Field number for the "face_data" field.</summary>
    public const int FaceDataFieldNumber = 1;
    private pb::ByteString faceData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FaceData {
      get { return faceData_; }
      set {
        faceData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration_ms" field.</summary>
    public const int DurationMsFieldNumber = 2;
    private uint durationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DurationMs {
      get { return durationMs_; }
      set {
        durationMs_ = value;
      }
    }

    /// <summary>Field number for the "interrupt_running" field.</summary>
    public const int InterruptRunningFieldNumber = 3;
    private bool interruptRunning_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool InterruptRunning {
      get { return interruptRunning_; }
      set {
        interruptRunning_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayFaceImageRGBRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayFaceImageRGBRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FaceData != other.FaceData) return false;
      if (DurationMs != other.DurationMs) return false;
      if (InterruptRunning != other.InterruptRunning) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FaceData.Length != 0) hash ^= FaceData.GetHashCode();
      if (DurationMs != 0) hash ^= DurationMs.GetHashCode();
      if (InterruptRunning != false) hash ^= InterruptRunning.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaceData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(FaceData);
      }
      if (DurationMs != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(DurationMs);
      }
      if (InterruptRunning != false) {
        output.WriteRawTag(24);
        output.WriteBool(InterruptRunning);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaceData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FaceData);
      }
      if (DurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DurationMs);
      }
      if (InterruptRunning != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayFaceImageRGBRequest other) {
      if (other == null) {
        return;
      }
      if (other.FaceData.Length != 0) {
        FaceData = other.FaceData;
      }
      if (other.DurationMs != 0) {
        DurationMs = other.DurationMs;
      }
      if (other.InterruptRunning != false) {
        InterruptRunning = other.InterruptRunning;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FaceData = input.ReadBytes();
            break;
          }
          case 16: {
            DurationMs = input.ReadUInt32();
            break;
          }
          case 24: {
            InterruptRunning = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DisplayFaceImageRGBResponse : pb::IMessage<DisplayFaceImageRGBResponse> {
    private static readonly pb::MessageParser<DisplayFaceImageRGBResponse> _parser = new pb::MessageParser<DisplayFaceImageRGBResponse>(() => new DisplayFaceImageRGBResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DisplayFaceImageRGBResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayFaceImageRGBResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayFaceImageRGBResponse(DisplayFaceImageRGBResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DisplayFaceImageRGBResponse Clone() {
      return new DisplayFaceImageRGBResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DisplayFaceImageRGBResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DisplayFaceImageRGBResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DisplayFaceImageRGBResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MeetVictorFaceScanStarted : pb::IMessage<MeetVictorFaceScanStarted> {
    private static readonly pb::MessageParser<MeetVictorFaceScanStarted> _parser = new pb::MessageParser<MeetVictorFaceScanStarted>(() => new MeetVictorFaceScanStarted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeetVictorFaceScanStarted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeetVictorFaceScanStarted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeetVictorFaceScanStarted(MeetVictorFaceScanStarted other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeetVictorFaceScanStarted Clone() {
      return new MeetVictorFaceScanStarted(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeetVictorFaceScanStarted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeetVictorFaceScanStarted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeetVictorFaceScanStarted other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class MeetVictorFaceScanComplete : pb::IMessage<MeetVictorFaceScanComplete> {
    private static readonly pb::MessageParser<MeetVictorFaceScanComplete> _parser = new pb::MessageParser<MeetVictorFaceScanComplete>(() => new MeetVictorFaceScanComplete());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MeetVictorFaceScanComplete> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeetVictorFaceScanComplete() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeetVictorFaceScanComplete(MeetVictorFaceScanComplete other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MeetVictorFaceScanComplete Clone() {
      return new MeetVictorFaceScanComplete(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MeetVictorFaceScanComplete);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MeetVictorFaceScanComplete other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MeetVictorFaceScanComplete other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Status : pb::IMessage<Status> {
    private static readonly pb::MessageParser<Status> _parser = new pb::MessageParser<Status>(() => new Status());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Status> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status(Status other) : this() {
      switch (other.StatusTypeCase) {
        case StatusTypeOneofCase.MeetVictorFaceScanStarted:
          MeetVictorFaceScanStarted = other.MeetVictorFaceScanStarted.Clone();
          break;
        case StatusTypeOneofCase.MeetVictorFaceScanComplete:
          MeetVictorFaceScanComplete = other.MeetVictorFaceScanComplete.Clone();
          break;
        case StatusTypeOneofCase.FaceEnrollmentCompleted:
          FaceEnrollmentCompleted = other.FaceEnrollmentCompleted.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Status Clone() {
      return new Status(this);
    }

    /// <summary>Field number for the "meet_victor_face_scan_started" field.</summary>
    public const int MeetVictorFaceScanStartedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.MeetVictorFaceScanStarted MeetVictorFaceScanStarted {
      get { return statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanStarted ? (global::Anki.Vector.ExternalInterface.MeetVictorFaceScanStarted) statusType_ : null; }
      set {
        statusType_ = value;
        statusTypeCase_ = value == null ? StatusTypeOneofCase.None : StatusTypeOneofCase.MeetVictorFaceScanStarted;
      }
    }

    /// <summary>Field number for the "meet_victor_face_scan_complete" field.</summary>
    public const int MeetVictorFaceScanCompleteFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.MeetVictorFaceScanComplete MeetVictorFaceScanComplete {
      get { return statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanComplete ? (global::Anki.Vector.ExternalInterface.MeetVictorFaceScanComplete) statusType_ : null; }
      set {
        statusType_ = value;
        statusTypeCase_ = value == null ? StatusTypeOneofCase.None : StatusTypeOneofCase.MeetVictorFaceScanComplete;
      }
    }

    /// <summary>Field number for the "face_enrollment_completed" field.</summary>
    public const int FaceEnrollmentCompletedFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.FaceEnrollmentCompleted FaceEnrollmentCompleted {
      get { return statusTypeCase_ == StatusTypeOneofCase.FaceEnrollmentCompleted ? (global::Anki.Vector.ExternalInterface.FaceEnrollmentCompleted) statusType_ : null; }
      set {
        statusType_ = value;
        statusTypeCase_ = value == null ? StatusTypeOneofCase.None : StatusTypeOneofCase.FaceEnrollmentCompleted;
      }
    }

    private object statusType_;
    /// <summary>Enum of possible cases for the "status_type" oneof.</summary>
    public enum StatusTypeOneofCase {
      None = 0,
      MeetVictorFaceScanStarted = 2,
      MeetVictorFaceScanComplete = 3,
      FaceEnrollmentCompleted = 4,
    }
    private StatusTypeOneofCase statusTypeCase_ = StatusTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatusTypeOneofCase StatusTypeCase {
      get { return statusTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStatusType() {
      statusTypeCase_ = StatusTypeOneofCase.None;
      statusType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Status);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Status other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MeetVictorFaceScanStarted, other.MeetVictorFaceScanStarted)) return false;
      if (!object.Equals(MeetVictorFaceScanComplete, other.MeetVictorFaceScanComplete)) return false;
      if (!object.Equals(FaceEnrollmentCompleted, other.FaceEnrollmentCompleted)) return false;
      if (StatusTypeCase != other.StatusTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanStarted) hash ^= MeetVictorFaceScanStarted.GetHashCode();
      if (statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanComplete) hash ^= MeetVictorFaceScanComplete.GetHashCode();
      if (statusTypeCase_ == StatusTypeOneofCase.FaceEnrollmentCompleted) hash ^= FaceEnrollmentCompleted.GetHashCode();
      hash ^= (int) statusTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanStarted) {
        output.WriteRawTag(18);
        output.WriteMessage(MeetVictorFaceScanStarted);
      }
      if (statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanComplete) {
        output.WriteRawTag(26);
        output.WriteMessage(MeetVictorFaceScanComplete);
      }
      if (statusTypeCase_ == StatusTypeOneofCase.FaceEnrollmentCompleted) {
        output.WriteRawTag(34);
        output.WriteMessage(FaceEnrollmentCompleted);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanStarted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeetVictorFaceScanStarted);
      }
      if (statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanComplete) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeetVictorFaceScanComplete);
      }
      if (statusTypeCase_ == StatusTypeOneofCase.FaceEnrollmentCompleted) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FaceEnrollmentCompleted);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Status other) {
      if (other == null) {
        return;
      }
      switch (other.StatusTypeCase) {
        case StatusTypeOneofCase.MeetVictorFaceScanStarted:
          if (MeetVictorFaceScanStarted == null) {
            MeetVictorFaceScanStarted = new global::Anki.Vector.ExternalInterface.MeetVictorFaceScanStarted();
          }
          MeetVictorFaceScanStarted.MergeFrom(other.MeetVictorFaceScanStarted);
          break;
        case StatusTypeOneofCase.MeetVictorFaceScanComplete:
          if (MeetVictorFaceScanComplete == null) {
            MeetVictorFaceScanComplete = new global::Anki.Vector.ExternalInterface.MeetVictorFaceScanComplete();
          }
          MeetVictorFaceScanComplete.MergeFrom(other.MeetVictorFaceScanComplete);
          break;
        case StatusTypeOneofCase.FaceEnrollmentCompleted:
          if (FaceEnrollmentCompleted == null) {
            FaceEnrollmentCompleted = new global::Anki.Vector.ExternalInterface.FaceEnrollmentCompleted();
          }
          FaceEnrollmentCompleted.MergeFrom(other.FaceEnrollmentCompleted);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 18: {
            global::Anki.Vector.ExternalInterface.MeetVictorFaceScanStarted subBuilder = new global::Anki.Vector.ExternalInterface.MeetVictorFaceScanStarted();
            if (statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanStarted) {
              subBuilder.MergeFrom(MeetVictorFaceScanStarted);
            }
            input.ReadMessage(subBuilder);
            MeetVictorFaceScanStarted = subBuilder;
            break;
          }
          case 26: {
            global::Anki.Vector.ExternalInterface.MeetVictorFaceScanComplete subBuilder = new global::Anki.Vector.ExternalInterface.MeetVictorFaceScanComplete();
            if (statusTypeCase_ == StatusTypeOneofCase.MeetVictorFaceScanComplete) {
              subBuilder.MergeFrom(MeetVictorFaceScanComplete);
            }
            input.ReadMessage(subBuilder);
            MeetVictorFaceScanComplete = subBuilder;
            break;
          }
          case 34: {
            global::Anki.Vector.ExternalInterface.FaceEnrollmentCompleted subBuilder = new global::Anki.Vector.ExternalInterface.FaceEnrollmentCompleted();
            if (statusTypeCase_ == StatusTypeOneofCase.FaceEnrollmentCompleted) {
              subBuilder.MergeFrom(FaceEnrollmentCompleted);
            }
            input.ReadMessage(subBuilder);
            FaceEnrollmentCompleted = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class WakeWord : pb::IMessage<WakeWord> {
    private static readonly pb::MessageParser<WakeWord> _parser = new pb::MessageParser<WakeWord>(() => new WakeWord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WakeWord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWord(WakeWord other) : this() {
      switch (other.WakeWordTypeCase) {
        case WakeWordTypeOneofCase.WakeWordBegin:
          WakeWordBegin = other.WakeWordBegin.Clone();
          break;
        case WakeWordTypeOneofCase.WakeWordEnd:
          WakeWordEnd = other.WakeWordEnd.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWord Clone() {
      return new WakeWord(this);
    }

    /// <summary>Field number for the "wake_word_begin" field.</summary>
    public const int WakeWordBeginFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.WakeWordBegin WakeWordBegin {
      get { return wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordBegin ? (global::Anki.Vector.ExternalInterface.WakeWordBegin) wakeWordType_ : null; }
      set {
        wakeWordType_ = value;
        wakeWordTypeCase_ = value == null ? WakeWordTypeOneofCase.None : WakeWordTypeOneofCase.WakeWordBegin;
      }
    }

    /// <summary>Field number for the "wake_word_end" field.</summary>
    public const int WakeWordEndFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.WakeWordEnd WakeWordEnd {
      get { return wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordEnd ? (global::Anki.Vector.ExternalInterface.WakeWordEnd) wakeWordType_ : null; }
      set {
        wakeWordType_ = value;
        wakeWordTypeCase_ = value == null ? WakeWordTypeOneofCase.None : WakeWordTypeOneofCase.WakeWordEnd;
      }
    }

    private object wakeWordType_;
    /// <summary>Enum of possible cases for the "wake_word_type" oneof.</summary>
    public enum WakeWordTypeOneofCase {
      None = 0,
      WakeWordBegin = 1,
      WakeWordEnd = 2,
    }
    private WakeWordTypeOneofCase wakeWordTypeCase_ = WakeWordTypeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWordTypeOneofCase WakeWordTypeCase {
      get { return wakeWordTypeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearWakeWordType() {
      wakeWordTypeCase_ = WakeWordTypeOneofCase.None;
      wakeWordType_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WakeWord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WakeWord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(WakeWordBegin, other.WakeWordBegin)) return false;
      if (!object.Equals(WakeWordEnd, other.WakeWordEnd)) return false;
      if (WakeWordTypeCase != other.WakeWordTypeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordBegin) hash ^= WakeWordBegin.GetHashCode();
      if (wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordEnd) hash ^= WakeWordEnd.GetHashCode();
      hash ^= (int) wakeWordTypeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordBegin) {
        output.WriteRawTag(10);
        output.WriteMessage(WakeWordBegin);
      }
      if (wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordEnd) {
        output.WriteRawTag(18);
        output.WriteMessage(WakeWordEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordBegin) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WakeWordBegin);
      }
      if (wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordEnd) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WakeWordEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WakeWord other) {
      if (other == null) {
        return;
      }
      switch (other.WakeWordTypeCase) {
        case WakeWordTypeOneofCase.WakeWordBegin:
          if (WakeWordBegin == null) {
            WakeWordBegin = new global::Anki.Vector.ExternalInterface.WakeWordBegin();
          }
          WakeWordBegin.MergeFrom(other.WakeWordBegin);
          break;
        case WakeWordTypeOneofCase.WakeWordEnd:
          if (WakeWordEnd == null) {
            WakeWordEnd = new global::Anki.Vector.ExternalInterface.WakeWordEnd();
          }
          WakeWordEnd.MergeFrom(other.WakeWordEnd);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Anki.Vector.ExternalInterface.WakeWordBegin subBuilder = new global::Anki.Vector.ExternalInterface.WakeWordBegin();
            if (wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordBegin) {
              subBuilder.MergeFrom(WakeWordBegin);
            }
            input.ReadMessage(subBuilder);
            WakeWordBegin = subBuilder;
            break;
          }
          case 18: {
            global::Anki.Vector.ExternalInterface.WakeWordEnd subBuilder = new global::Anki.Vector.ExternalInterface.WakeWordEnd();
            if (wakeWordTypeCase_ == WakeWordTypeOneofCase.WakeWordEnd) {
              subBuilder.MergeFrom(WakeWordEnd);
            }
            input.ReadMessage(subBuilder);
            WakeWordEnd = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class TimeStampedStatus : pb::IMessage<TimeStampedStatus> {
    private static readonly pb::MessageParser<TimeStampedStatus> _parser = new pb::MessageParser<TimeStampedStatus>(() => new TimeStampedStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeStampedStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeStampedStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeStampedStatus(TimeStampedStatus other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      timestampUtc_ = other.timestampUtc_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeStampedStatus Clone() {
      return new TimeStampedStatus(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.Status status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_utc" field.</summary>
    public const int TimestampUtcFieldNumber = 2;
    private uint timestampUtc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimestampUtc {
      get { return timestampUtc_; }
      set {
        timestampUtc_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeStampedStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeStampedStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (TimestampUtc != other.TimestampUtc) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (TimestampUtc != 0) hash ^= TimestampUtc.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (TimestampUtc != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimestampUtc);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (TimestampUtc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimestampUtc);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeStampedStatus other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.Status();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.TimestampUtc != 0) {
        TimestampUtc = other.TimestampUtc;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.Status();
            }
            input.ReadMessage(Status);
            break;
          }
          case 16: {
            TimestampUtc = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoseStruct : pb::IMessage<PoseStruct> {
    private static readonly pb::MessageParser<PoseStruct> _parser = new pb::MessageParser<PoseStruct>(() => new PoseStruct());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoseStruct> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoseStruct() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoseStruct(PoseStruct other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      q0_ = other.q0_;
      q1_ = other.q1_;
      q2_ = other.q2_;
      q3_ = other.q3_;
      originId_ = other.originId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoseStruct Clone() {
      return new PoseStruct(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    /// <summary>
    /// Translation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "q0" field.</summary>
    public const int Q0FieldNumber = 4;
    private float q0_;
    /// <summary>
    /// Rotation quaternion
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Q0 {
      get { return q0_; }
      set {
        q0_ = value;
      }
    }

    /// <summary>Field number for the "q1" field.</summary>
    public const int Q1FieldNumber = 5;
    private float q1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Q1 {
      get { return q1_; }
      set {
        q1_ = value;
      }
    }

    /// <summary>Field number for the "q2" field.</summary>
    public const int Q2FieldNumber = 6;
    private float q2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Q2 {
      get { return q2_; }
      set {
        q2_ = value;
      }
    }

    /// <summary>Field number for the "q3" field.</summary>
    public const int Q3FieldNumber = 7;
    private float q3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Q3 {
      get { return q3_; }
      set {
        q3_ = value;
      }
    }

    /// <summary>Field number for the "origin_id" field.</summary>
    public const int OriginIdFieldNumber = 8;
    private uint originId_;
    /// <summary>
    /// Which coordinate frame this pose is in (0 for none or unknown)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OriginId {
      get { return originId_; }
      set {
        originId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoseStruct);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoseStruct other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Q0, other.Q0)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Q1, other.Q1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Q2, other.Q2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Q3, other.Q3)) return false;
      if (OriginId != other.OriginId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (Q0 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Q0);
      if (Q1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Q1);
      if (Q2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Q2);
      if (Q3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Q3);
      if (OriginId != 0) hash ^= OriginId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (Q0 != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Q0);
      }
      if (Q1 != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Q1);
      }
      if (Q2 != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Q2);
      }
      if (Q3 != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(Q3);
      }
      if (OriginId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(OriginId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (Q0 != 0F) {
        size += 1 + 4;
      }
      if (Q1 != 0F) {
        size += 1 + 4;
      }
      if (Q2 != 0F) {
        size += 1 + 4;
      }
      if (Q3 != 0F) {
        size += 1 + 4;
      }
      if (OriginId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OriginId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoseStruct other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      if (other.Q0 != 0F) {
        Q0 = other.Q0;
      }
      if (other.Q1 != 0F) {
        Q1 = other.Q1;
      }
      if (other.Q2 != 0F) {
        Q2 = other.Q2;
      }
      if (other.Q3 != 0F) {
        Q3 = other.Q3;
      }
      if (other.OriginId != 0) {
        OriginId = other.OriginId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
          case 37: {
            Q0 = input.ReadFloat();
            break;
          }
          case 45: {
            Q1 = input.ReadFloat();
            break;
          }
          case 53: {
            Q2 = input.ReadFloat();
            break;
          }
          case 61: {
            Q3 = input.ReadFloat();
            break;
          }
          case 64: {
            OriginId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AccelData : pb::IMessage<AccelData> {
    private static readonly pb::MessageParser<AccelData> _parser = new pb::MessageParser<AccelData>(() => new AccelData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccelData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccelData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccelData(AccelData other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccelData Clone() {
      return new AccelData(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    /// <summary>
    /// mm/s^2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccelData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccelData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccelData other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GyroData : pb::IMessage<GyroData> {
    private static readonly pb::MessageParser<GyroData> _parser = new pb::MessageParser<GyroData>(() => new GyroData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GyroData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GyroData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GyroData(GyroData other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GyroData Clone() {
      return new GyroData(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    /// <summary>
    /// rad/s
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GyroData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GyroData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GyroData other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProxData : pb::IMessage<ProxData> {
    private static readonly pb::MessageParser<ProxData> _parser = new pb::MessageParser<ProxData>(() => new ProxData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProxData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProxData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProxData(ProxData other) : this() {
      distanceMm_ = other.distanceMm_;
      signalQuality_ = other.signalQuality_;
      isInValidRange_ = other.isInValidRange_;
      isValidSignalQuality_ = other.isValidSignalQuality_;
      isLiftInFov_ = other.isLiftInFov_;
      isTooPitched_ = other.isTooPitched_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProxData Clone() {
      return new ProxData(this);
    }

    /// <summary>Field number for the "distance_mm" field.</summary>
    public const int DistanceMmFieldNumber = 1;
    private uint distanceMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DistanceMm {
      get { return distanceMm_; }
      set {
        distanceMm_ = value;
      }
    }

    /// <summary>Field number for the "signal_quality" field.</summary>
    public const int SignalQualityFieldNumber = 2;
    private float signalQuality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SignalQuality {
      get { return signalQuality_; }
      set {
        signalQuality_ = value;
      }
    }

    /// <summary>Field number for the "is_in_valid_range" field.</summary>
    public const int IsInValidRangeFieldNumber = 3;
    private bool isInValidRange_;
    /// <summary>
    /// Distance is within valid range
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInValidRange {
      get { return isInValidRange_; }
      set {
        isInValidRange_ = value;
      }
    }

    /// <summary>Field number for the "is_valid_signal_quality" field.</summary>
    public const int IsValidSignalQualityFieldNumber = 4;
    private bool isValidSignalQuality_;
    /// <summary>
    /// Signal quality is sufficiently strong to trust that something was detected
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsValidSignalQuality {
      get { return isValidSignalQuality_; }
      set {
        isValidSignalQuality_ = value;
      }
    }

    /// <summary>Field number for the "is_lift_in_fov" field.</summary>
    public const int IsLiftInFovFieldNumber = 5;
    private bool isLiftInFov_;
    /// <summary>
    /// Lift (or object on lift) is occluding the sensor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLiftInFov {
      get { return isLiftInFov_; }
      set {
        isLiftInFov_ = value;
      }
    }

    /// <summary>Field number for the "is_too_pitched" field.</summary>
    public const int IsTooPitchedFieldNumber = 6;
    private bool isTooPitched_;
    /// <summary>
    /// Robot is too far pitched up or down
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTooPitched {
      get { return isTooPitched_; }
      set {
        isTooPitched_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProxData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProxData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DistanceMm != other.DistanceMm) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SignalQuality, other.SignalQuality)) return false;
      if (IsInValidRange != other.IsInValidRange) return false;
      if (IsValidSignalQuality != other.IsValidSignalQuality) return false;
      if (IsLiftInFov != other.IsLiftInFov) return false;
      if (IsTooPitched != other.IsTooPitched) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DistanceMm != 0) hash ^= DistanceMm.GetHashCode();
      if (SignalQuality != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SignalQuality);
      if (IsInValidRange != false) hash ^= IsInValidRange.GetHashCode();
      if (IsValidSignalQuality != false) hash ^= IsValidSignalQuality.GetHashCode();
      if (IsLiftInFov != false) hash ^= IsLiftInFov.GetHashCode();
      if (IsTooPitched != false) hash ^= IsTooPitched.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DistanceMm != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DistanceMm);
      }
      if (SignalQuality != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SignalQuality);
      }
      if (IsInValidRange != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsInValidRange);
      }
      if (IsValidSignalQuality != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsValidSignalQuality);
      }
      if (IsLiftInFov != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsLiftInFov);
      }
      if (IsTooPitched != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsTooPitched);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DistanceMm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DistanceMm);
      }
      if (SignalQuality != 0F) {
        size += 1 + 4;
      }
      if (IsInValidRange != false) {
        size += 1 + 1;
      }
      if (IsValidSignalQuality != false) {
        size += 1 + 1;
      }
      if (IsLiftInFov != false) {
        size += 1 + 1;
      }
      if (IsTooPitched != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProxData other) {
      if (other == null) {
        return;
      }
      if (other.DistanceMm != 0) {
        DistanceMm = other.DistanceMm;
      }
      if (other.SignalQuality != 0F) {
        SignalQuality = other.SignalQuality;
      }
      if (other.IsInValidRange != false) {
        IsInValidRange = other.IsInValidRange;
      }
      if (other.IsValidSignalQuality != false) {
        IsValidSignalQuality = other.IsValidSignalQuality;
      }
      if (other.IsLiftInFov != false) {
        IsLiftInFov = other.IsLiftInFov;
      }
      if (other.IsTooPitched != false) {
        IsTooPitched = other.IsTooPitched;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DistanceMm = input.ReadUInt32();
            break;
          }
          case 21: {
            SignalQuality = input.ReadFloat();
            break;
          }
          case 24: {
            IsInValidRange = input.ReadBool();
            break;
          }
          case 32: {
            IsValidSignalQuality = input.ReadBool();
            break;
          }
          case 40: {
            IsLiftInFov = input.ReadBool();
            break;
          }
          case 48: {
            IsTooPitched = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TouchData : pb::IMessage<TouchData> {
    private static readonly pb::MessageParser<TouchData> _parser = new pb::MessageParser<TouchData>(() => new TouchData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TouchData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TouchData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TouchData(TouchData other) : this() {
      rawTouchValue_ = other.rawTouchValue_;
      isBeingTouched_ = other.isBeingTouched_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TouchData Clone() {
      return new TouchData(this);
    }

    /// <summary>Field number for the "raw_touch_value" field.</summary>
    public const int RawTouchValueFieldNumber = 1;
    private uint rawTouchValue_;
    /// <summary>
    /// Raw input from the touch sensor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RawTouchValue {
      get { return rawTouchValue_; }
      set {
        rawTouchValue_ = value;
      }
    }

    /// <summary>Field number for the "is_being_touched" field.</summary>
    public const int IsBeingTouchedFieldNumber = 2;
    private bool isBeingTouched_;
    /// <summary>
    /// Robot's context aware evaluation of whether it currently is or isn't being touched
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBeingTouched {
      get { return isBeingTouched_; }
      set {
        isBeingTouched_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TouchData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TouchData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RawTouchValue != other.RawTouchValue) return false;
      if (IsBeingTouched != other.IsBeingTouched) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RawTouchValue != 0) hash ^= RawTouchValue.GetHashCode();
      if (IsBeingTouched != false) hash ^= IsBeingTouched.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RawTouchValue != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RawTouchValue);
      }
      if (IsBeingTouched != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsBeingTouched);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RawTouchValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RawTouchValue);
      }
      if (IsBeingTouched != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TouchData other) {
      if (other == null) {
        return;
      }
      if (other.RawTouchValue != 0) {
        RawTouchValue = other.RawTouchValue;
      }
      if (other.IsBeingTouched != false) {
        IsBeingTouched = other.IsBeingTouched;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RawTouchValue = input.ReadUInt32();
            break;
          }
          case 16: {
            IsBeingTouched = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RobotState : pb::IMessage<RobotState> {
    private static readonly pb::MessageParser<RobotState> _parser = new pb::MessageParser<RobotState>(() => new RobotState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotState(RobotState other) : this() {
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      poseAngleRad_ = other.poseAngleRad_;
      posePitchRad_ = other.posePitchRad_;
      leftWheelSpeedMmps_ = other.leftWheelSpeedMmps_;
      rightWheelSpeedMmps_ = other.rightWheelSpeedMmps_;
      headAngleRad_ = other.headAngleRad_;
      liftHeightMm_ = other.liftHeightMm_;
      accel_ = other.accel_ != null ? other.accel_.Clone() : null;
      gyro_ = other.gyro_ != null ? other.gyro_.Clone() : null;
      carryingObjectId_ = other.carryingObjectId_;
      carryingObjectOnTopId_ = other.carryingObjectOnTopId_;
      headTrackingObjectId_ = other.headTrackingObjectId_;
      localizedToObjectId_ = other.localizedToObjectId_;
      lastImageTimeStamp_ = other.lastImageTimeStamp_;
      status_ = other.status_;
      proxData_ = other.proxData_ != null ? other.proxData_.Clone() : null;
      touchData_ = other.touchData_ != null ? other.touchData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotState Clone() {
      return new RobotState(this);
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.PoseStruct pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.PoseStruct Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "pose_angle_rad" field.</summary>
    public const int PoseAngleRadFieldNumber = 2;
    private float poseAngleRad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PoseAngleRad {
      get { return poseAngleRad_; }
      set {
        poseAngleRad_ = value;
      }
    }

    /// <summary>Field number for the "pose_pitch_rad" field.</summary>
    public const int PosePitchRadFieldNumber = 3;
    private float posePitchRad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PosePitchRad {
      get { return posePitchRad_; }
      set {
        posePitchRad_ = value;
      }
    }

    /// <summary>Field number for the "left_wheel_speed_mmps" field.</summary>
    public const int LeftWheelSpeedMmpsFieldNumber = 4;
    private float leftWheelSpeedMmps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LeftWheelSpeedMmps {
      get { return leftWheelSpeedMmps_; }
      set {
        leftWheelSpeedMmps_ = value;
      }
    }

    /// <summary>Field number for the "right_wheel_speed_mmps" field.</summary>
    public const int RightWheelSpeedMmpsFieldNumber = 5;
    private float rightWheelSpeedMmps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RightWheelSpeedMmps {
      get { return rightWheelSpeedMmps_; }
      set {
        rightWheelSpeedMmps_ = value;
      }
    }

    /// <summary>Field number for the "head_angle_rad" field.</summary>
    public const int HeadAngleRadFieldNumber = 6;
    private float headAngleRad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeadAngleRad {
      get { return headAngleRad_; }
      set {
        headAngleRad_ = value;
      }
    }

    /// <summary>Field number for the "lift_height_mm" field.</summary>
    public const int LiftHeightMmFieldNumber = 7;
    private float liftHeightMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LiftHeightMm {
      get { return liftHeightMm_; }
      set {
        liftHeightMm_ = value;
      }
    }

    /// <summary>Field number for the "accel" field.</summary>
    public const int AccelFieldNumber = 8;
    private global::Anki.Vector.ExternalInterface.AccelData accel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.AccelData Accel {
      get { return accel_; }
      set {
        accel_ = value;
      }
    }

    /// <summary>Field number for the "gyro" field.</summary>
    public const int GyroFieldNumber = 9;
    private global::Anki.Vector.ExternalInterface.GyroData gyro_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.GyroData Gyro {
      get { return gyro_; }
      set {
        gyro_ = value;
      }
    }

    /// <summary>Field number for the "carrying_object_id" field.</summary>
    public const int CarryingObjectIdFieldNumber = 10;
    private int carryingObjectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarryingObjectId {
      get { return carryingObjectId_; }
      set {
        carryingObjectId_ = value;
      }
    }

    /// <summary>Field number for the "carrying_object_on_top_id" field.</summary>
    public const int CarryingObjectOnTopIdFieldNumber = 11;
    private int carryingObjectOnTopId_;
    /// <summary>
    /// Not supported by engine
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CarryingObjectOnTopId {
      get { return carryingObjectOnTopId_; }
      set {
        carryingObjectOnTopId_ = value;
      }
    }

    /// <summary>Field number for the "head_tracking_object_id" field.</summary>
    public const int HeadTrackingObjectIdFieldNumber = 12;
    private int headTrackingObjectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HeadTrackingObjectId {
      get { return headTrackingObjectId_; }
      set {
        headTrackingObjectId_ = value;
      }
    }

    /// <summary>Field number for the "localized_to_object_id" field.</summary>
    public const int LocalizedToObjectIdFieldNumber = 13;
    private int localizedToObjectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalizedToObjectId {
      get { return localizedToObjectId_; }
      set {
        localizedToObjectId_ = value;
      }
    }

    /// <summary>Field number for the "last_image_time_stamp" field.</summary>
    public const int LastImageTimeStampFieldNumber = 14;
    private uint lastImageTimeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LastImageTimeStamp {
      get { return lastImageTimeStamp_; }
      set {
        lastImageTimeStamp_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 15;
    private uint status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "prox_data" field.</summary>
    public const int ProxDataFieldNumber = 16;
    private global::Anki.Vector.ExternalInterface.ProxData proxData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ProxData ProxData {
      get { return proxData_; }
      set {
        proxData_ = value;
      }
    }

    /// <summary>Field number for the "touch_data" field.</summary>
    public const int TouchDataFieldNumber = 17;
    private global::Anki.Vector.ExternalInterface.TouchData touchData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.TouchData TouchData {
      get { return touchData_; }
      set {
        touchData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PoseAngleRad, other.PoseAngleRad)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosePitchRad, other.PosePitchRad)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LeftWheelSpeedMmps, other.LeftWheelSpeedMmps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RightWheelSpeedMmps, other.RightWheelSpeedMmps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeadAngleRad, other.HeadAngleRad)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LiftHeightMm, other.LiftHeightMm)) return false;
      if (!object.Equals(Accel, other.Accel)) return false;
      if (!object.Equals(Gyro, other.Gyro)) return false;
      if (CarryingObjectId != other.CarryingObjectId) return false;
      if (CarryingObjectOnTopId != other.CarryingObjectOnTopId) return false;
      if (HeadTrackingObjectId != other.HeadTrackingObjectId) return false;
      if (LocalizedToObjectId != other.LocalizedToObjectId) return false;
      if (LastImageTimeStamp != other.LastImageTimeStamp) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(ProxData, other.ProxData)) return false;
      if (!object.Equals(TouchData, other.TouchData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (PoseAngleRad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PoseAngleRad);
      if (PosePitchRad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosePitchRad);
      if (LeftWheelSpeedMmps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LeftWheelSpeedMmps);
      if (RightWheelSpeedMmps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RightWheelSpeedMmps);
      if (HeadAngleRad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeadAngleRad);
      if (LiftHeightMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LiftHeightMm);
      if (accel_ != null) hash ^= Accel.GetHashCode();
      if (gyro_ != null) hash ^= Gyro.GetHashCode();
      if (CarryingObjectId != 0) hash ^= CarryingObjectId.GetHashCode();
      if (CarryingObjectOnTopId != 0) hash ^= CarryingObjectOnTopId.GetHashCode();
      if (HeadTrackingObjectId != 0) hash ^= HeadTrackingObjectId.GetHashCode();
      if (LocalizedToObjectId != 0) hash ^= LocalizedToObjectId.GetHashCode();
      if (LastImageTimeStamp != 0) hash ^= LastImageTimeStamp.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (proxData_ != null) hash ^= ProxData.GetHashCode();
      if (touchData_ != null) hash ^= TouchData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (pose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Pose);
      }
      if (PoseAngleRad != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PoseAngleRad);
      }
      if (PosePitchRad != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PosePitchRad);
      }
      if (LeftWheelSpeedMmps != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(LeftWheelSpeedMmps);
      }
      if (RightWheelSpeedMmps != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RightWheelSpeedMmps);
      }
      if (HeadAngleRad != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(HeadAngleRad);
      }
      if (LiftHeightMm != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(LiftHeightMm);
      }
      if (accel_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Accel);
      }
      if (gyro_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Gyro);
      }
      if (CarryingObjectId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CarryingObjectId);
      }
      if (CarryingObjectOnTopId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(CarryingObjectOnTopId);
      }
      if (HeadTrackingObjectId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(HeadTrackingObjectId);
      }
      if (LocalizedToObjectId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(LocalizedToObjectId);
      }
      if (LastImageTimeStamp != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(LastImageTimeStamp);
      }
      if (Status != 0) {
        output.WriteRawTag(120);
        output.WriteUInt32(Status);
      }
      if (proxData_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(ProxData);
      }
      if (touchData_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TouchData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (PoseAngleRad != 0F) {
        size += 1 + 4;
      }
      if (PosePitchRad != 0F) {
        size += 1 + 4;
      }
      if (LeftWheelSpeedMmps != 0F) {
        size += 1 + 4;
      }
      if (RightWheelSpeedMmps != 0F) {
        size += 1 + 4;
      }
      if (HeadAngleRad != 0F) {
        size += 1 + 4;
      }
      if (LiftHeightMm != 0F) {
        size += 1 + 4;
      }
      if (accel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Accel);
      }
      if (gyro_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gyro);
      }
      if (CarryingObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarryingObjectId);
      }
      if (CarryingObjectOnTopId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CarryingObjectOnTopId);
      }
      if (HeadTrackingObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadTrackingObjectId);
      }
      if (LocalizedToObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalizedToObjectId);
      }
      if (LastImageTimeStamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LastImageTimeStamp);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Status);
      }
      if (proxData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ProxData);
      }
      if (touchData_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TouchData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotState other) {
      if (other == null) {
        return;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::Anki.Vector.ExternalInterface.PoseStruct();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.PoseAngleRad != 0F) {
        PoseAngleRad = other.PoseAngleRad;
      }
      if (other.PosePitchRad != 0F) {
        PosePitchRad = other.PosePitchRad;
      }
      if (other.LeftWheelSpeedMmps != 0F) {
        LeftWheelSpeedMmps = other.LeftWheelSpeedMmps;
      }
      if (other.RightWheelSpeedMmps != 0F) {
        RightWheelSpeedMmps = other.RightWheelSpeedMmps;
      }
      if (other.HeadAngleRad != 0F) {
        HeadAngleRad = other.HeadAngleRad;
      }
      if (other.LiftHeightMm != 0F) {
        LiftHeightMm = other.LiftHeightMm;
      }
      if (other.accel_ != null) {
        if (accel_ == null) {
          Accel = new global::Anki.Vector.ExternalInterface.AccelData();
        }
        Accel.MergeFrom(other.Accel);
      }
      if (other.gyro_ != null) {
        if (gyro_ == null) {
          Gyro = new global::Anki.Vector.ExternalInterface.GyroData();
        }
        Gyro.MergeFrom(other.Gyro);
      }
      if (other.CarryingObjectId != 0) {
        CarryingObjectId = other.CarryingObjectId;
      }
      if (other.CarryingObjectOnTopId != 0) {
        CarryingObjectOnTopId = other.CarryingObjectOnTopId;
      }
      if (other.HeadTrackingObjectId != 0) {
        HeadTrackingObjectId = other.HeadTrackingObjectId;
      }
      if (other.LocalizedToObjectId != 0) {
        LocalizedToObjectId = other.LocalizedToObjectId;
      }
      if (other.LastImageTimeStamp != 0) {
        LastImageTimeStamp = other.LastImageTimeStamp;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.proxData_ != null) {
        if (proxData_ == null) {
          ProxData = new global::Anki.Vector.ExternalInterface.ProxData();
        }
        ProxData.MergeFrom(other.ProxData);
      }
      if (other.touchData_ != null) {
        if (touchData_ == null) {
          TouchData = new global::Anki.Vector.ExternalInterface.TouchData();
        }
        TouchData.MergeFrom(other.TouchData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (pose_ == null) {
              Pose = new global::Anki.Vector.ExternalInterface.PoseStruct();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 21: {
            PoseAngleRad = input.ReadFloat();
            break;
          }
          case 29: {
            PosePitchRad = input.ReadFloat();
            break;
          }
          case 37: {
            LeftWheelSpeedMmps = input.ReadFloat();
            break;
          }
          case 45: {
            RightWheelSpeedMmps = input.ReadFloat();
            break;
          }
          case 53: {
            HeadAngleRad = input.ReadFloat();
            break;
          }
          case 61: {
            LiftHeightMm = input.ReadFloat();
            break;
          }
          case 66: {
            if (accel_ == null) {
              Accel = new global::Anki.Vector.ExternalInterface.AccelData();
            }
            input.ReadMessage(Accel);
            break;
          }
          case 74: {
            if (gyro_ == null) {
              Gyro = new global::Anki.Vector.ExternalInterface.GyroData();
            }
            input.ReadMessage(Gyro);
            break;
          }
          case 80: {
            CarryingObjectId = input.ReadInt32();
            break;
          }
          case 88: {
            CarryingObjectOnTopId = input.ReadInt32();
            break;
          }
          case 96: {
            HeadTrackingObjectId = input.ReadInt32();
            break;
          }
          case 104: {
            LocalizedToObjectId = input.ReadInt32();
            break;
          }
          case 112: {
            LastImageTimeStamp = input.ReadUInt32();
            break;
          }
          case 120: {
            Status = input.ReadUInt32();
            break;
          }
          case 130: {
            if (proxData_ == null) {
              ProxData = new global::Anki.Vector.ExternalInterface.ProxData();
            }
            input.ReadMessage(ProxData);
            break;
          }
          case 138: {
            if (touchData_ == null) {
              TouchData = new global::Anki.Vector.ExternalInterface.TouchData();
            }
            input.ReadMessage(TouchData);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CladPoint : pb::IMessage<CladPoint> {
    private static readonly pb::MessageParser<CladPoint> _parser = new pb::MessageParser<CladPoint>(() => new CladPoint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CladPoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CladPoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CladPoint(CladPoint other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CladPoint Clone() {
      return new CladPoint(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CladPoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CladPoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CladPoint other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CladRect : pb::IMessage<CladRect> {
    private static readonly pb::MessageParser<CladRect> _parser = new pb::MessageParser<CladRect>(() => new CladRect());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CladRect> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CladRect() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CladRect(CladRect other) : this() {
      xTopLeft_ = other.xTopLeft_;
      yTopLeft_ = other.yTopLeft_;
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CladRect Clone() {
      return new CladRect(this);
    }

    /// <summary>Field number for the "x_top_left" field.</summary>
    public const int XTopLeftFieldNumber = 1;
    private float xTopLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XTopLeft {
      get { return xTopLeft_; }
      set {
        xTopLeft_ = value;
      }
    }

    /// <summary>Field number for the "y_top_left" field.</summary>
    public const int YTopLeftFieldNumber = 2;
    private float yTopLeft_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YTopLeft {
      get { return yTopLeft_; }
      set {
        yTopLeft_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private float height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CladRect);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CladRect other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XTopLeft, other.XTopLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YTopLeft, other.YTopLeft)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Height, other.Height)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XTopLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XTopLeft);
      if (YTopLeft != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YTopLeft);
      if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (Height != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Height);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XTopLeft != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XTopLeft);
      }
      if (YTopLeft != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(YTopLeft);
      }
      if (Width != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Width);
      }
      if (Height != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XTopLeft != 0F) {
        size += 1 + 4;
      }
      if (YTopLeft != 0F) {
        size += 1 + 4;
      }
      if (Width != 0F) {
        size += 1 + 4;
      }
      if (Height != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CladRect other) {
      if (other == null) {
        return;
      }
      if (other.XTopLeft != 0F) {
        XTopLeft = other.XTopLeft;
      }
      if (other.YTopLeft != 0F) {
        YTopLeft = other.YTopLeft;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Height != 0F) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            XTopLeft = input.ReadFloat();
            break;
          }
          case 21: {
            YTopLeft = input.ReadFloat();
            break;
          }
          case 29: {
            Width = input.ReadFloat();
            break;
          }
          case 37: {
            Height = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RobotObservedFace : pb::IMessage<RobotObservedFace> {
    private static readonly pb::MessageParser<RobotObservedFace> _parser = new pb::MessageParser<RobotObservedFace>(() => new RobotObservedFace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotObservedFace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotObservedFace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotObservedFace(RobotObservedFace other) : this() {
      faceId_ = other.faceId_;
      timestamp_ = other.timestamp_;
      pose_ = other.pose_ != null ? other.pose_.Clone() : null;
      imgRect_ = other.imgRect_ != null ? other.imgRect_.Clone() : null;
      name_ = other.name_;
      expression_ = other.expression_;
      expressionValues_ = other.expressionValues_.Clone();
      leftEye_ = other.leftEye_.Clone();
      rightEye_ = other.rightEye_.Clone();
      nose_ = other.nose_.Clone();
      mouth_ = other.mouth_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotObservedFace Clone() {
      return new RobotObservedFace(this);
    }

    /// <summary>Field number for the "face_id" field.</summary>
    public const int FaceIdFieldNumber = 1;
    private int faceId_;
    /// <summary>
    /// negative: tracked but not recognized; positive: recognized face
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "pose" field.</summary>
    public const int PoseFieldNumber = 3;
    private global::Anki.Vector.ExternalInterface.PoseStruct pose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.PoseStruct Pose {
      get { return pose_; }
      set {
        pose_ = value;
      }
    }

    /// <summary>Field number for the "img_rect" field.</summary>
    public const int ImgRectFieldNumber = 4;
    private global::Anki.Vector.ExternalInterface.CladRect imgRect_;
    /// <summary>
    /// position in image coords
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CladRect ImgRect {
      get { return imgRect_; }
      set {
        imgRect_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 5;
    private string name_ = "";
    /// <summary>
    /// Empty if none assigned yet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expression" field.</summary>
    public const int ExpressionFieldNumber = 6;
    private global::Anki.Vector.ExternalInterface.FacialExpression expression_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.FacialExpression Expression {
      get { return expression_; }
      set {
        expression_ = value;
      }
    }

    /// <summary>Field number for the "expression_values" field.</summary>
    public const int ExpressionValuesFieldNumber = 7;
    private static readonly pb::FieldCodec<uint> _repeated_expressionValues_codec
        = pb::FieldCodec.ForUInt32(58);
    private readonly pbc::RepeatedField<uint> expressionValues_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Individual expression values histogram, sums to 100 (Exception: all zero if expression=Unknown)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> ExpressionValues {
      get { return expressionValues_; }
    }

    /// <summary>Field number for the "left_eye" field.</summary>
    public const int LeftEyeFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.CladPoint> _repeated_leftEye_codec
        = pb::FieldCodec.ForMessage(66, global::Anki.Vector.ExternalInterface.CladPoint.Parser);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint> leftEye_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint>();
    /// <summary>
    /// Face landmarks
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint> LeftEye {
      get { return leftEye_; }
    }

    /// <summary>Field number for the "right_eye" field.</summary>
    public const int RightEyeFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.CladPoint> _repeated_rightEye_codec
        = pb::FieldCodec.ForMessage(74, global::Anki.Vector.ExternalInterface.CladPoint.Parser);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint> rightEye_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint> RightEye {
      get { return rightEye_; }
    }

    /// <summary>Field number for the "nose" field.</summary>
    public const int NoseFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.CladPoint> _repeated_nose_codec
        = pb::FieldCodec.ForMessage(82, global::Anki.Vector.ExternalInterface.CladPoint.Parser);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint> nose_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint> Nose {
      get { return nose_; }
    }

    /// <summary>Field number for the "mouth" field.</summary>
    public const int MouthFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.CladPoint> _repeated_mouth_codec
        = pb::FieldCodec.ForMessage(90, global::Anki.Vector.ExternalInterface.CladPoint.Parser);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint> mouth_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.CladPoint> Mouth {
      get { return mouth_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotObservedFace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotObservedFace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FaceId != other.FaceId) return false;
      if (Timestamp != other.Timestamp) return false;
      if (!object.Equals(Pose, other.Pose)) return false;
      if (!object.Equals(ImgRect, other.ImgRect)) return false;
      if (Name != other.Name) return false;
      if (Expression != other.Expression) return false;
      if(!expressionValues_.Equals(other.expressionValues_)) return false;
      if(!leftEye_.Equals(other.leftEye_)) return false;
      if(!rightEye_.Equals(other.rightEye_)) return false;
      if(!nose_.Equals(other.nose_)) return false;
      if(!mouth_.Equals(other.mouth_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (pose_ != null) hash ^= Pose.GetHashCode();
      if (imgRect_ != null) hash ^= ImgRect.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Expression != 0) hash ^= Expression.GetHashCode();
      hash ^= expressionValues_.GetHashCode();
      hash ^= leftEye_.GetHashCode();
      hash ^= rightEye_.GetHashCode();
      hash ^= nose_.GetHashCode();
      hash ^= mouth_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FaceId);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Timestamp);
      }
      if (pose_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pose);
      }
      if (imgRect_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ImgRect);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Name);
      }
      if (Expression != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Expression);
      }
      expressionValues_.WriteTo(output, _repeated_expressionValues_codec);
      leftEye_.WriteTo(output, _repeated_leftEye_codec);
      rightEye_.WriteTo(output, _repeated_rightEye_codec);
      nose_.WriteTo(output, _repeated_nose_codec);
      mouth_.WriteTo(output, _repeated_mouth_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (pose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose);
      }
      if (imgRect_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImgRect);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Expression != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Expression);
      }
      size += expressionValues_.CalculateSize(_repeated_expressionValues_codec);
      size += leftEye_.CalculateSize(_repeated_leftEye_codec);
      size += rightEye_.CalculateSize(_repeated_rightEye_codec);
      size += nose_.CalculateSize(_repeated_nose_codec);
      size += mouth_.CalculateSize(_repeated_mouth_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotObservedFace other) {
      if (other == null) {
        return;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.pose_ != null) {
        if (pose_ == null) {
          Pose = new global::Anki.Vector.ExternalInterface.PoseStruct();
        }
        Pose.MergeFrom(other.Pose);
      }
      if (other.imgRect_ != null) {
        if (imgRect_ == null) {
          ImgRect = new global::Anki.Vector.ExternalInterface.CladRect();
        }
        ImgRect.MergeFrom(other.ImgRect);
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Expression != 0) {
        Expression = other.Expression;
      }
      expressionValues_.Add(other.expressionValues_);
      leftEye_.Add(other.leftEye_);
      rightEye_.Add(other.rightEye_);
      nose_.Add(other.nose_);
      mouth_.Add(other.mouth_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FaceId = input.ReadInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 26: {
            if (pose_ == null) {
              Pose = new global::Anki.Vector.ExternalInterface.PoseStruct();
            }
            input.ReadMessage(Pose);
            break;
          }
          case 34: {
            if (imgRect_ == null) {
              ImgRect = new global::Anki.Vector.ExternalInterface.CladRect();
            }
            input.ReadMessage(ImgRect);
            break;
          }
          case 42: {
            Name = input.ReadString();
            break;
          }
          case 48: {
            Expression = (global::Anki.Vector.ExternalInterface.FacialExpression) input.ReadEnum();
            break;
          }
          case 58:
          case 56: {
            expressionValues_.AddEntriesFrom(input, _repeated_expressionValues_codec);
            break;
          }
          case 66: {
            leftEye_.AddEntriesFrom(input, _repeated_leftEye_codec);
            break;
          }
          case 74: {
            rightEye_.AddEntriesFrom(input, _repeated_rightEye_codec);
            break;
          }
          case 82: {
            nose_.AddEntriesFrom(input, _repeated_nose_codec);
            break;
          }
          case 90: {
            mouth_.AddEntriesFrom(input, _repeated_mouth_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// RobotChangedObservedFaceID
  ///  This generally happens when a tracked face (negative ID) is recognized and
  ///  receives a positive ID or when face records get merged
  /// </summary>
  public sealed partial class RobotChangedObservedFaceID : pb::IMessage<RobotChangedObservedFaceID> {
    private static readonly pb::MessageParser<RobotChangedObservedFaceID> _parser = new pb::MessageParser<RobotChangedObservedFaceID>(() => new RobotChangedObservedFaceID());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotChangedObservedFaceID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotChangedObservedFaceID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotChangedObservedFaceID(RobotChangedObservedFaceID other) : this() {
      oldId_ = other.oldId_;
      newId_ = other.newId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotChangedObservedFaceID Clone() {
      return new RobotChangedObservedFaceID(this);
    }

    /// <summary>Field number for the "old_id" field.</summary>
    public const int OldIdFieldNumber = 1;
    private int oldId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OldId {
      get { return oldId_; }
      set {
        oldId_ = value;
      }
    }

    /// <summary>Field number for the "new_id" field.</summary>
    public const int NewIdFieldNumber = 2;
    private int newId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewId {
      get { return newId_; }
      set {
        newId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotChangedObservedFaceID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotChangedObservedFaceID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OldId != other.OldId) return false;
      if (NewId != other.NewId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OldId != 0) hash ^= OldId.GetHashCode();
      if (NewId != 0) hash ^= NewId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OldId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(OldId);
      }
      if (NewId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NewId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OldId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldId);
      }
      if (NewId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotChangedObservedFaceID other) {
      if (other == null) {
        return;
      }
      if (other.OldId != 0) {
        OldId = other.OldId;
      }
      if (other.NewId != 0) {
        NewId = other.NewId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OldId = input.ReadInt32();
            break;
          }
          case 16: {
            NewId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppIntentRequest : pb::IMessage<AppIntentRequest> {
    private static readonly pb::MessageParser<AppIntentRequest> _parser = new pb::MessageParser<AppIntentRequest>(() => new AppIntentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppIntentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppIntentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppIntentRequest(AppIntentRequest other) : this() {
      intent_ = other.intent_;
      param_ = other.param_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppIntentRequest Clone() {
      return new AppIntentRequest(this);
    }

    /// <summary>Field number for the "intent" field.</summary>
    public const int IntentFieldNumber = 1;
    private string intent_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Intent {
      get { return intent_; }
      set {
        intent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private string param_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Param {
      get { return param_; }
      set {
        param_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppIntentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppIntentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Intent != other.Intent) return false;
      if (Param != other.Param) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Intent.Length != 0) hash ^= Intent.GetHashCode();
      if (Param.Length != 0) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Intent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Intent);
      }
      if (Param.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Intent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Intent);
      }
      if (Param.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppIntentRequest other) {
      if (other == null) {
        return;
      }
      if (other.Intent.Length != 0) {
        Intent = other.Intent;
      }
      if (other.Param.Length != 0) {
        Param = other.Param;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Intent = input.ReadString();
            break;
          }
          case 18: {
            Param = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppDisconnected : pb::IMessage<AppDisconnected> {
    private static readonly pb::MessageParser<AppDisconnected> _parser = new pb::MessageParser<AppDisconnected>(() => new AppDisconnected());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppDisconnected> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppDisconnected() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppDisconnected(AppDisconnected other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppDisconnected Clone() {
      return new AppDisconnected(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppDisconnected);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppDisconnected other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppDisconnected other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AppIntentResponse : pb::IMessage<AppIntentResponse> {
    private static readonly pb::MessageParser<AppIntentResponse> _parser = new pb::MessageParser<AppIntentResponse>(() => new AppIntentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppIntentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppIntentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppIntentResponse(AppIntentResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppIntentResponse Clone() {
      return new AppIntentResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppIntentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppIntentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppIntentResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FaceEnrollmentCompleted : pb::IMessage<FaceEnrollmentCompleted> {
    private static readonly pb::MessageParser<FaceEnrollmentCompleted> _parser = new pb::MessageParser<FaceEnrollmentCompleted>(() => new FaceEnrollmentCompleted());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FaceEnrollmentCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceEnrollmentCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceEnrollmentCompleted(FaceEnrollmentCompleted other) : this() {
      result_ = other.result_;
      faceId_ = other.faceId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FaceEnrollmentCompleted Clone() {
      return new FaceEnrollmentCompleted(this);
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.FaceEnrollmentResult result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.FaceEnrollmentResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "face_id" field.</summary>
    public const int FaceIdFieldNumber = 2;
    private int faceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FaceEnrollmentCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FaceEnrollmentCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (FaceId != other.FaceId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Result);
      }
      if (FaceId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FaceId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FaceEnrollmentCompleted other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = (global::Anki.Vector.ExternalInterface.FaceEnrollmentResult) input.ReadEnum();
            break;
          }
          case 16: {
            FaceId = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelFaceEnrollmentRequest : pb::IMessage<CancelFaceEnrollmentRequest> {
    private static readonly pb::MessageParser<CancelFaceEnrollmentRequest> _parser = new pb::MessageParser<CancelFaceEnrollmentRequest>(() => new CancelFaceEnrollmentRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelFaceEnrollmentRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFaceEnrollmentRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFaceEnrollmentRequest(CancelFaceEnrollmentRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFaceEnrollmentRequest Clone() {
      return new CancelFaceEnrollmentRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelFaceEnrollmentRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelFaceEnrollmentRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelFaceEnrollmentRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CancelFaceEnrollmentResponse : pb::IMessage<CancelFaceEnrollmentResponse> {
    private static readonly pb::MessageParser<CancelFaceEnrollmentResponse> _parser = new pb::MessageParser<CancelFaceEnrollmentResponse>(() => new CancelFaceEnrollmentResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelFaceEnrollmentResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFaceEnrollmentResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFaceEnrollmentResponse(CancelFaceEnrollmentResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelFaceEnrollmentResponse Clone() {
      return new CancelFaceEnrollmentResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelFaceEnrollmentResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelFaceEnrollmentResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelFaceEnrollmentResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestEnrolledNamesRequest : pb::IMessage<RequestEnrolledNamesRequest> {
    private static readonly pb::MessageParser<RequestEnrolledNamesRequest> _parser = new pb::MessageParser<RequestEnrolledNamesRequest>(() => new RequestEnrolledNamesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestEnrolledNamesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEnrolledNamesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEnrolledNamesRequest(RequestEnrolledNamesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEnrolledNamesRequest Clone() {
      return new RequestEnrolledNamesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestEnrolledNamesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestEnrolledNamesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestEnrolledNamesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class LoadedKnownFace : pb::IMessage<LoadedKnownFace> {
    private static readonly pb::MessageParser<LoadedKnownFace> _parser = new pb::MessageParser<LoadedKnownFace>(() => new LoadedKnownFace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoadedKnownFace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadedKnownFace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadedKnownFace(LoadedKnownFace other) : this() {
      secondsSinceFirstEnrolled_ = other.secondsSinceFirstEnrolled_;
      secondsSinceLastUpdated_ = other.secondsSinceLastUpdated_;
      secondsSinceLastSeen_ = other.secondsSinceLastSeen_;
      lastSeenSecondsSinceEpoch_ = other.lastSeenSecondsSinceEpoch_;
      faceId_ = other.faceId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoadedKnownFace Clone() {
      return new LoadedKnownFace(this);
    }

    /// <summary>Field number for the "seconds_since_first_enrolled" field.</summary>
    public const int SecondsSinceFirstEnrolledFieldNumber = 1;
    private long secondsSinceFirstEnrolled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondsSinceFirstEnrolled {
      get { return secondsSinceFirstEnrolled_; }
      set {
        secondsSinceFirstEnrolled_ = value;
      }
    }

    /// <summary>Field number for the "seconds_since_last_updated" field.</summary>
    public const int SecondsSinceLastUpdatedFieldNumber = 2;
    private long secondsSinceLastUpdated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondsSinceLastUpdated {
      get { return secondsSinceLastUpdated_; }
      set {
        secondsSinceLastUpdated_ = value;
      }
    }

    /// <summary>Field number for the "seconds_since_last_seen" field.</summary>
    public const int SecondsSinceLastSeenFieldNumber = 3;
    private long secondsSinceLastSeen_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondsSinceLastSeen {
      get { return secondsSinceLastSeen_; }
      set {
        secondsSinceLastSeen_ = value;
      }
    }

    /// <summary>Field number for the "last_seen_seconds_since_epoch" field.</summary>
    public const int LastSeenSecondsSinceEpochFieldNumber = 4;
    private long lastSeenSecondsSinceEpoch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastSeenSecondsSinceEpoch {
      get { return lastSeenSecondsSinceEpoch_; }
      set {
        lastSeenSecondsSinceEpoch_ = value;
      }
    }

    /// <summary>Field number for the "face_id" field.</summary>
    public const int FaceIdFieldNumber = 5;
    private int faceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 6;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoadedKnownFace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoadedKnownFace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SecondsSinceFirstEnrolled != other.SecondsSinceFirstEnrolled) return false;
      if (SecondsSinceLastUpdated != other.SecondsSinceLastUpdated) return false;
      if (SecondsSinceLastSeen != other.SecondsSinceLastSeen) return false;
      if (LastSeenSecondsSinceEpoch != other.LastSeenSecondsSinceEpoch) return false;
      if (FaceId != other.FaceId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SecondsSinceFirstEnrolled != 0L) hash ^= SecondsSinceFirstEnrolled.GetHashCode();
      if (SecondsSinceLastUpdated != 0L) hash ^= SecondsSinceLastUpdated.GetHashCode();
      if (SecondsSinceLastSeen != 0L) hash ^= SecondsSinceLastSeen.GetHashCode();
      if (LastSeenSecondsSinceEpoch != 0L) hash ^= LastSeenSecondsSinceEpoch.GetHashCode();
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SecondsSinceFirstEnrolled != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SecondsSinceFirstEnrolled);
      }
      if (SecondsSinceLastUpdated != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SecondsSinceLastUpdated);
      }
      if (SecondsSinceLastSeen != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SecondsSinceLastSeen);
      }
      if (LastSeenSecondsSinceEpoch != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LastSeenSecondsSinceEpoch);
      }
      if (FaceId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FaceId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SecondsSinceFirstEnrolled != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondsSinceFirstEnrolled);
      }
      if (SecondsSinceLastUpdated != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondsSinceLastUpdated);
      }
      if (SecondsSinceLastSeen != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SecondsSinceLastSeen);
      }
      if (LastSeenSecondsSinceEpoch != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastSeenSecondsSinceEpoch);
      }
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoadedKnownFace other) {
      if (other == null) {
        return;
      }
      if (other.SecondsSinceFirstEnrolled != 0L) {
        SecondsSinceFirstEnrolled = other.SecondsSinceFirstEnrolled;
      }
      if (other.SecondsSinceLastUpdated != 0L) {
        SecondsSinceLastUpdated = other.SecondsSinceLastUpdated;
      }
      if (other.SecondsSinceLastSeen != 0L) {
        SecondsSinceLastSeen = other.SecondsSinceLastSeen;
      }
      if (other.LastSeenSecondsSinceEpoch != 0L) {
        LastSeenSecondsSinceEpoch = other.LastSeenSecondsSinceEpoch;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SecondsSinceFirstEnrolled = input.ReadInt64();
            break;
          }
          case 16: {
            SecondsSinceLastUpdated = input.ReadInt64();
            break;
          }
          case 24: {
            SecondsSinceLastSeen = input.ReadInt64();
            break;
          }
          case 32: {
            LastSeenSecondsSinceEpoch = input.ReadInt64();
            break;
          }
          case 40: {
            FaceId = input.ReadInt32();
            break;
          }
          case 50: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RobotRenamedEnrolledFace : pb::IMessage<RobotRenamedEnrolledFace> {
    private static readonly pb::MessageParser<RobotRenamedEnrolledFace> _parser = new pb::MessageParser<RobotRenamedEnrolledFace>(() => new RobotRenamedEnrolledFace());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RobotRenamedEnrolledFace> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotRenamedEnrolledFace() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotRenamedEnrolledFace(RobotRenamedEnrolledFace other) : this() {
      faceId_ = other.faceId_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RobotRenamedEnrolledFace Clone() {
      return new RobotRenamedEnrolledFace(this);
    }

    /// <summary>Field number for the "face_id" field.</summary>
    public const int FaceIdFieldNumber = 1;
    private int faceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RobotRenamedEnrolledFace);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RobotRenamedEnrolledFace other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FaceId != other.FaceId) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FaceId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RobotRenamedEnrolledFace other) {
      if (other == null) {
        return;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FaceId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RequestEnrolledNamesResponse : pb::IMessage<RequestEnrolledNamesResponse> {
    private static readonly pb::MessageParser<RequestEnrolledNamesResponse> _parser = new pb::MessageParser<RequestEnrolledNamesResponse>(() => new RequestEnrolledNamesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestEnrolledNamesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEnrolledNamesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEnrolledNamesResponse(RequestEnrolledNamesResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      faces_ = other.faces_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestEnrolledNamesResponse Clone() {
      return new RequestEnrolledNamesResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "faces" field.</summary>
    public const int FacesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.LoadedKnownFace> _repeated_faces_codec
        = pb::FieldCodec.ForMessage(18, global::Anki.Vector.ExternalInterface.LoadedKnownFace.Parser);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.LoadedKnownFace> faces_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.LoadedKnownFace>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.LoadedKnownFace> Faces {
      get { return faces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestEnrolledNamesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestEnrolledNamesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!faces_.Equals(other.faces_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= faces_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      faces_.WriteTo(output, _repeated_faces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += faces_.CalculateSize(_repeated_faces_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestEnrolledNamesResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      faces_.Add(other.faces_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            faces_.AddEntriesFrom(input, _repeated_faces_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateEnrolledFaceByIDRequest : pb::IMessage<UpdateEnrolledFaceByIDRequest> {
    private static readonly pb::MessageParser<UpdateEnrolledFaceByIDRequest> _parser = new pb::MessageParser<UpdateEnrolledFaceByIDRequest>(() => new UpdateEnrolledFaceByIDRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateEnrolledFaceByIDRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEnrolledFaceByIDRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEnrolledFaceByIDRequest(UpdateEnrolledFaceByIDRequest other) : this() {
      faceId_ = other.faceId_;
      oldName_ = other.oldName_;
      newName_ = other.newName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEnrolledFaceByIDRequest Clone() {
      return new UpdateEnrolledFaceByIDRequest(this);
    }

    /// <summary>Field number for the "face_id" field.</summary>
    public const int FaceIdFieldNumber = 1;
    private int faceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    /// <summary>Field number for the "old_name" field.</summary>
    public const int OldNameFieldNumber = 2;
    private string oldName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OldName {
      get { return oldName_; }
      set {
        oldName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_name" field.</summary>
    public const int NewNameFieldNumber = 3;
    private string newName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewName {
      get { return newName_; }
      set {
        newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateEnrolledFaceByIDRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateEnrolledFaceByIDRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FaceId != other.FaceId) return false;
      if (OldName != other.OldName) return false;
      if (NewName != other.NewName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (OldName.Length != 0) hash ^= OldName.GetHashCode();
      if (NewName.Length != 0) hash ^= NewName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FaceId);
      }
      if (OldName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OldName);
      }
      if (NewName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NewName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (OldName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OldName);
      }
      if (NewName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateEnrolledFaceByIDRequest other) {
      if (other == null) {
        return;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      if (other.OldName.Length != 0) {
        OldName = other.OldName;
      }
      if (other.NewName.Length != 0) {
        NewName = other.NewName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FaceId = input.ReadInt32();
            break;
          }
          case 18: {
            OldName = input.ReadString();
            break;
          }
          case 26: {
            NewName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateEnrolledFaceByIDResponse : pb::IMessage<UpdateEnrolledFaceByIDResponse> {
    private static readonly pb::MessageParser<UpdateEnrolledFaceByIDResponse> _parser = new pb::MessageParser<UpdateEnrolledFaceByIDResponse>(() => new UpdateEnrolledFaceByIDResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateEnrolledFaceByIDResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEnrolledFaceByIDResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEnrolledFaceByIDResponse(UpdateEnrolledFaceByIDResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateEnrolledFaceByIDResponse Clone() {
      return new UpdateEnrolledFaceByIDResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateEnrolledFaceByIDResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateEnrolledFaceByIDResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateEnrolledFaceByIDResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EraseEnrolledFaceByIDRequest : pb::IMessage<EraseEnrolledFaceByIDRequest> {
    private static readonly pb::MessageParser<EraseEnrolledFaceByIDRequest> _parser = new pb::MessageParser<EraseEnrolledFaceByIDRequest>(() => new EraseEnrolledFaceByIDRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EraseEnrolledFaceByIDRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseEnrolledFaceByIDRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseEnrolledFaceByIDRequest(EraseEnrolledFaceByIDRequest other) : this() {
      faceId_ = other.faceId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseEnrolledFaceByIDRequest Clone() {
      return new EraseEnrolledFaceByIDRequest(this);
    }

    /// <summary>Field number for the "face_id" field.</summary>
    public const int FaceIdFieldNumber = 1;
    private int faceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FaceId {
      get { return faceId_; }
      set {
        faceId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EraseEnrolledFaceByIDRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EraseEnrolledFaceByIDRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FaceId != other.FaceId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FaceId != 0) hash ^= FaceId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FaceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FaceId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FaceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EraseEnrolledFaceByIDRequest other) {
      if (other == null) {
        return;
      }
      if (other.FaceId != 0) {
        FaceId = other.FaceId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FaceId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EraseEnrolledFaceByIDResponse : pb::IMessage<EraseEnrolledFaceByIDResponse> {
    private static readonly pb::MessageParser<EraseEnrolledFaceByIDResponse> _parser = new pb::MessageParser<EraseEnrolledFaceByIDResponse>(() => new EraseEnrolledFaceByIDResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EraseEnrolledFaceByIDResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseEnrolledFaceByIDResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseEnrolledFaceByIDResponse(EraseEnrolledFaceByIDResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseEnrolledFaceByIDResponse Clone() {
      return new EraseEnrolledFaceByIDResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EraseEnrolledFaceByIDResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EraseEnrolledFaceByIDResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EraseEnrolledFaceByIDResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EraseAllEnrolledFacesRequest : pb::IMessage<EraseAllEnrolledFacesRequest> {
    private static readonly pb::MessageParser<EraseAllEnrolledFacesRequest> _parser = new pb::MessageParser<EraseAllEnrolledFacesRequest>(() => new EraseAllEnrolledFacesRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EraseAllEnrolledFacesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseAllEnrolledFacesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseAllEnrolledFacesRequest(EraseAllEnrolledFacesRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseAllEnrolledFacesRequest Clone() {
      return new EraseAllEnrolledFacesRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EraseAllEnrolledFacesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EraseAllEnrolledFacesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EraseAllEnrolledFacesRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class EraseAllEnrolledFacesResponse : pb::IMessage<EraseAllEnrolledFacesResponse> {
    private static readonly pb::MessageParser<EraseAllEnrolledFacesResponse> _parser = new pb::MessageParser<EraseAllEnrolledFacesResponse>(() => new EraseAllEnrolledFacesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EraseAllEnrolledFacesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseAllEnrolledFacesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseAllEnrolledFacesResponse(EraseAllEnrolledFacesResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EraseAllEnrolledFacesResponse Clone() {
      return new EraseAllEnrolledFacesResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EraseAllEnrolledFacesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EraseAllEnrolledFacesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EraseAllEnrolledFacesResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetFaceToEnrollRequest : pb::IMessage<SetFaceToEnrollRequest> {
    private static readonly pb::MessageParser<SetFaceToEnrollRequest> _parser = new pb::MessageParser<SetFaceToEnrollRequest>(() => new SetFaceToEnrollRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetFaceToEnrollRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFaceToEnrollRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFaceToEnrollRequest(SetFaceToEnrollRequest other) : this() {
      name_ = other.name_;
      observedId_ = other.observedId_;
      saveId_ = other.saveId_;
      saveToRobot_ = other.saveToRobot_;
      sayName_ = other.sayName_;
      useMusic_ = other.useMusic_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFaceToEnrollRequest Clone() {
      return new SetFaceToEnrollRequest(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "observed_id" field.</summary>
    public const int ObservedIdFieldNumber = 2;
    private int observedId_;
    /// <summary>
    /// The ID of a specific observed face to enroll (0 for next one we see)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObservedId {
      get { return observedId_; }
      set {
        observedId_ = value;
      }
    }

    /// <summary>Field number for the "save_id" field.</summary>
    public const int SaveIdFieldNumber = 3;
    private int saveId_;
    /// <summary>
    /// The ID of an existing face to merge final enrollment into (0 for none,
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SaveId {
      get { return saveId_; }
      set {
        saveId_ = value;
      }
    }

    /// <summary>Field number for the "save_to_robot" field.</summary>
    public const int SaveToRobotFieldNumber = 4;
    private bool saveToRobot_;
    /// <summary>
    /// Save to robot's NVStorage when done (NOTE: will (re)save everyone enrolled!)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SaveToRobot {
      get { return saveToRobot_; }
      set {
        saveToRobot_ = value;
      }
    }

    /// <summary>Field number for the "say_name" field.</summary>
    public const int SayNameFieldNumber = 5;
    private bool sayName_;
    /// <summary>
    /// Play say-name/celebration animations on success before completing
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SayName {
      get { return sayName_; }
      set {
        sayName_ = value;
      }
    }

    /// <summary>Field number for the "use_music" field.</summary>
    public const int UseMusicFieldNumber = 6;
    private bool useMusic_;
    /// <summary>
    /// Starts special music during say-name animations (will leave music playing!)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseMusic {
      get { return useMusic_; }
      set {
        useMusic_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetFaceToEnrollRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetFaceToEnrollRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ObservedId != other.ObservedId) return false;
      if (SaveId != other.SaveId) return false;
      if (SaveToRobot != other.SaveToRobot) return false;
      if (SayName != other.SayName) return false;
      if (UseMusic != other.UseMusic) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ObservedId != 0) hash ^= ObservedId.GetHashCode();
      if (SaveId != 0) hash ^= SaveId.GetHashCode();
      if (SaveToRobot != false) hash ^= SaveToRobot.GetHashCode();
      if (SayName != false) hash ^= SayName.GetHashCode();
      if (UseMusic != false) hash ^= UseMusic.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ObservedId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ObservedId);
      }
      if (SaveId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SaveId);
      }
      if (SaveToRobot != false) {
        output.WriteRawTag(32);
        output.WriteBool(SaveToRobot);
      }
      if (SayName != false) {
        output.WriteRawTag(40);
        output.WriteBool(SayName);
      }
      if (UseMusic != false) {
        output.WriteRawTag(48);
        output.WriteBool(UseMusic);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ObservedId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObservedId);
      }
      if (SaveId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SaveId);
      }
      if (SaveToRobot != false) {
        size += 1 + 1;
      }
      if (SayName != false) {
        size += 1 + 1;
      }
      if (UseMusic != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetFaceToEnrollRequest other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ObservedId != 0) {
        ObservedId = other.ObservedId;
      }
      if (other.SaveId != 0) {
        SaveId = other.SaveId;
      }
      if (other.SaveToRobot != false) {
        SaveToRobot = other.SaveToRobot;
      }
      if (other.SayName != false) {
        SayName = other.SayName;
      }
      if (other.UseMusic != false) {
        UseMusic = other.UseMusic;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            ObservedId = input.ReadInt32();
            break;
          }
          case 24: {
            SaveId = input.ReadInt32();
            break;
          }
          case 32: {
            SaveToRobot = input.ReadBool();
            break;
          }
          case 40: {
            SayName = input.ReadBool();
            break;
          }
          case 48: {
            UseMusic = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetFaceToEnrollResponse : pb::IMessage<SetFaceToEnrollResponse> {
    private static readonly pb::MessageParser<SetFaceToEnrollResponse> _parser = new pb::MessageParser<SetFaceToEnrollResponse>(() => new SetFaceToEnrollResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetFaceToEnrollResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFaceToEnrollResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFaceToEnrollResponse(SetFaceToEnrollResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetFaceToEnrollResponse Clone() {
      return new SetFaceToEnrollResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetFaceToEnrollResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetFaceToEnrollResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetFaceToEnrollResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DriveOffChargerRequest : pb::IMessage<DriveOffChargerRequest> {
    private static readonly pb::MessageParser<DriveOffChargerRequest> _parser = new pb::MessageParser<DriveOffChargerRequest>(() => new DriveOffChargerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriveOffChargerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOffChargerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOffChargerRequest(DriveOffChargerRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOffChargerRequest Clone() {
      return new DriveOffChargerRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriveOffChargerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriveOffChargerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriveOffChargerRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DriveOffChargerResponse : pb::IMessage<DriveOffChargerResponse> {
    private static readonly pb::MessageParser<DriveOffChargerResponse> _parser = new pb::MessageParser<DriveOffChargerResponse>(() => new DriveOffChargerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriveOffChargerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOffChargerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOffChargerResponse(DriveOffChargerResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOffChargerResponse Clone() {
      return new DriveOffChargerResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.BehaviorResults result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.BehaviorResults Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriveOffChargerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriveOffChargerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriveOffChargerResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 16: {
            Result = (global::Anki.Vector.ExternalInterface.BehaviorResults) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DriveOnChargerRequest : pb::IMessage<DriveOnChargerRequest> {
    private static readonly pb::MessageParser<DriveOnChargerRequest> _parser = new pb::MessageParser<DriveOnChargerRequest>(() => new DriveOnChargerRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriveOnChargerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOnChargerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOnChargerRequest(DriveOnChargerRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOnChargerRequest Clone() {
      return new DriveOnChargerRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriveOnChargerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriveOnChargerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriveOnChargerRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DriveOnChargerResponse : pb::IMessage<DriveOnChargerResponse> {
    private static readonly pb::MessageParser<DriveOnChargerResponse> _parser = new pb::MessageParser<DriveOnChargerResponse>(() => new DriveOnChargerResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriveOnChargerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOnChargerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOnChargerResponse(DriveOnChargerResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      result_ = other.result_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveOnChargerResponse Clone() {
      return new DriveOnChargerResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.BehaviorResults result_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.BehaviorResults Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriveOnChargerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriveOnChargerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Result != other.Result) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Result != 0) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Result != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriveOnChargerResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 16: {
            Result = (global::Anki.Vector.ExternalInterface.BehaviorResults) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WakeWordBegin : pb::IMessage<WakeWordBegin> {
    private static readonly pb::MessageParser<WakeWordBegin> _parser = new pb::MessageParser<WakeWordBegin>(() => new WakeWordBegin());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WakeWordBegin> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWordBegin() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWordBegin(WakeWordBegin other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWordBegin Clone() {
      return new WakeWordBegin(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WakeWordBegin);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WakeWordBegin other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WakeWordBegin other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class WakeWordEnd : pb::IMessage<WakeWordEnd> {
    private static readonly pb::MessageParser<WakeWordEnd> _parser = new pb::MessageParser<WakeWordEnd>(() => new WakeWordEnd());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WakeWordEnd> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWordEnd() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWordEnd(WakeWordEnd other) : this() {
      intentHeard_ = other.intentHeard_;
      intentJson_ = other.intentJson_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WakeWordEnd Clone() {
      return new WakeWordEnd(this);
    }

    /// <summary>Field number for the "intent_heard" field.</summary>
    public const int IntentHeardFieldNumber = 1;
    private bool intentHeard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IntentHeard {
      get { return intentHeard_; }
      set {
        intentHeard_ = value;
      }
    }

    /// <summary>Field number for the "intent_json" field.</summary>
    public const int IntentJsonFieldNumber = 2;
    private string intentJson_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IntentJson {
      get { return intentJson_; }
      set {
        intentJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WakeWordEnd);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WakeWordEnd other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IntentHeard != other.IntentHeard) return false;
      if (IntentJson != other.IntentJson) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IntentHeard != false) hash ^= IntentHeard.GetHashCode();
      if (IntentJson.Length != 0) hash ^= IntentJson.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IntentHeard != false) {
        output.WriteRawTag(8);
        output.WriteBool(IntentHeard);
      }
      if (IntentJson.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(IntentJson);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IntentHeard != false) {
        size += 1 + 1;
      }
      if (IntentJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IntentJson);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WakeWordEnd other) {
      if (other == null) {
        return;
      }
      if (other.IntentHeard != false) {
        IntentHeard = other.IntentHeard;
      }
      if (other.IntentJson.Length != 0) {
        IntentJson = other.IntentJson;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IntentHeard = input.ReadBool();
            break;
          }
          case 18: {
            IntentJson = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhotoInfo : pb::IMessage<PhotoInfo> {
    private static readonly pb::MessageParser<PhotoInfo> _parser = new pb::MessageParser<PhotoInfo>(() => new PhotoInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotoInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoInfo(PhotoInfo other) : this() {
      photoId_ = other.photoId_;
      timestampUtc_ = other.timestampUtc_;
      photoCopiedToApp_ = other.photoCopiedToApp_;
      thumbCopiedToApp_ = other.thumbCopiedToApp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoInfo Clone() {
      return new PhotoInfo(this);
    }

    /// <summary>Field number for the "photo_id" field.</summary>
    public const int PhotoIdFieldNumber = 1;
    private uint photoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhotoId {
      get { return photoId_; }
      set {
        photoId_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_utc" field.</summary>
    public const int TimestampUtcFieldNumber = 2;
    private uint timestampUtc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimestampUtc {
      get { return timestampUtc_; }
      set {
        timestampUtc_ = value;
      }
    }

    /// <summary>Field number for the "photo_copied_to_app" field.</summary>
    public const int PhotoCopiedToAppFieldNumber = 3;
    private bool photoCopiedToApp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PhotoCopiedToApp {
      get { return photoCopiedToApp_; }
      set {
        photoCopiedToApp_ = value;
      }
    }

    /// <summary>Field number for the "thumb_copied_to_app" field.</summary>
    public const int ThumbCopiedToAppFieldNumber = 4;
    private bool thumbCopiedToApp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ThumbCopiedToApp {
      get { return thumbCopiedToApp_; }
      set {
        thumbCopiedToApp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotoInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotoInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PhotoId != other.PhotoId) return false;
      if (TimestampUtc != other.TimestampUtc) return false;
      if (PhotoCopiedToApp != other.PhotoCopiedToApp) return false;
      if (ThumbCopiedToApp != other.ThumbCopiedToApp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PhotoId != 0) hash ^= PhotoId.GetHashCode();
      if (TimestampUtc != 0) hash ^= TimestampUtc.GetHashCode();
      if (PhotoCopiedToApp != false) hash ^= PhotoCopiedToApp.GetHashCode();
      if (ThumbCopiedToApp != false) hash ^= ThumbCopiedToApp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PhotoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PhotoId);
      }
      if (TimestampUtc != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimestampUtc);
      }
      if (PhotoCopiedToApp != false) {
        output.WriteRawTag(24);
        output.WriteBool(PhotoCopiedToApp);
      }
      if (ThumbCopiedToApp != false) {
        output.WriteRawTag(32);
        output.WriteBool(ThumbCopiedToApp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PhotoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhotoId);
      }
      if (TimestampUtc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimestampUtc);
      }
      if (PhotoCopiedToApp != false) {
        size += 1 + 1;
      }
      if (ThumbCopiedToApp != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotoInfo other) {
      if (other == null) {
        return;
      }
      if (other.PhotoId != 0) {
        PhotoId = other.PhotoId;
      }
      if (other.TimestampUtc != 0) {
        TimestampUtc = other.TimestampUtc;
      }
      if (other.PhotoCopiedToApp != false) {
        PhotoCopiedToApp = other.PhotoCopiedToApp;
      }
      if (other.ThumbCopiedToApp != false) {
        ThumbCopiedToApp = other.ThumbCopiedToApp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PhotoId = input.ReadUInt32();
            break;
          }
          case 16: {
            TimestampUtc = input.ReadUInt32();
            break;
          }
          case 24: {
            PhotoCopiedToApp = input.ReadBool();
            break;
          }
          case 32: {
            ThumbCopiedToApp = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhotosInfoRequest : pb::IMessage<PhotosInfoRequest> {
    private static readonly pb::MessageParser<PhotosInfoRequest> _parser = new pb::MessageParser<PhotosInfoRequest>(() => new PhotosInfoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotosInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotosInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotosInfoRequest(PhotosInfoRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotosInfoRequest Clone() {
      return new PhotosInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotosInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotosInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotosInfoRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class PhotosInfoResponse : pb::IMessage<PhotosInfoResponse> {
    private static readonly pb::MessageParser<PhotosInfoResponse> _parser = new pb::MessageParser<PhotosInfoResponse>(() => new PhotosInfoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotosInfoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotosInfoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotosInfoResponse(PhotosInfoResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      photoInfos_ = other.photoInfos_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotosInfoResponse Clone() {
      return new PhotosInfoResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "photo_infos" field.</summary>
    public const int PhotoInfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Anki.Vector.ExternalInterface.PhotoInfo> _repeated_photoInfos_codec
        = pb::FieldCodec.ForMessage(18, global::Anki.Vector.ExternalInterface.PhotoInfo.Parser);
    private readonly pbc::RepeatedField<global::Anki.Vector.ExternalInterface.PhotoInfo> photoInfos_ = new pbc::RepeatedField<global::Anki.Vector.ExternalInterface.PhotoInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Anki.Vector.ExternalInterface.PhotoInfo> PhotoInfos {
      get { return photoInfos_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotosInfoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotosInfoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if(!photoInfos_.Equals(other.photoInfos_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      hash ^= photoInfos_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      photoInfos_.WriteTo(output, _repeated_photoInfos_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      size += photoInfos_.CalculateSize(_repeated_photoInfos_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotosInfoResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      photoInfos_.Add(other.photoInfos_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            photoInfos_.AddEntriesFrom(input, _repeated_photoInfos_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhotoRequest : pb::IMessage<PhotoRequest> {
    private static readonly pb::MessageParser<PhotoRequest> _parser = new pb::MessageParser<PhotoRequest>(() => new PhotoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoRequest(PhotoRequest other) : this() {
      photoId_ = other.photoId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoRequest Clone() {
      return new PhotoRequest(this);
    }

    /// <summary>Field number for the "photo_id" field.</summary>
    public const int PhotoIdFieldNumber = 1;
    private uint photoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhotoId {
      get { return photoId_; }
      set {
        photoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PhotoId != other.PhotoId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PhotoId != 0) hash ^= PhotoId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PhotoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PhotoId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PhotoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhotoId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotoRequest other) {
      if (other == null) {
        return;
      }
      if (other.PhotoId != 0) {
        PhotoId = other.PhotoId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PhotoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhotoPathMessage : pb::IMessage<PhotoPathMessage> {
    private static readonly pb::MessageParser<PhotoPathMessage> _parser = new pb::MessageParser<PhotoPathMessage>(() => new PhotoPathMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotoPathMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoPathMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoPathMessage(PhotoPathMessage other) : this() {
      success_ = other.success_;
      fullPath_ = other.fullPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoPathMessage Clone() {
      return new PhotoPathMessage(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "full_path" field.</summary>
    public const int FullPathFieldNumber = 2;
    private string fullPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullPath {
      get { return fullPath_; }
      set {
        fullPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotoPathMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotoPathMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (FullPath != other.FullPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (FullPath.Length != 0) hash ^= FullPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (FullPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FullPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (FullPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotoPathMessage other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.FullPath.Length != 0) {
        FullPath = other.FullPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            FullPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhotoResponse : pb::IMessage<PhotoResponse> {
    private static readonly pb::MessageParser<PhotoResponse> _parser = new pb::MessageParser<PhotoResponse>(() => new PhotoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoResponse(PhotoResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      success_ = other.success_;
      image_ = other.image_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoResponse Clone() {
      return new PhotoResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private pb::ByteString image_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Success != other.Success) return false;
      if (Image != other.Image) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotoResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            Image = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThumbnailRequest : pb::IMessage<ThumbnailRequest> {
    private static readonly pb::MessageParser<ThumbnailRequest> _parser = new pb::MessageParser<ThumbnailRequest>(() => new ThumbnailRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThumbnailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThumbnailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThumbnailRequest(ThumbnailRequest other) : this() {
      photoId_ = other.photoId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThumbnailRequest Clone() {
      return new ThumbnailRequest(this);
    }

    /// <summary>Field number for the "photo_id" field.</summary>
    public const int PhotoIdFieldNumber = 1;
    private uint photoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhotoId {
      get { return photoId_; }
      set {
        photoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThumbnailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThumbnailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PhotoId != other.PhotoId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PhotoId != 0) hash ^= PhotoId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PhotoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PhotoId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PhotoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhotoId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThumbnailRequest other) {
      if (other == null) {
        return;
      }
      if (other.PhotoId != 0) {
        PhotoId = other.PhotoId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PhotoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThumbnailPathMessage : pb::IMessage<ThumbnailPathMessage> {
    private static readonly pb::MessageParser<ThumbnailPathMessage> _parser = new pb::MessageParser<ThumbnailPathMessage>(() => new ThumbnailPathMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThumbnailPathMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThumbnailPathMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThumbnailPathMessage(ThumbnailPathMessage other) : this() {
      success_ = other.success_;
      fullPath_ = other.fullPath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThumbnailPathMessage Clone() {
      return new ThumbnailPathMessage(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "full_path" field.</summary>
    public const int FullPathFieldNumber = 2;
    private string fullPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullPath {
      get { return fullPath_; }
      set {
        fullPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThumbnailPathMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThumbnailPathMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (FullPath != other.FullPath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (FullPath.Length != 0) hash ^= FullPath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (FullPath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FullPath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (FullPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullPath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThumbnailPathMessage other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.FullPath.Length != 0) {
        FullPath = other.FullPath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            FullPath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ThumbnailResponse : pb::IMessage<ThumbnailResponse> {
    private static readonly pb::MessageParser<ThumbnailResponse> _parser = new pb::MessageParser<ThumbnailResponse>(() => new ThumbnailResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThumbnailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThumbnailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThumbnailResponse(ThumbnailResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      success_ = other.success_;
      image_ = other.image_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThumbnailResponse Clone() {
      return new ThumbnailResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 3;
    private pb::ByteString image_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThumbnailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThumbnailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Success != other.Success) return false;
      if (Image != other.Image) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (Image.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Image);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThumbnailResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
          case 26: {
            Image = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeletePhotoRequest : pb::IMessage<DeletePhotoRequest> {
    private static readonly pb::MessageParser<DeletePhotoRequest> _parser = new pb::MessageParser<DeletePhotoRequest>(() => new DeletePhotoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeletePhotoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePhotoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePhotoRequest(DeletePhotoRequest other) : this() {
      photoId_ = other.photoId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePhotoRequest Clone() {
      return new DeletePhotoRequest(this);
    }

    /// <summary>Field number for the "photo_id" field.</summary>
    public const int PhotoIdFieldNumber = 1;
    private uint photoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhotoId {
      get { return photoId_; }
      set {
        photoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeletePhotoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeletePhotoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PhotoId != other.PhotoId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PhotoId != 0) hash ^= PhotoId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PhotoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PhotoId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PhotoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhotoId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeletePhotoRequest other) {
      if (other == null) {
        return;
      }
      if (other.PhotoId != 0) {
        PhotoId = other.PhotoId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PhotoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeletePhotoResponse : pb::IMessage<DeletePhotoResponse> {
    private static readonly pb::MessageParser<DeletePhotoResponse> _parser = new pb::MessageParser<DeletePhotoResponse>(() => new DeletePhotoResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeletePhotoResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePhotoResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePhotoResponse(DeletePhotoResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeletePhotoResponse Clone() {
      return new DeletePhotoResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 2;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeletePhotoResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeletePhotoResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (Success != false) {
        output.WriteRawTag(16);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeletePhotoResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 16: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PhotoTaken : pb::IMessage<PhotoTaken> {
    private static readonly pb::MessageParser<PhotoTaken> _parser = new pb::MessageParser<PhotoTaken>(() => new PhotoTaken());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PhotoTaken> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoTaken() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoTaken(PhotoTaken other) : this() {
      photoId_ = other.photoId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PhotoTaken Clone() {
      return new PhotoTaken(this);
    }

    /// <summary>Field number for the "photo_id" field.</summary>
    public const int PhotoIdFieldNumber = 1;
    private uint photoId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PhotoId {
      get { return photoId_; }
      set {
        photoId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PhotoTaken);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PhotoTaken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PhotoId != other.PhotoId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PhotoId != 0) hash ^= PhotoId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PhotoId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PhotoId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PhotoId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PhotoId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PhotoTaken other) {
      if (other == null) {
        return;
      }
      if (other.PhotoId != 0) {
        PhotoId = other.PhotoId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PhotoId = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Struct containing all the information relevant to how a 
  /// path should be modified or traversed.
  /// </summary>
  public sealed partial class PathMotionProfile : pb::IMessage<PathMotionProfile> {
    private static readonly pb::MessageParser<PathMotionProfile> _parser = new pb::MessageParser<PathMotionProfile>(() => new PathMotionProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PathMotionProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathMotionProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathMotionProfile(PathMotionProfile other) : this() {
      speedMmps_ = other.speedMmps_;
      accelMmps2_ = other.accelMmps2_;
      decelMmps2_ = other.decelMmps2_;
      pointTurnSpeedRadPerSec_ = other.pointTurnSpeedRadPerSec_;
      pointTurnAccelRadPerSec2_ = other.pointTurnAccelRadPerSec2_;
      pointTurnDecelRadPerSec2_ = other.pointTurnDecelRadPerSec2_;
      dockSpeedMmps_ = other.dockSpeedMmps_;
      dockAccelMmps2_ = other.dockAccelMmps2_;
      dockDecelMmps2_ = other.dockDecelMmps2_;
      reverseSpeedMmps_ = other.reverseSpeedMmps_;
      isCustom_ = other.isCustom_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PathMotionProfile Clone() {
      return new PathMotionProfile(this);
    }

    /// <summary>Field number for the "speed_mmps" field.</summary>
    public const int SpeedMmpsFieldNumber = 1;
    private float speedMmps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedMmps {
      get { return speedMmps_; }
      set {
        speedMmps_ = value;
      }
    }

    /// <summary>Field number for the "accel_mmps2" field.</summary>
    public const int AccelMmps2FieldNumber = 2;
    private float accelMmps2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelMmps2 {
      get { return accelMmps2_; }
      set {
        accelMmps2_ = value;
      }
    }

    /// <summary>Field number for the "decel_mmps2" field.</summary>
    public const int DecelMmps2FieldNumber = 3;
    private float decelMmps2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecelMmps2 {
      get { return decelMmps2_; }
      set {
        decelMmps2_ = value;
      }
    }

    /// <summary>Field number for the "point_turn_speed_rad_per_sec" field.</summary>
    public const int PointTurnSpeedRadPerSecFieldNumber = 4;
    private float pointTurnSpeedRadPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PointTurnSpeedRadPerSec {
      get { return pointTurnSpeedRadPerSec_; }
      set {
        pointTurnSpeedRadPerSec_ = value;
      }
    }

    /// <summary>Field number for the "point_turn_accel_rad_per_sec2" field.</summary>
    public const int PointTurnAccelRadPerSec2FieldNumber = 5;
    private float pointTurnAccelRadPerSec2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PointTurnAccelRadPerSec2 {
      get { return pointTurnAccelRadPerSec2_; }
      set {
        pointTurnAccelRadPerSec2_ = value;
      }
    }

    /// <summary>Field number for the "point_turn_decel_rad_per_sec2" field.</summary>
    public const int PointTurnDecelRadPerSec2FieldNumber = 6;
    private float pointTurnDecelRadPerSec2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PointTurnDecelRadPerSec2 {
      get { return pointTurnDecelRadPerSec2_; }
      set {
        pointTurnDecelRadPerSec2_ = value;
      }
    }

    /// <summary>Field number for the "dock_speed_mmps" field.</summary>
    public const int DockSpeedMmpsFieldNumber = 7;
    private float dockSpeedMmps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DockSpeedMmps {
      get { return dockSpeedMmps_; }
      set {
        dockSpeedMmps_ = value;
      }
    }

    /// <summary>Field number for the "dock_accel_mmps2" field.</summary>
    public const int DockAccelMmps2FieldNumber = 8;
    private float dockAccelMmps2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DockAccelMmps2 {
      get { return dockAccelMmps2_; }
      set {
        dockAccelMmps2_ = value;
      }
    }

    /// <summary>Field number for the "dock_decel_mmps2" field.</summary>
    public const int DockDecelMmps2FieldNumber = 9;
    private float dockDecelMmps2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DockDecelMmps2 {
      get { return dockDecelMmps2_; }
      set {
        dockDecelMmps2_ = value;
      }
    }

    /// <summary>Field number for the "reverse_speed_mmps" field.</summary>
    public const int ReverseSpeedMmpsFieldNumber = 10;
    private float reverseSpeedMmps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ReverseSpeedMmps {
      get { return reverseSpeedMmps_; }
      set {
        reverseSpeedMmps_ = value;
      }
    }

    /// <summary>Field number for the "is_custom" field.</summary>
    public const int IsCustomFieldNumber = 11;
    private bool isCustom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCustom {
      get { return isCustom_; }
      set {
        isCustom_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PathMotionProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PathMotionProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedMmps, other.SpeedMmps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelMmps2, other.AccelMmps2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecelMmps2, other.DecelMmps2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointTurnSpeedRadPerSec, other.PointTurnSpeedRadPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointTurnAccelRadPerSec2, other.PointTurnAccelRadPerSec2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PointTurnDecelRadPerSec2, other.PointTurnDecelRadPerSec2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DockSpeedMmps, other.DockSpeedMmps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DockAccelMmps2, other.DockAccelMmps2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DockDecelMmps2, other.DockDecelMmps2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReverseSpeedMmps, other.ReverseSpeedMmps)) return false;
      if (IsCustom != other.IsCustom) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeedMmps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedMmps);
      if (AccelMmps2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelMmps2);
      if (DecelMmps2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecelMmps2);
      if (PointTurnSpeedRadPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointTurnSpeedRadPerSec);
      if (PointTurnAccelRadPerSec2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointTurnAccelRadPerSec2);
      if (PointTurnDecelRadPerSec2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PointTurnDecelRadPerSec2);
      if (DockSpeedMmps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DockSpeedMmps);
      if (DockAccelMmps2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DockAccelMmps2);
      if (DockDecelMmps2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DockDecelMmps2);
      if (ReverseSpeedMmps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReverseSpeedMmps);
      if (IsCustom != false) hash ^= IsCustom.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeedMmps != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SpeedMmps);
      }
      if (AccelMmps2 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(AccelMmps2);
      }
      if (DecelMmps2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DecelMmps2);
      }
      if (PointTurnSpeedRadPerSec != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(PointTurnSpeedRadPerSec);
      }
      if (PointTurnAccelRadPerSec2 != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(PointTurnAccelRadPerSec2);
      }
      if (PointTurnDecelRadPerSec2 != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(PointTurnDecelRadPerSec2);
      }
      if (DockSpeedMmps != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DockSpeedMmps);
      }
      if (DockAccelMmps2 != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DockAccelMmps2);
      }
      if (DockDecelMmps2 != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(DockDecelMmps2);
      }
      if (ReverseSpeedMmps != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(ReverseSpeedMmps);
      }
      if (IsCustom != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsCustom);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeedMmps != 0F) {
        size += 1 + 4;
      }
      if (AccelMmps2 != 0F) {
        size += 1 + 4;
      }
      if (DecelMmps2 != 0F) {
        size += 1 + 4;
      }
      if (PointTurnSpeedRadPerSec != 0F) {
        size += 1 + 4;
      }
      if (PointTurnAccelRadPerSec2 != 0F) {
        size += 1 + 4;
      }
      if (PointTurnDecelRadPerSec2 != 0F) {
        size += 1 + 4;
      }
      if (DockSpeedMmps != 0F) {
        size += 1 + 4;
      }
      if (DockAccelMmps2 != 0F) {
        size += 1 + 4;
      }
      if (DockDecelMmps2 != 0F) {
        size += 1 + 4;
      }
      if (ReverseSpeedMmps != 0F) {
        size += 1 + 4;
      }
      if (IsCustom != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PathMotionProfile other) {
      if (other == null) {
        return;
      }
      if (other.SpeedMmps != 0F) {
        SpeedMmps = other.SpeedMmps;
      }
      if (other.AccelMmps2 != 0F) {
        AccelMmps2 = other.AccelMmps2;
      }
      if (other.DecelMmps2 != 0F) {
        DecelMmps2 = other.DecelMmps2;
      }
      if (other.PointTurnSpeedRadPerSec != 0F) {
        PointTurnSpeedRadPerSec = other.PointTurnSpeedRadPerSec;
      }
      if (other.PointTurnAccelRadPerSec2 != 0F) {
        PointTurnAccelRadPerSec2 = other.PointTurnAccelRadPerSec2;
      }
      if (other.PointTurnDecelRadPerSec2 != 0F) {
        PointTurnDecelRadPerSec2 = other.PointTurnDecelRadPerSec2;
      }
      if (other.DockSpeedMmps != 0F) {
        DockSpeedMmps = other.DockSpeedMmps;
      }
      if (other.DockAccelMmps2 != 0F) {
        DockAccelMmps2 = other.DockAccelMmps2;
      }
      if (other.DockDecelMmps2 != 0F) {
        DockDecelMmps2 = other.DockDecelMmps2;
      }
      if (other.ReverseSpeedMmps != 0F) {
        ReverseSpeedMmps = other.ReverseSpeedMmps;
      }
      if (other.IsCustom != false) {
        IsCustom = other.IsCustom;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SpeedMmps = input.ReadFloat();
            break;
          }
          case 21: {
            AccelMmps2 = input.ReadFloat();
            break;
          }
          case 29: {
            DecelMmps2 = input.ReadFloat();
            break;
          }
          case 37: {
            PointTurnSpeedRadPerSec = input.ReadFloat();
            break;
          }
          case 45: {
            PointTurnAccelRadPerSec2 = input.ReadFloat();
            break;
          }
          case 53: {
            PointTurnDecelRadPerSec2 = input.ReadFloat();
            break;
          }
          case 61: {
            DockSpeedMmps = input.ReadFloat();
            break;
          }
          case 69: {
            DockAccelMmps2 = input.ReadFloat();
            break;
          }
          case 77: {
            DockDecelMmps2 = input.ReadFloat();
            break;
          }
          case 85: {
            ReverseSpeedMmps = input.ReadFloat();
            break;
          }
          case 88: {
            IsCustom = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// These codes are duplicated from actionResults.clad file and need to be kept in sync
  /// </summary>
  public sealed partial class ActionResult : pb::IMessage<ActionResult> {
    private static readonly pb::MessageParser<ActionResult> _parser = new pb::MessageParser<ActionResult>(() => new ActionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionResult(ActionResult other) : this() {
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActionResult Clone() {
      return new ActionResult(this);
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActionResult other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Code = (global::Anki.Vector.ExternalInterface.ActionResult.Types.ActionResultCode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ActionResult message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ActionResultCode {
        [pbr::OriginalName("ACTION_RESULT_SUCCESS")] ActionResultSuccess = 0,
        [pbr::OriginalName("ACTION_RESULT_RUNNING")] ActionResultRunning = 16777216,
        [pbr::OriginalName("ACTION_RESULT_CANCELLED_WHILE_RUNNING")] ActionResultCancelledWhileRunning = 33554432,
        [pbr::OriginalName("NOT_STARTED")] NotStarted = 33554433,
        [pbr::OriginalName("ABORT")] Abort = 50331648,
        [pbr::OriginalName("ANIM_ABORTED")] AnimAborted = 50331649,
        [pbr::OriginalName("BAD_MARKER")] BadMarker = 50331650,
        [pbr::OriginalName("BAD_MESSAGE_TAG")] BadMessageTag = 50331651,
        [pbr::OriginalName("BAD_OBJECT")] BadObject = 50331652,
        [pbr::OriginalName("BAD_POSE")] BadPose = 50331653,
        [pbr::OriginalName("BAD_TAG")] BadTag = 50331654,
        [pbr::OriginalName("CHARGER_UNPLUGGED_ABORT")] ChargerUnpluggedAbort = 50331655,
        [pbr::OriginalName("CLIFF_ALIGN_FAILED_TIMEOUT")] CliffAlignFailedTimeout = 50331656,
        [pbr::OriginalName("CLIFF_ALIGN_FAILED_NO_TURNING")] CliffAlignFailedNoTurning = 50331657,
        [pbr::OriginalName("CLIFF_ALIGN_FAILED_OVER_TURNING")] CliffAlignFailedOverTurning = 50331658,
        [pbr::OriginalName("CLIFF_ALIGN_FAILED_NO_WHITE")] CliffAlignFailedNoWhite = 50331659,
        [pbr::OriginalName("CLIFF_ALIGN_FAILED_STOPPED")] CliffAlignFailedStopped = 50331660,
        [pbr::OriginalName("FAILED_SETTING_CALIBRATION")] FailedSettingCalibration = 50331661,
        [pbr::OriginalName("FOLLOWING_PATH_BUT_NOT_TRAVERSING")] FollowingPathButNotTraversing = 50331662,
        [pbr::OriginalName("INTERRUPTED")] Interrupted = 50331663,
        [pbr::OriginalName("INVALID_OFF_TREADS_STATE")] InvalidOffTreadsState = 50331664,
        [pbr::OriginalName("MISMATCHED_UP_AXIS")] MismatchedUpAxis = 50331665,
        [pbr::OriginalName("NO_ANIM_NAME")] NoAnimName = 50331666,
        [pbr::OriginalName("NO_DISTANCE_SET")] NoDistanceSet = 50331667,
        [pbr::OriginalName("NO_FACE")] NoFace = 50331668,
        [pbr::OriginalName("NO_GOAL_SET")] NoGoalSet = 50331669,
        [pbr::OriginalName("NO_PREACTION_POSES")] NoPreactionPoses = 50331670,
        [pbr::OriginalName("NOT_CARRYING_OBJECT_ABORT")] NotCarryingObjectAbort = 50331671,
        [pbr::OriginalName("NOT_ON_CHARGER_ABORT")] NotOnChargerAbort = 50331672,
        [pbr::OriginalName("NULL_SUBACTION")] NullSubaction = 50331673,
        [pbr::OriginalName("PATH_PLANNING_FAILED_ABORT")] PathPlanningFailedAbort = 50331674,
        [pbr::OriginalName("PICKUP_OBJECT_UNEXPECTEDLY_MOVING")] PickupObjectUnexpectedlyMoving = 50331675,
        [pbr::OriginalName("SEND_MESSAGE_TO_ROBOT_FAILED")] SendMessageToRobotFailed = 50331676,
        [pbr::OriginalName("STILL_CARRYING_OBJECT")] StillCarryingObject = 50331677,
        [pbr::OriginalName("TIMEOUT")] Timeout = 50331678,
        [pbr::OriginalName("TRACKS_LOCKED")] TracksLocked = 50331679,
        [pbr::OriginalName("UNEXPECTED_DOCK_ACTION")] UnexpectedDockAction = 50331680,
        [pbr::OriginalName("UNKNOWN_TOOL_CODE")] UnknownToolCode = 50331681,
        [pbr::OriginalName("UPDATE_DERIVED_FAILED")] UpdateDerivedFailed = 50331682,
        [pbr::OriginalName("VISUAL_OBSERVATION_FAILED")] VisualObservationFailed = 50331683,
        [pbr::OriginalName("SHOULDNT_DRIVE_ON_CHARGER")] ShouldntDriveOnCharger = 50331684,
        [pbr::OriginalName("RETRY")] Retry = 67108864,
        [pbr::OriginalName("DID_NOT_REACH_PREACTION_POSE")] DidNotReachPreactionPose = 67108865,
        [pbr::OriginalName("FAILED_TRAVERSING_PATH")] FailedTraversingPath = 67108866,
        [pbr::OriginalName("LAST_PICK_AND_PLACE_FAILED")] LastPickAndPlaceFailed = 67108867,
        [pbr::OriginalName("MOTOR_STOPPED_MAKING_PROGRESS")] MotorStoppedMakingProgress = 67108868,
        [pbr::OriginalName("NOT_CARRYING_OBJECT_RETRY")] NotCarryingObjectRetry = 67108869,
        [pbr::OriginalName("NOT_ON_CHARGER_RETRY")] NotOnChargerRetry = 67108870,
        [pbr::OriginalName("PATH_PLANNING_FAILED_RETRY")] PathPlanningFailedRetry = 67108871,
        [pbr::OriginalName("PLACEMENT_GOAL_NOT_FREE")] PlacementGoalNotFree = 67108872,
        [pbr::OriginalName("PICKUP_OBJECT_UNEXPECTEDLY_NOT_MOVING")] PickupObjectUnexpectedlyNotMoving = 67108873,
        [pbr::OriginalName("STILL_ON_CHARGER")] StillOnCharger = 67108874,
        [pbr::OriginalName("UNEXPECTED_PITCH_ANGLE")] UnexpectedPitchAngle = 67108875,
      }

    }
    #endregion

  }

  /// <summary>
  /// GotoPose
  /// </summary>
  public sealed partial class GoToPoseRequest : pb::IMessage<GoToPoseRequest> {
    private static readonly pb::MessageParser<GoToPoseRequest> _parser = new pb::MessageParser<GoToPoseRequest>(() => new GoToPoseRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoToPoseRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToPoseRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToPoseRequest(GoToPoseRequest other) : this() {
      xMm_ = other.xMm_;
      yMm_ = other.yMm_;
      rad_ = other.rad_;
      motionProf_ = other.motionProf_ != null ? other.motionProf_.Clone() : null;
      idTag_ = other.idTag_;
      numRetries_ = other.numRetries_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToPoseRequest Clone() {
      return new GoToPoseRequest(this);
    }

    /// <summary>Field number for the "x_mm" field.</summary>
    public const int XMmFieldNumber = 1;
    private float xMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XMm {
      get { return xMm_; }
      set {
        xMm_ = value;
      }
    }

    /// <summary>Field number for the "y_mm" field.</summary>
    public const int YMmFieldNumber = 2;
    private float yMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float YMm {
      get { return yMm_; }
      set {
        yMm_ = value;
      }
    }

    /// <summary>Field number for the "rad" field.</summary>
    public const int RadFieldNumber = 3;
    private float rad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Rad {
      get { return rad_; }
      set {
        rad_ = value;
      }
    }

    /// <summary>Field number for the "motion_prof" field.</summary>
    public const int MotionProfFieldNumber = 4;
    private global::Anki.Vector.ExternalInterface.PathMotionProfile motionProf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.PathMotionProfile MotionProf {
      get { return motionProf_; }
      set {
        motionProf_ = value;
      }
    }

    /// <summary>Field number for the "id_tag" field.</summary>
    public const int IdTagFieldNumber = 5;
    private int idTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTag {
      get { return idTag_; }
      set {
        idTag_ = value;
      }
    }

    /// <summary>Field number for the "num_retries" field.</summary>
    public const int NumRetriesFieldNumber = 6;
    private int numRetries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRetries {
      get { return numRetries_; }
      set {
        numRetries_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoToPoseRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoToPoseRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XMm, other.XMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YMm, other.YMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rad, other.Rad)) return false;
      if (!object.Equals(MotionProf, other.MotionProf)) return false;
      if (IdTag != other.IdTag) return false;
      if (NumRetries != other.NumRetries) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XMm);
      if (YMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YMm);
      if (Rad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rad);
      if (motionProf_ != null) hash ^= MotionProf.GetHashCode();
      if (IdTag != 0) hash ^= IdTag.GetHashCode();
      if (NumRetries != 0) hash ^= NumRetries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XMm != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XMm);
      }
      if (YMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(YMm);
      }
      if (Rad != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Rad);
      }
      if (motionProf_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(MotionProf);
      }
      if (IdTag != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IdTag);
      }
      if (NumRetries != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumRetries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XMm != 0F) {
        size += 1 + 4;
      }
      if (YMm != 0F) {
        size += 1 + 4;
      }
      if (Rad != 0F) {
        size += 1 + 4;
      }
      if (motionProf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MotionProf);
      }
      if (IdTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTag);
      }
      if (NumRetries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRetries);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoToPoseRequest other) {
      if (other == null) {
        return;
      }
      if (other.XMm != 0F) {
        XMm = other.XMm;
      }
      if (other.YMm != 0F) {
        YMm = other.YMm;
      }
      if (other.Rad != 0F) {
        Rad = other.Rad;
      }
      if (other.motionProf_ != null) {
        if (motionProf_ == null) {
          MotionProf = new global::Anki.Vector.ExternalInterface.PathMotionProfile();
        }
        MotionProf.MergeFrom(other.MotionProf);
      }
      if (other.IdTag != 0) {
        IdTag = other.IdTag;
      }
      if (other.NumRetries != 0) {
        NumRetries = other.NumRetries;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            XMm = input.ReadFloat();
            break;
          }
          case 21: {
            YMm = input.ReadFloat();
            break;
          }
          case 29: {
            Rad = input.ReadFloat();
            break;
          }
          case 34: {
            if (motionProf_ == null) {
              MotionProf = new global::Anki.Vector.ExternalInterface.PathMotionProfile();
            }
            input.ReadMessage(MotionProf);
            break;
          }
          case 40: {
            IdTag = input.ReadInt32();
            break;
          }
          case 48: {
            NumRetries = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GoToPoseResponse : pb::IMessage<GoToPoseResponse> {
    private static readonly pb::MessageParser<GoToPoseResponse> _parser = new pb::MessageParser<GoToPoseResponse>(() => new GoToPoseResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GoToPoseResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToPoseResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToPoseResponse(GoToPoseResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GoToPoseResponse Clone() {
      return new GoToPoseResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ActionResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ActionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GoToPoseResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GoToPoseResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GoToPoseResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Anki.Vector.ExternalInterface.ActionResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            if (result_ == null) {
              Result = new global::Anki.Vector.ExternalInterface.ActionResult();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DockWithCubeRequest : pb::IMessage<DockWithCubeRequest> {
    private static readonly pb::MessageParser<DockWithCubeRequest> _parser = new pb::MessageParser<DockWithCubeRequest>(() => new DockWithCubeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DockWithCubeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockWithCubeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockWithCubeRequest(DockWithCubeRequest other) : this() {
      objectId_ = other.objectId_;
      distanceFromMarkerMm_ = other.distanceFromMarkerMm_;
      approachAngleRad_ = other.approachAngleRad_;
      alignmentType_ = other.alignmentType_;
      useApproachAngle_ = other.useApproachAngle_;
      usePreDockPose_ = other.usePreDockPose_;
      motionProf_ = other.motionProf_ != null ? other.motionProf_.Clone() : null;
      idTag_ = other.idTag_;
      numRetries_ = other.numRetries_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockWithCubeRequest Clone() {
      return new DockWithCubeRequest(this);
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 1;
    private int objectId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ObjectId {
      get { return objectId_; }
      set {
        objectId_ = value;
      }
    }

    /// <summary>Field number for the "distance_from_marker_mm" field.</summary>
    public const int DistanceFromMarkerMmFieldNumber = 2;
    private float distanceFromMarkerMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DistanceFromMarkerMm {
      get { return distanceFromMarkerMm_; }
      set {
        distanceFromMarkerMm_ = value;
      }
    }

    /// <summary>Field number for the "approach_angle_rad" field.</summary>
    public const int ApproachAngleRadFieldNumber = 3;
    private float approachAngleRad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ApproachAngleRad {
      get { return approachAngleRad_; }
      set {
        approachAngleRad_ = value;
      }
    }

    /// <summary>Field number for the "alignment_type" field.</summary>
    public const int AlignmentTypeFieldNumber = 4;
    private global::Anki.Vector.ExternalInterface.AlignmentType alignmentType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.AlignmentType AlignmentType {
      get { return alignmentType_; }
      set {
        alignmentType_ = value;
      }
    }

    /// <summary>Field number for the "use_approach_angle" field.</summary>
    public const int UseApproachAngleFieldNumber = 5;
    private bool useApproachAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseApproachAngle {
      get { return useApproachAngle_; }
      set {
        useApproachAngle_ = value;
      }
    }

    /// <summary>Field number for the "use_pre_dock_pose" field.</summary>
    public const int UsePreDockPoseFieldNumber = 6;
    private bool usePreDockPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UsePreDockPose {
      get { return usePreDockPose_; }
      set {
        usePreDockPose_ = value;
      }
    }

    /// <summary>Field number for the "motion_prof" field.</summary>
    public const int MotionProfFieldNumber = 7;
    private global::Anki.Vector.ExternalInterface.PathMotionProfile motionProf_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.PathMotionProfile MotionProf {
      get { return motionProf_; }
      set {
        motionProf_ = value;
      }
    }

    /// <summary>Field number for the "id_tag" field.</summary>
    public const int IdTagFieldNumber = 8;
    private int idTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTag {
      get { return idTag_; }
      set {
        idTag_ = value;
      }
    }

    /// <summary>Field number for the "num_retries" field.</summary>
    public const int NumRetriesFieldNumber = 9;
    private int numRetries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRetries {
      get { return numRetries_; }
      set {
        numRetries_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DockWithCubeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DockWithCubeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ObjectId != other.ObjectId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DistanceFromMarkerMm, other.DistanceFromMarkerMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ApproachAngleRad, other.ApproachAngleRad)) return false;
      if (AlignmentType != other.AlignmentType) return false;
      if (UseApproachAngle != other.UseApproachAngle) return false;
      if (UsePreDockPose != other.UsePreDockPose) return false;
      if (!object.Equals(MotionProf, other.MotionProf)) return false;
      if (IdTag != other.IdTag) return false;
      if (NumRetries != other.NumRetries) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
      if (DistanceFromMarkerMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DistanceFromMarkerMm);
      if (ApproachAngleRad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ApproachAngleRad);
      if (AlignmentType != 0) hash ^= AlignmentType.GetHashCode();
      if (UseApproachAngle != false) hash ^= UseApproachAngle.GetHashCode();
      if (UsePreDockPose != false) hash ^= UsePreDockPose.GetHashCode();
      if (motionProf_ != null) hash ^= MotionProf.GetHashCode();
      if (IdTag != 0) hash ^= IdTag.GetHashCode();
      if (NumRetries != 0) hash ^= NumRetries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ObjectId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ObjectId);
      }
      if (DistanceFromMarkerMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DistanceFromMarkerMm);
      }
      if (ApproachAngleRad != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ApproachAngleRad);
      }
      if (AlignmentType != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) AlignmentType);
      }
      if (UseApproachAngle != false) {
        output.WriteRawTag(40);
        output.WriteBool(UseApproachAngle);
      }
      if (UsePreDockPose != false) {
        output.WriteRawTag(48);
        output.WriteBool(UsePreDockPose);
      }
      if (motionProf_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(MotionProf);
      }
      if (IdTag != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(IdTag);
      }
      if (NumRetries != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NumRetries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ObjectId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjectId);
      }
      if (DistanceFromMarkerMm != 0F) {
        size += 1 + 4;
      }
      if (ApproachAngleRad != 0F) {
        size += 1 + 4;
      }
      if (AlignmentType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AlignmentType);
      }
      if (UseApproachAngle != false) {
        size += 1 + 1;
      }
      if (UsePreDockPose != false) {
        size += 1 + 1;
      }
      if (motionProf_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MotionProf);
      }
      if (IdTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTag);
      }
      if (NumRetries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRetries);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DockWithCubeRequest other) {
      if (other == null) {
        return;
      }
      if (other.ObjectId != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.DistanceFromMarkerMm != 0F) {
        DistanceFromMarkerMm = other.DistanceFromMarkerMm;
      }
      if (other.ApproachAngleRad != 0F) {
        ApproachAngleRad = other.ApproachAngleRad;
      }
      if (other.AlignmentType != 0) {
        AlignmentType = other.AlignmentType;
      }
      if (other.UseApproachAngle != false) {
        UseApproachAngle = other.UseApproachAngle;
      }
      if (other.UsePreDockPose != false) {
        UsePreDockPose = other.UsePreDockPose;
      }
      if (other.motionProf_ != null) {
        if (motionProf_ == null) {
          MotionProf = new global::Anki.Vector.ExternalInterface.PathMotionProfile();
        }
        MotionProf.MergeFrom(other.MotionProf);
      }
      if (other.IdTag != 0) {
        IdTag = other.IdTag;
      }
      if (other.NumRetries != 0) {
        NumRetries = other.NumRetries;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ObjectId = input.ReadInt32();
            break;
          }
          case 21: {
            DistanceFromMarkerMm = input.ReadFloat();
            break;
          }
          case 29: {
            ApproachAngleRad = input.ReadFloat();
            break;
          }
          case 32: {
            AlignmentType = (global::Anki.Vector.ExternalInterface.AlignmentType) input.ReadEnum();
            break;
          }
          case 40: {
            UseApproachAngle = input.ReadBool();
            break;
          }
          case 48: {
            UsePreDockPose = input.ReadBool();
            break;
          }
          case 58: {
            if (motionProf_ == null) {
              MotionProf = new global::Anki.Vector.ExternalInterface.PathMotionProfile();
            }
            input.ReadMessage(MotionProf);
            break;
          }
          case 64: {
            IdTag = input.ReadInt32();
            break;
          }
          case 72: {
            NumRetries = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DockWithCubeResponse : pb::IMessage<DockWithCubeResponse> {
    private static readonly pb::MessageParser<DockWithCubeResponse> _parser = new pb::MessageParser<DockWithCubeResponse>(() => new DockWithCubeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DockWithCubeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockWithCubeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockWithCubeResponse(DockWithCubeResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DockWithCubeResponse Clone() {
      return new DockWithCubeResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ActionResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ActionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DockWithCubeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DockWithCubeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DockWithCubeResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Anki.Vector.ExternalInterface.ActionResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            if (result_ == null) {
              Result = new global::Anki.Vector.ExternalInterface.ActionResult();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DriveStraightRequest : pb::IMessage<DriveStraightRequest> {
    private static readonly pb::MessageParser<DriveStraightRequest> _parser = new pb::MessageParser<DriveStraightRequest>(() => new DriveStraightRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriveStraightRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveStraightRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveStraightRequest(DriveStraightRequest other) : this() {
      speedMmps_ = other.speedMmps_;
      distMm_ = other.distMm_;
      shouldPlayAnimation_ = other.shouldPlayAnimation_;
      idTag_ = other.idTag_;
      numRetries_ = other.numRetries_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveStraightRequest Clone() {
      return new DriveStraightRequest(this);
    }

    /// <summary>Field number for the "speed_mmps" field.</summary>
    public const int SpeedMmpsFieldNumber = 1;
    private float speedMmps_;
    /// <summary>
    /// Speed should be positive
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedMmps {
      get { return speedMmps_; }
      set {
        speedMmps_ = value;
      }
    }

    /// <summary>Field number for the "dist_mm" field.</summary>
    public const int DistMmFieldNumber = 2;
    private float distMm_;
    /// <summary>
    /// Use +ve for forward, -ve for backward
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DistMm {
      get { return distMm_; }
      set {
        distMm_ = value;
      }
    }

    /// <summary>Field number for the "should_play_animation" field.</summary>
    public const int ShouldPlayAnimationFieldNumber = 3;
    private bool shouldPlayAnimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShouldPlayAnimation {
      get { return shouldPlayAnimation_; }
      set {
        shouldPlayAnimation_ = value;
      }
    }

    /// <summary>Field number for the "id_tag" field.</summary>
    public const int IdTagFieldNumber = 4;
    private int idTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTag {
      get { return idTag_; }
      set {
        idTag_ = value;
      }
    }

    /// <summary>Field number for the "num_retries" field.</summary>
    public const int NumRetriesFieldNumber = 5;
    private int numRetries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRetries {
      get { return numRetries_; }
      set {
        numRetries_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriveStraightRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriveStraightRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedMmps, other.SpeedMmps)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DistMm, other.DistMm)) return false;
      if (ShouldPlayAnimation != other.ShouldPlayAnimation) return false;
      if (IdTag != other.IdTag) return false;
      if (NumRetries != other.NumRetries) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpeedMmps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedMmps);
      if (DistMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DistMm);
      if (ShouldPlayAnimation != false) hash ^= ShouldPlayAnimation.GetHashCode();
      if (IdTag != 0) hash ^= IdTag.GetHashCode();
      if (NumRetries != 0) hash ^= NumRetries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpeedMmps != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SpeedMmps);
      }
      if (DistMm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DistMm);
      }
      if (ShouldPlayAnimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(ShouldPlayAnimation);
      }
      if (IdTag != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IdTag);
      }
      if (NumRetries != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NumRetries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpeedMmps != 0F) {
        size += 1 + 4;
      }
      if (DistMm != 0F) {
        size += 1 + 4;
      }
      if (ShouldPlayAnimation != false) {
        size += 1 + 1;
      }
      if (IdTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTag);
      }
      if (NumRetries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRetries);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriveStraightRequest other) {
      if (other == null) {
        return;
      }
      if (other.SpeedMmps != 0F) {
        SpeedMmps = other.SpeedMmps;
      }
      if (other.DistMm != 0F) {
        DistMm = other.DistMm;
      }
      if (other.ShouldPlayAnimation != false) {
        ShouldPlayAnimation = other.ShouldPlayAnimation;
      }
      if (other.IdTag != 0) {
        IdTag = other.IdTag;
      }
      if (other.NumRetries != 0) {
        NumRetries = other.NumRetries;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            SpeedMmps = input.ReadFloat();
            break;
          }
          case 21: {
            DistMm = input.ReadFloat();
            break;
          }
          case 24: {
            ShouldPlayAnimation = input.ReadBool();
            break;
          }
          case 32: {
            IdTag = input.ReadInt32();
            break;
          }
          case 40: {
            NumRetries = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DriveStraightResponse : pb::IMessage<DriveStraightResponse> {
    private static readonly pb::MessageParser<DriveStraightResponse> _parser = new pb::MessageParser<DriveStraightResponse>(() => new DriveStraightResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DriveStraightResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveStraightResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveStraightResponse(DriveStraightResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DriveStraightResponse Clone() {
      return new DriveStraightResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ActionResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ActionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DriveStraightResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DriveStraightResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DriveStraightResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Anki.Vector.ExternalInterface.ActionResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            if (result_ == null) {
              Result = new global::Anki.Vector.ExternalInterface.ActionResult();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TurnInPlace
  /// If isAbsolute == 0, turns the specified number of radians, relative to the robot's current heading*
  /// If isAbsolute != 0, turns to the specified absolute orientation.
  /// </summary>
  public sealed partial class TurnInPlaceRequest : pb::IMessage<TurnInPlaceRequest> {
    private static readonly pb::MessageParser<TurnInPlaceRequest> _parser = new pb::MessageParser<TurnInPlaceRequest>(() => new TurnInPlaceRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnInPlaceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnInPlaceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnInPlaceRequest(TurnInPlaceRequest other) : this() {
      angleRad_ = other.angleRad_;
      speedRadPerSec_ = other.speedRadPerSec_;
      accelRadPerSec2_ = other.accelRadPerSec2_;
      tolRad_ = other.tolRad_;
      isAbsolute_ = other.isAbsolute_;
      idTag_ = other.idTag_;
      numRetries_ = other.numRetries_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnInPlaceRequest Clone() {
      return new TurnInPlaceRequest(this);
    }

    /// <summary>Field number for the "angle_rad" field.</summary>
    public const int AngleRadFieldNumber = 1;
    private float angleRad_;
    /// <summary>
    /// relative mode: positive turns left negative turns right
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleRad {
      get { return angleRad_; }
      set {
        angleRad_ = value;
      }
    }

    /// <summary>Field number for the "speed_rad_per_sec" field.</summary>
    public const int SpeedRadPerSecFieldNumber = 2;
    private float speedRadPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpeedRadPerSec {
      get { return speedRadPerSec_; }
      set {
        speedRadPerSec_ = value;
      }
    }

    /// <summary>Field number for the "accel_rad_per_sec2" field.</summary>
    public const int AccelRadPerSec2FieldNumber = 3;
    private float accelRadPerSec2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelRadPerSec2 {
      get { return accelRadPerSec2_; }
      set {
        accelRadPerSec2_ = value;
      }
    }

    /// <summary>Field number for the "tol_rad" field.</summary>
    public const int TolRadFieldNumber = 4;
    private float tolRad_;
    /// <summary>
    /// This should be no smaller than POINT_TURN_ANGLE_TOL (DEG_TO_RAD(2.f)).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TolRad {
      get { return tolRad_; }
      set {
        tolRad_ = value;
      }
    }

    /// <summary>Field number for the "is_absolute" field.</summary>
    public const int IsAbsoluteFieldNumber = 5;
    private uint isAbsolute_;
    /// <summary>
    /// Smaller values are ignored except 0 which is interpreted to mean
    /// default tolerance of POINT_TURN_ANGLE_TOL.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IsAbsolute {
      get { return isAbsolute_; }
      set {
        isAbsolute_ = value;
      }
    }

    /// <summary>Field number for the "id_tag" field.</summary>
    public const int IdTagFieldNumber = 6;
    private int idTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTag {
      get { return idTag_; }
      set {
        idTag_ = value;
      }
    }

    /// <summary>Field number for the "num_retries" field.</summary>
    public const int NumRetriesFieldNumber = 7;
    private int numRetries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRetries {
      get { return numRetries_; }
      set {
        numRetries_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnInPlaceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnInPlaceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleRad, other.AngleRad)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SpeedRadPerSec, other.SpeedRadPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelRadPerSec2, other.AccelRadPerSec2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TolRad, other.TolRad)) return false;
      if (IsAbsolute != other.IsAbsolute) return false;
      if (IdTag != other.IdTag) return false;
      if (NumRetries != other.NumRetries) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AngleRad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleRad);
      if (SpeedRadPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SpeedRadPerSec);
      if (AccelRadPerSec2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelRadPerSec2);
      if (TolRad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TolRad);
      if (IsAbsolute != 0) hash ^= IsAbsolute.GetHashCode();
      if (IdTag != 0) hash ^= IdTag.GetHashCode();
      if (NumRetries != 0) hash ^= NumRetries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AngleRad != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AngleRad);
      }
      if (SpeedRadPerSec != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SpeedRadPerSec);
      }
      if (AccelRadPerSec2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AccelRadPerSec2);
      }
      if (TolRad != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TolRad);
      }
      if (IsAbsolute != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(IsAbsolute);
      }
      if (IdTag != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IdTag);
      }
      if (NumRetries != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(NumRetries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AngleRad != 0F) {
        size += 1 + 4;
      }
      if (SpeedRadPerSec != 0F) {
        size += 1 + 4;
      }
      if (AccelRadPerSec2 != 0F) {
        size += 1 + 4;
      }
      if (TolRad != 0F) {
        size += 1 + 4;
      }
      if (IsAbsolute != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IsAbsolute);
      }
      if (IdTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTag);
      }
      if (NumRetries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRetries);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnInPlaceRequest other) {
      if (other == null) {
        return;
      }
      if (other.AngleRad != 0F) {
        AngleRad = other.AngleRad;
      }
      if (other.SpeedRadPerSec != 0F) {
        SpeedRadPerSec = other.SpeedRadPerSec;
      }
      if (other.AccelRadPerSec2 != 0F) {
        AccelRadPerSec2 = other.AccelRadPerSec2;
      }
      if (other.TolRad != 0F) {
        TolRad = other.TolRad;
      }
      if (other.IsAbsolute != 0) {
        IsAbsolute = other.IsAbsolute;
      }
      if (other.IdTag != 0) {
        IdTag = other.IdTag;
      }
      if (other.NumRetries != 0) {
        NumRetries = other.NumRetries;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AngleRad = input.ReadFloat();
            break;
          }
          case 21: {
            SpeedRadPerSec = input.ReadFloat();
            break;
          }
          case 29: {
            AccelRadPerSec2 = input.ReadFloat();
            break;
          }
          case 37: {
            TolRad = input.ReadFloat();
            break;
          }
          case 40: {
            IsAbsolute = input.ReadUInt32();
            break;
          }
          case 48: {
            IdTag = input.ReadInt32();
            break;
          }
          case 56: {
            NumRetries = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TurnInPlaceResponse : pb::IMessage<TurnInPlaceResponse> {
    private static readonly pb::MessageParser<TurnInPlaceResponse> _parser = new pb::MessageParser<TurnInPlaceResponse>(() => new TurnInPlaceResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TurnInPlaceResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnInPlaceResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnInPlaceResponse(TurnInPlaceResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TurnInPlaceResponse Clone() {
      return new TurnInPlaceResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ActionResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ActionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TurnInPlaceResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TurnInPlaceResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TurnInPlaceResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Anki.Vector.ExternalInterface.ActionResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            if (result_ == null) {
              Result = new global::Anki.Vector.ExternalInterface.ActionResult();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SetHeadAngle
  /// </summary>
  public sealed partial class SetHeadAngleRequest : pb::IMessage<SetHeadAngleRequest> {
    private static readonly pb::MessageParser<SetHeadAngleRequest> _parser = new pb::MessageParser<SetHeadAngleRequest>(() => new SetHeadAngleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetHeadAngleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHeadAngleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHeadAngleRequest(SetHeadAngleRequest other) : this() {
      angleRad_ = other.angleRad_;
      maxSpeedRadPerSec_ = other.maxSpeedRadPerSec_;
      accelRadPerSec2_ = other.accelRadPerSec2_;
      durationSec_ = other.durationSec_;
      idTag_ = other.idTag_;
      numRetries_ = other.numRetries_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHeadAngleRequest Clone() {
      return new SetHeadAngleRequest(this);
    }

    /// <summary>Field number for the "angle_rad" field.</summary>
    public const int AngleRadFieldNumber = 1;
    private float angleRad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AngleRad {
      get { return angleRad_; }
      set {
        angleRad_ = value;
      }
    }

    /// <summary>Field number for the "max_speed_rad_per_sec" field.</summary>
    public const int MaxSpeedRadPerSecFieldNumber = 2;
    private float maxSpeedRadPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeedRadPerSec {
      get { return maxSpeedRadPerSec_; }
      set {
        maxSpeedRadPerSec_ = value;
      }
    }

    /// <summary>Field number for the "accel_rad_per_sec2" field.</summary>
    public const int AccelRadPerSec2FieldNumber = 3;
    private float accelRadPerSec2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelRadPerSec2 {
      get { return accelRadPerSec2_; }
      set {
        accelRadPerSec2_ = value;
      }
    }

    /// <summary>Field number for the "duration_sec" field.</summary>
    public const int DurationSecFieldNumber = 4;
    private float durationSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DurationSec {
      get { return durationSec_; }
      set {
        durationSec_ = value;
      }
    }

    /// <summary>Field number for the "id_tag" field.</summary>
    public const int IdTagFieldNumber = 5;
    private int idTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTag {
      get { return idTag_; }
      set {
        idTag_ = value;
      }
    }

    /// <summary>Field number for the "num_retries" field.</summary>
    public const int NumRetriesFieldNumber = 6;
    private int numRetries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRetries {
      get { return numRetries_; }
      set {
        numRetries_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetHeadAngleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetHeadAngleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AngleRad, other.AngleRad)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeedRadPerSec, other.MaxSpeedRadPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelRadPerSec2, other.AccelRadPerSec2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DurationSec, other.DurationSec)) return false;
      if (IdTag != other.IdTag) return false;
      if (NumRetries != other.NumRetries) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AngleRad != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AngleRad);
      if (MaxSpeedRadPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeedRadPerSec);
      if (AccelRadPerSec2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelRadPerSec2);
      if (DurationSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DurationSec);
      if (IdTag != 0) hash ^= IdTag.GetHashCode();
      if (NumRetries != 0) hash ^= NumRetries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AngleRad != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(AngleRad);
      }
      if (MaxSpeedRadPerSec != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxSpeedRadPerSec);
      }
      if (AccelRadPerSec2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AccelRadPerSec2);
      }
      if (DurationSec != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DurationSec);
      }
      if (IdTag != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IdTag);
      }
      if (NumRetries != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumRetries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AngleRad != 0F) {
        size += 1 + 4;
      }
      if (MaxSpeedRadPerSec != 0F) {
        size += 1 + 4;
      }
      if (AccelRadPerSec2 != 0F) {
        size += 1 + 4;
      }
      if (DurationSec != 0F) {
        size += 1 + 4;
      }
      if (IdTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTag);
      }
      if (NumRetries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRetries);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetHeadAngleRequest other) {
      if (other == null) {
        return;
      }
      if (other.AngleRad != 0F) {
        AngleRad = other.AngleRad;
      }
      if (other.MaxSpeedRadPerSec != 0F) {
        MaxSpeedRadPerSec = other.MaxSpeedRadPerSec;
      }
      if (other.AccelRadPerSec2 != 0F) {
        AccelRadPerSec2 = other.AccelRadPerSec2;
      }
      if (other.DurationSec != 0F) {
        DurationSec = other.DurationSec;
      }
      if (other.IdTag != 0) {
        IdTag = other.IdTag;
      }
      if (other.NumRetries != 0) {
        NumRetries = other.NumRetries;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            AngleRad = input.ReadFloat();
            break;
          }
          case 21: {
            MaxSpeedRadPerSec = input.ReadFloat();
            break;
          }
          case 29: {
            AccelRadPerSec2 = input.ReadFloat();
            break;
          }
          case 37: {
            DurationSec = input.ReadFloat();
            break;
          }
          case 40: {
            IdTag = input.ReadInt32();
            break;
          }
          case 48: {
            NumRetries = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetHeadAngleResponse : pb::IMessage<SetHeadAngleResponse> {
    private static readonly pb::MessageParser<SetHeadAngleResponse> _parser = new pb::MessageParser<SetHeadAngleResponse>(() => new SetHeadAngleResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetHeadAngleResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHeadAngleResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHeadAngleResponse(SetHeadAngleResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetHeadAngleResponse Clone() {
      return new SetHeadAngleResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ActionResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ActionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetHeadAngleResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetHeadAngleResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetHeadAngleResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Anki.Vector.ExternalInterface.ActionResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            if (result_ == null) {
              Result = new global::Anki.Vector.ExternalInterface.ActionResult();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// SetLiftHeight
  /// </summary>
  public sealed partial class SetLiftHeightRequest : pb::IMessage<SetLiftHeightRequest> {
    private static readonly pb::MessageParser<SetLiftHeightRequest> _parser = new pb::MessageParser<SetLiftHeightRequest>(() => new SetLiftHeightRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetLiftHeightRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiftHeightRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiftHeightRequest(SetLiftHeightRequest other) : this() {
      heightMm_ = other.heightMm_;
      maxSpeedRadPerSec_ = other.maxSpeedRadPerSec_;
      accelRadPerSec2_ = other.accelRadPerSec2_;
      durationSec_ = other.durationSec_;
      idTag_ = other.idTag_;
      numRetries_ = other.numRetries_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiftHeightRequest Clone() {
      return new SetLiftHeightRequest(this);
    }

    /// <summary>Field number for the "height_mm" field.</summary>
    public const int HeightMmFieldNumber = 1;
    private float heightMm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightMm {
      get { return heightMm_; }
      set {
        heightMm_ = value;
      }
    }

    /// <summary>Field number for the "max_speed_rad_per_sec" field.</summary>
    public const int MaxSpeedRadPerSecFieldNumber = 2;
    private float maxSpeedRadPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeedRadPerSec {
      get { return maxSpeedRadPerSec_; }
      set {
        maxSpeedRadPerSec_ = value;
      }
    }

    /// <summary>Field number for the "accel_rad_per_sec2" field.</summary>
    public const int AccelRadPerSec2FieldNumber = 3;
    private float accelRadPerSec2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccelRadPerSec2 {
      get { return accelRadPerSec2_; }
      set {
        accelRadPerSec2_ = value;
      }
    }

    /// <summary>Field number for the "duration_sec" field.</summary>
    public const int DurationSecFieldNumber = 4;
    private float durationSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DurationSec {
      get { return durationSec_; }
      set {
        durationSec_ = value;
      }
    }

    /// <summary>Field number for the "id_tag" field.</summary>
    public const int IdTagFieldNumber = 5;
    private int idTag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdTag {
      get { return idTag_; }
      set {
        idTag_ = value;
      }
    }

    /// <summary>Field number for the "num_retries" field.</summary>
    public const int NumRetriesFieldNumber = 6;
    private int numRetries_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRetries {
      get { return numRetries_; }
      set {
        numRetries_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetLiftHeightRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetLiftHeightRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HeightMm, other.HeightMm)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeedRadPerSec, other.MaxSpeedRadPerSec)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelRadPerSec2, other.AccelRadPerSec2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DurationSec, other.DurationSec)) return false;
      if (IdTag != other.IdTag) return false;
      if (NumRetries != other.NumRetries) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HeightMm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HeightMm);
      if (MaxSpeedRadPerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeedRadPerSec);
      if (AccelRadPerSec2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelRadPerSec2);
      if (DurationSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DurationSec);
      if (IdTag != 0) hash ^= IdTag.GetHashCode();
      if (NumRetries != 0) hash ^= NumRetries.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HeightMm != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(HeightMm);
      }
      if (MaxSpeedRadPerSec != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MaxSpeedRadPerSec);
      }
      if (AccelRadPerSec2 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AccelRadPerSec2);
      }
      if (DurationSec != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DurationSec);
      }
      if (IdTag != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(IdTag);
      }
      if (NumRetries != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumRetries);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HeightMm != 0F) {
        size += 1 + 4;
      }
      if (MaxSpeedRadPerSec != 0F) {
        size += 1 + 4;
      }
      if (AccelRadPerSec2 != 0F) {
        size += 1 + 4;
      }
      if (DurationSec != 0F) {
        size += 1 + 4;
      }
      if (IdTag != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdTag);
      }
      if (NumRetries != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRetries);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetLiftHeightRequest other) {
      if (other == null) {
        return;
      }
      if (other.HeightMm != 0F) {
        HeightMm = other.HeightMm;
      }
      if (other.MaxSpeedRadPerSec != 0F) {
        MaxSpeedRadPerSec = other.MaxSpeedRadPerSec;
      }
      if (other.AccelRadPerSec2 != 0F) {
        AccelRadPerSec2 = other.AccelRadPerSec2;
      }
      if (other.DurationSec != 0F) {
        DurationSec = other.DurationSec;
      }
      if (other.IdTag != 0) {
        IdTag = other.IdTag;
      }
      if (other.NumRetries != 0) {
        NumRetries = other.NumRetries;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            HeightMm = input.ReadFloat();
            break;
          }
          case 21: {
            MaxSpeedRadPerSec = input.ReadFloat();
            break;
          }
          case 29: {
            AccelRadPerSec2 = input.ReadFloat();
            break;
          }
          case 37: {
            DurationSec = input.ReadFloat();
            break;
          }
          case 40: {
            IdTag = input.ReadInt32();
            break;
          }
          case 48: {
            NumRetries = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetLiftHeightResponse : pb::IMessage<SetLiftHeightResponse> {
    private static readonly pb::MessageParser<SetLiftHeightResponse> _parser = new pb::MessageParser<SetLiftHeightResponse>(() => new SetLiftHeightResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetLiftHeightResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiftHeightResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiftHeightResponse(SetLiftHeightResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      result_ = other.result_ != null ? other.result_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetLiftHeightResponse Clone() {
      return new SetLiftHeightResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.ActionResult result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ActionResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetLiftHeightResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetLiftHeightResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(Result, other.Result)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (result_ != null) hash ^= Result.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (result_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Result);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (result_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetLiftHeightResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.result_ != null) {
        if (result_ == null) {
          Result = new global::Anki.Vector.ExternalInterface.ActionResult();
        }
        Result.MergeFrom(other.Result);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            if (result_ == null) {
              Result = new global::Anki.Vector.ExternalInterface.ActionResult();
            }
            input.ReadMessage(Result);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkStats : pb::IMessage<NetworkStats> {
    private static readonly pb::MessageParser<NetworkStats> _parser = new pb::MessageParser<NetworkStats>(() => new NetworkStats());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkStats> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStats() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStats(NetworkStats other) : this() {
      gNetStat1NumConnections_ = other.gNetStat1NumConnections_;
      gNetStat2LatencyAvg_ = other.gNetStat2LatencyAvg_;
      gNetStat3LatencySd_ = other.gNetStat3LatencySd_;
      gNetStat4LatencyMin_ = other.gNetStat4LatencyMin_;
      gNetStat5LatencyMax_ = other.gNetStat5LatencyMax_;
      gNetStat6PingArrivedPc_ = other.gNetStat6PingArrivedPc_;
      gNetStat7ExtQueuedAvgMs_ = other.gNetStat7ExtQueuedAvgMs_;
      gNetStat8ExtQueuedMinMs_ = other.gNetStat8ExtQueuedMinMs_;
      gNetStat9ExtQueuedMaxMs_ = other.gNetStat9ExtQueuedMaxMs_;
      gNetStataQueuedAvgMs_ = other.gNetStataQueuedAvgMs_;
      gNetStatbQueuedMinMs_ = other.gNetStatbQueuedMinMs_;
      gNetStatcQueuedMaxMs_ = other.gNetStatcQueuedMaxMs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStats Clone() {
      return new NetworkStats(this);
    }

    /// <summary>Field number for the "g_net_stat1_num_connections" field.</summary>
    public const int GNetStat1NumConnectionsFieldNumber = 1;
    private int gNetStat1NumConnections_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GNetStat1NumConnections {
      get { return gNetStat1NumConnections_; }
      set {
        gNetStat1NumConnections_ = value;
      }
    }

    /// <summary>Field number for the "g_net_stat2_latency_avg" field.</summary>
    public const int GNetStat2LatencyAvgFieldNumber = 2;
    private float gNetStat2LatencyAvg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStat2LatencyAvg {
      get { return gNetStat2LatencyAvg_; }
      set {
        gNetStat2LatencyAvg_ = value;
      }
    }

    /// <summary>Field number for the "g_net_stat3_latency_sd" field.</summary>
    public const int GNetStat3LatencySdFieldNumber = 3;
    private float gNetStat3LatencySd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStat3LatencySd {
      get { return gNetStat3LatencySd_; }
      set {
        gNetStat3LatencySd_ = value;
      }
    }

    /// <summary>Field number for the "g_net_stat4_latency_min" field.</summary>
    public const int GNetStat4LatencyMinFieldNumber = 4;
    private float gNetStat4LatencyMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStat4LatencyMin {
      get { return gNetStat4LatencyMin_; }
      set {
        gNetStat4LatencyMin_ = value;
      }
    }

    /// <summary>Field number for the "g_net_stat5_latency_max" field.</summary>
    public const int GNetStat5LatencyMaxFieldNumber = 5;
    private float gNetStat5LatencyMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStat5LatencyMax {
      get { return gNetStat5LatencyMax_; }
      set {
        gNetStat5LatencyMax_ = value;
      }
    }

    /// <summary>Field number for the "g_net_stat6_ping_arrived_pc" field.</summary>
    public const int GNetStat6PingArrivedPcFieldNumber = 6;
    private float gNetStat6PingArrivedPc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStat6PingArrivedPc {
      get { return gNetStat6PingArrivedPc_; }
      set {
        gNetStat6PingArrivedPc_ = value;
      }
    }

    /// <summary>Field number for the "g_net_stat7_ext_queued_avg_ms" field.</summary>
    public const int GNetStat7ExtQueuedAvgMsFieldNumber = 7;
    private float gNetStat7ExtQueuedAvgMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStat7ExtQueuedAvgMs {
      get { return gNetStat7ExtQueuedAvgMs_; }
      set {
        gNetStat7ExtQueuedAvgMs_ = value;
      }
    }

    /// <summary>Field number for the "g_net_stat8_ext_queued_min_ms" field.</summary>
    public const int GNetStat8ExtQueuedMinMsFieldNumber = 8;
    private float gNetStat8ExtQueuedMinMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStat8ExtQueuedMinMs {
      get { return gNetStat8ExtQueuedMinMs_; }
      set {
        gNetStat8ExtQueuedMinMs_ = value;
      }
    }

    /// <summary>Field number for the "g_net_stat9_ext_queued_max_ms" field.</summary>
    public const int GNetStat9ExtQueuedMaxMsFieldNumber = 9;
    private float gNetStat9ExtQueuedMaxMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStat9ExtQueuedMaxMs {
      get { return gNetStat9ExtQueuedMaxMs_; }
      set {
        gNetStat9ExtQueuedMaxMs_ = value;
      }
    }

    /// <summary>Field number for the "g_net_stata_queued_avg_ms" field.</summary>
    public const int GNetStataQueuedAvgMsFieldNumber = 10;
    private float gNetStataQueuedAvgMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStataQueuedAvgMs {
      get { return gNetStataQueuedAvgMs_; }
      set {
        gNetStataQueuedAvgMs_ = value;
      }
    }

    /// <summary>Field number for the "g_net_statb_queued_min_ms" field.</summary>
    public const int GNetStatbQueuedMinMsFieldNumber = 11;
    private float gNetStatbQueuedMinMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStatbQueuedMinMs {
      get { return gNetStatbQueuedMinMs_; }
      set {
        gNetStatbQueuedMinMs_ = value;
      }
    }

    /// <summary>Field number for the "g_net_statc_queued_max_ms" field.</summary>
    public const int GNetStatcQueuedMaxMsFieldNumber = 12;
    private float gNetStatcQueuedMaxMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GNetStatcQueuedMaxMs {
      get { return gNetStatcQueuedMaxMs_; }
      set {
        gNetStatcQueuedMaxMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkStats);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkStats other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (GNetStat1NumConnections != other.GNetStat1NumConnections) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStat2LatencyAvg, other.GNetStat2LatencyAvg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStat3LatencySd, other.GNetStat3LatencySd)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStat4LatencyMin, other.GNetStat4LatencyMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStat5LatencyMax, other.GNetStat5LatencyMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStat6PingArrivedPc, other.GNetStat6PingArrivedPc)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStat7ExtQueuedAvgMs, other.GNetStat7ExtQueuedAvgMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStat8ExtQueuedMinMs, other.GNetStat8ExtQueuedMinMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStat9ExtQueuedMaxMs, other.GNetStat9ExtQueuedMaxMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStataQueuedAvgMs, other.GNetStataQueuedAvgMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStatbQueuedMinMs, other.GNetStatbQueuedMinMs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(GNetStatcQueuedMaxMs, other.GNetStatcQueuedMaxMs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (GNetStat1NumConnections != 0) hash ^= GNetStat1NumConnections.GetHashCode();
      if (GNetStat2LatencyAvg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStat2LatencyAvg);
      if (GNetStat3LatencySd != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStat3LatencySd);
      if (GNetStat4LatencyMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStat4LatencyMin);
      if (GNetStat5LatencyMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStat5LatencyMax);
      if (GNetStat6PingArrivedPc != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStat6PingArrivedPc);
      if (GNetStat7ExtQueuedAvgMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStat7ExtQueuedAvgMs);
      if (GNetStat8ExtQueuedMinMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStat8ExtQueuedMinMs);
      if (GNetStat9ExtQueuedMaxMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStat9ExtQueuedMaxMs);
      if (GNetStataQueuedAvgMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStataQueuedAvgMs);
      if (GNetStatbQueuedMinMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStatbQueuedMinMs);
      if (GNetStatcQueuedMaxMs != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(GNetStatcQueuedMaxMs);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (GNetStat1NumConnections != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(GNetStat1NumConnections);
      }
      if (GNetStat2LatencyAvg != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(GNetStat2LatencyAvg);
      }
      if (GNetStat3LatencySd != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(GNetStat3LatencySd);
      }
      if (GNetStat4LatencyMin != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(GNetStat4LatencyMin);
      }
      if (GNetStat5LatencyMax != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(GNetStat5LatencyMax);
      }
      if (GNetStat6PingArrivedPc != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(GNetStat6PingArrivedPc);
      }
      if (GNetStat7ExtQueuedAvgMs != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(GNetStat7ExtQueuedAvgMs);
      }
      if (GNetStat8ExtQueuedMinMs != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(GNetStat8ExtQueuedMinMs);
      }
      if (GNetStat9ExtQueuedMaxMs != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(GNetStat9ExtQueuedMaxMs);
      }
      if (GNetStataQueuedAvgMs != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(GNetStataQueuedAvgMs);
      }
      if (GNetStatbQueuedMinMs != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(GNetStatbQueuedMinMs);
      }
      if (GNetStatcQueuedMaxMs != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(GNetStatcQueuedMaxMs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (GNetStat1NumConnections != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GNetStat1NumConnections);
      }
      if (GNetStat2LatencyAvg != 0F) {
        size += 1 + 4;
      }
      if (GNetStat3LatencySd != 0F) {
        size += 1 + 4;
      }
      if (GNetStat4LatencyMin != 0F) {
        size += 1 + 4;
      }
      if (GNetStat5LatencyMax != 0F) {
        size += 1 + 4;
      }
      if (GNetStat6PingArrivedPc != 0F) {
        size += 1 + 4;
      }
      if (GNetStat7ExtQueuedAvgMs != 0F) {
        size += 1 + 4;
      }
      if (GNetStat8ExtQueuedMinMs != 0F) {
        size += 1 + 4;
      }
      if (GNetStat9ExtQueuedMaxMs != 0F) {
        size += 1 + 4;
      }
      if (GNetStataQueuedAvgMs != 0F) {
        size += 1 + 4;
      }
      if (GNetStatbQueuedMinMs != 0F) {
        size += 1 + 4;
      }
      if (GNetStatcQueuedMaxMs != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkStats other) {
      if (other == null) {
        return;
      }
      if (other.GNetStat1NumConnections != 0) {
        GNetStat1NumConnections = other.GNetStat1NumConnections;
      }
      if (other.GNetStat2LatencyAvg != 0F) {
        GNetStat2LatencyAvg = other.GNetStat2LatencyAvg;
      }
      if (other.GNetStat3LatencySd != 0F) {
        GNetStat3LatencySd = other.GNetStat3LatencySd;
      }
      if (other.GNetStat4LatencyMin != 0F) {
        GNetStat4LatencyMin = other.GNetStat4LatencyMin;
      }
      if (other.GNetStat5LatencyMax != 0F) {
        GNetStat5LatencyMax = other.GNetStat5LatencyMax;
      }
      if (other.GNetStat6PingArrivedPc != 0F) {
        GNetStat6PingArrivedPc = other.GNetStat6PingArrivedPc;
      }
      if (other.GNetStat7ExtQueuedAvgMs != 0F) {
        GNetStat7ExtQueuedAvgMs = other.GNetStat7ExtQueuedAvgMs;
      }
      if (other.GNetStat8ExtQueuedMinMs != 0F) {
        GNetStat8ExtQueuedMinMs = other.GNetStat8ExtQueuedMinMs;
      }
      if (other.GNetStat9ExtQueuedMaxMs != 0F) {
        GNetStat9ExtQueuedMaxMs = other.GNetStat9ExtQueuedMaxMs;
      }
      if (other.GNetStataQueuedAvgMs != 0F) {
        GNetStataQueuedAvgMs = other.GNetStataQueuedAvgMs;
      }
      if (other.GNetStatbQueuedMinMs != 0F) {
        GNetStatbQueuedMinMs = other.GNetStatbQueuedMinMs;
      }
      if (other.GNetStatcQueuedMaxMs != 0F) {
        GNetStatcQueuedMaxMs = other.GNetStatcQueuedMaxMs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GNetStat1NumConnections = input.ReadInt32();
            break;
          }
          case 21: {
            GNetStat2LatencyAvg = input.ReadFloat();
            break;
          }
          case 29: {
            GNetStat3LatencySd = input.ReadFloat();
            break;
          }
          case 37: {
            GNetStat4LatencyMin = input.ReadFloat();
            break;
          }
          case 45: {
            GNetStat5LatencyMax = input.ReadFloat();
            break;
          }
          case 53: {
            GNetStat6PingArrivedPc = input.ReadFloat();
            break;
          }
          case 61: {
            GNetStat7ExtQueuedAvgMs = input.ReadFloat();
            break;
          }
          case 69: {
            GNetStat8ExtQueuedMinMs = input.ReadFloat();
            break;
          }
          case 77: {
            GNetStat9ExtQueuedMaxMs = input.ReadFloat();
            break;
          }
          case 85: {
            GNetStataQueuedAvgMs = input.ReadFloat();
            break;
          }
          case 93: {
            GNetStatbQueuedMinMs = input.ReadFloat();
            break;
          }
          case 101: {
            GNetStatcQueuedMaxMs = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatteryStateRequest : pb::IMessage<BatteryStateRequest> {
    private static readonly pb::MessageParser<BatteryStateRequest> _parser = new pb::MessageParser<BatteryStateRequest>(() => new BatteryStateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatteryStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatteryStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatteryStateRequest(BatteryStateRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatteryStateRequest Clone() {
      return new BatteryStateRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatteryStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatteryStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatteryStateRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BatteryStateResponse : pb::IMessage<BatteryStateResponse> {
    private static readonly pb::MessageParser<BatteryStateResponse> _parser = new pb::MessageParser<BatteryStateResponse>(() => new BatteryStateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatteryStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatteryStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatteryStateResponse(BatteryStateResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      batteryLevel_ = other.batteryLevel_;
      batteryVolts_ = other.batteryVolts_;
      isCharging_ = other.isCharging_;
      isOnChargerPlatform_ = other.isOnChargerPlatform_;
      suggestedChargerSec_ = other.suggestedChargerSec_;
      cubeBattery_ = other.cubeBattery_ != null ? other.cubeBattery_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatteryStateResponse Clone() {
      return new BatteryStateResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "battery_level" field.</summary>
    public const int BatteryLevelFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.BatteryLevel batteryLevel_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.BatteryLevel BatteryLevel {
      get { return batteryLevel_; }
      set {
        batteryLevel_ = value;
      }
    }

    /// <summary>Field number for the "battery_volts" field.</summary>
    public const int BatteryVoltsFieldNumber = 3;
    private float batteryVolts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatteryVolts {
      get { return batteryVolts_; }
      set {
        batteryVolts_ = value;
      }
    }

    /// <summary>Field number for the "is_charging" field.</summary>
    public const int IsChargingFieldNumber = 4;
    private bool isCharging_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCharging {
      get { return isCharging_; }
      set {
        isCharging_ = value;
      }
    }

    /// <summary>Field number for the "is_on_charger_platform" field.</summary>
    public const int IsOnChargerPlatformFieldNumber = 5;
    private bool isOnChargerPlatform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsOnChargerPlatform {
      get { return isOnChargerPlatform_; }
      set {
        isOnChargerPlatform_ = value;
      }
    }

    /// <summary>Field number for the "suggested_charger_sec" field.</summary>
    public const int SuggestedChargerSecFieldNumber = 6;
    private float suggestedChargerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SuggestedChargerSec {
      get { return suggestedChargerSec_; }
      set {
        suggestedChargerSec_ = value;
      }
    }

    /// <summary>Field number for the "cube_battery" field.</summary>
    public const int CubeBatteryFieldNumber = 7;
    private global::Anki.Vector.ExternalInterface.CubeBattery cubeBattery_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CubeBattery CubeBattery {
      get { return cubeBattery_; }
      set {
        cubeBattery_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatteryStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatteryStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (BatteryLevel != other.BatteryLevel) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryVolts, other.BatteryVolts)) return false;
      if (IsCharging != other.IsCharging) return false;
      if (IsOnChargerPlatform != other.IsOnChargerPlatform) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SuggestedChargerSec, other.SuggestedChargerSec)) return false;
      if (!object.Equals(CubeBattery, other.CubeBattery)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (BatteryLevel != 0) hash ^= BatteryLevel.GetHashCode();
      if (BatteryVolts != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryVolts);
      if (IsCharging != false) hash ^= IsCharging.GetHashCode();
      if (IsOnChargerPlatform != false) hash ^= IsOnChargerPlatform.GetHashCode();
      if (SuggestedChargerSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SuggestedChargerSec);
      if (cubeBattery_ != null) hash ^= CubeBattery.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (BatteryLevel != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) BatteryLevel);
      }
      if (BatteryVolts != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BatteryVolts);
      }
      if (IsCharging != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsCharging);
      }
      if (IsOnChargerPlatform != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsOnChargerPlatform);
      }
      if (SuggestedChargerSec != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(SuggestedChargerSec);
      }
      if (cubeBattery_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CubeBattery);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (BatteryLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BatteryLevel);
      }
      if (BatteryVolts != 0F) {
        size += 1 + 4;
      }
      if (IsCharging != false) {
        size += 1 + 1;
      }
      if (IsOnChargerPlatform != false) {
        size += 1 + 1;
      }
      if (SuggestedChargerSec != 0F) {
        size += 1 + 4;
      }
      if (cubeBattery_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CubeBattery);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatteryStateResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.BatteryLevel != 0) {
        BatteryLevel = other.BatteryLevel;
      }
      if (other.BatteryVolts != 0F) {
        BatteryVolts = other.BatteryVolts;
      }
      if (other.IsCharging != false) {
        IsCharging = other.IsCharging;
      }
      if (other.IsOnChargerPlatform != false) {
        IsOnChargerPlatform = other.IsOnChargerPlatform;
      }
      if (other.SuggestedChargerSec != 0F) {
        SuggestedChargerSec = other.SuggestedChargerSec;
      }
      if (other.cubeBattery_ != null) {
        if (cubeBattery_ == null) {
          CubeBattery = new global::Anki.Vector.ExternalInterface.CubeBattery();
        }
        CubeBattery.MergeFrom(other.CubeBattery);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 16: {
            BatteryLevel = (global::Anki.Vector.ExternalInterface.BatteryLevel) input.ReadEnum();
            break;
          }
          case 29: {
            BatteryVolts = input.ReadFloat();
            break;
          }
          case 32: {
            IsCharging = input.ReadBool();
            break;
          }
          case 40: {
            IsOnChargerPlatform = input.ReadBool();
            break;
          }
          case 53: {
            SuggestedChargerSec = input.ReadFloat();
            break;
          }
          case 58: {
            if (cubeBattery_ == null) {
              CubeBattery = new global::Anki.Vector.ExternalInterface.CubeBattery();
            }
            input.ReadMessage(CubeBattery);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CubeBattery : pb::IMessage<CubeBattery> {
    private static readonly pb::MessageParser<CubeBattery> _parser = new pb::MessageParser<CubeBattery>(() => new CubeBattery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CubeBattery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubeBattery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubeBattery(CubeBattery other) : this() {
      level_ = other.level_;
      factoryId_ = other.factoryId_;
      batteryVolts_ = other.batteryVolts_;
      timeSinceLastReadingSec_ = other.timeSinceLastReadingSec_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CubeBattery Clone() {
      return new CubeBattery(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.CubeBattery.Types.CubeBatteryLevel level_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.CubeBattery.Types.CubeBatteryLevel Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "factory_id" field.</summary>
    public const int FactoryIdFieldNumber = 2;
    private string factoryId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FactoryId {
      get { return factoryId_; }
      set {
        factoryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "battery_volts" field.</summary>
    public const int BatteryVoltsFieldNumber = 3;
    private float batteryVolts_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BatteryVolts {
      get { return batteryVolts_; }
      set {
        batteryVolts_ = value;
      }
    }

    /// <summary>Field number for the "time_since_last_reading_sec" field.</summary>
    public const int TimeSinceLastReadingSecFieldNumber = 4;
    private float timeSinceLastReadingSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TimeSinceLastReadingSec {
      get { return timeSinceLastReadingSec_; }
      set {
        timeSinceLastReadingSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CubeBattery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CubeBattery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (FactoryId != other.FactoryId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryVolts, other.BatteryVolts)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TimeSinceLastReadingSec, other.TimeSinceLastReadingSec)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (FactoryId.Length != 0) hash ^= FactoryId.GetHashCode();
      if (BatteryVolts != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryVolts);
      if (TimeSinceLastReadingSec != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TimeSinceLastReadingSec);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Level);
      }
      if (FactoryId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FactoryId);
      }
      if (BatteryVolts != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BatteryVolts);
      }
      if (TimeSinceLastReadingSec != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TimeSinceLastReadingSec);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Level);
      }
      if (FactoryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FactoryId);
      }
      if (BatteryVolts != 0F) {
        size += 1 + 4;
      }
      if (TimeSinceLastReadingSec != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CubeBattery other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.FactoryId.Length != 0) {
        FactoryId = other.FactoryId;
      }
      if (other.BatteryVolts != 0F) {
        BatteryVolts = other.BatteryVolts;
      }
      if (other.TimeSinceLastReadingSec != 0F) {
        TimeSinceLastReadingSec = other.TimeSinceLastReadingSec;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = (global::Anki.Vector.ExternalInterface.CubeBattery.Types.CubeBatteryLevel) input.ReadEnum();
            break;
          }
          case 18: {
            FactoryId = input.ReadString();
            break;
          }
          case 29: {
            BatteryVolts = input.ReadFloat();
            break;
          }
          case 37: {
            TimeSinceLastReadingSec = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the CubeBattery message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CubeBatteryLevel {
        [pbr::OriginalName("Low")] Low = 0,
        [pbr::OriginalName("Normal")] Normal = 1,
      }

    }
    #endregion

  }

  public sealed partial class VersionStateRequest : pb::IMessage<VersionStateRequest> {
    private static readonly pb::MessageParser<VersionStateRequest> _parser = new pb::MessageParser<VersionStateRequest>(() => new VersionStateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionStateRequest(VersionStateRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionStateRequest Clone() {
      return new VersionStateRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionStateRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class VersionStateResponse : pb::IMessage<VersionStateResponse> {
    private static readonly pb::MessageParser<VersionStateResponse> _parser = new pb::MessageParser<VersionStateResponse>(() => new VersionStateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VersionStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionStateResponse(VersionStateResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      osVersion_ = other.osVersion_;
      engineBuildId_ = other.engineBuildId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VersionStateResponse Clone() {
      return new VersionStateResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "os_version" field.</summary>
    public const int OsVersionFieldNumber = 2;
    private string osVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsVersion {
      get { return osVersion_; }
      set {
        osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "engine_build_id" field.</summary>
    public const int EngineBuildIdFieldNumber = 3;
    private string engineBuildId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EngineBuildId {
      get { return engineBuildId_; }
      set {
        engineBuildId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VersionStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VersionStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (OsVersion != other.OsVersion) return false;
      if (EngineBuildId != other.EngineBuildId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (OsVersion.Length != 0) hash ^= OsVersion.GetHashCode();
      if (EngineBuildId.Length != 0) hash ^= EngineBuildId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (OsVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OsVersion);
      }
      if (EngineBuildId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(EngineBuildId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (OsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
      }
      if (EngineBuildId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EngineBuildId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VersionStateResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.OsVersion.Length != 0) {
        OsVersion = other.OsVersion;
      }
      if (other.EngineBuildId.Length != 0) {
        EngineBuildId = other.EngineBuildId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            OsVersion = input.ReadString();
            break;
          }
          case 26: {
            EngineBuildId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkStateRequest : pb::IMessage<NetworkStateRequest> {
    private static readonly pb::MessageParser<NetworkStateRequest> _parser = new pb::MessageParser<NetworkStateRequest>(() => new NetworkStateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkStateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStateRequest(NetworkStateRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStateRequest Clone() {
      return new NetworkStateRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkStateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkStateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkStateRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class NetworkStateResponse : pb::IMessage<NetworkStateResponse> {
    private static readonly pb::MessageParser<NetworkStateResponse> _parser = new pb::MessageParser<NetworkStateResponse>(() => new NetworkStateResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkStateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStateResponse(NetworkStateResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      networkStats_ = other.networkStats_ != null ? other.networkStats_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStateResponse Clone() {
      return new NetworkStateResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "network_stats" field.</summary>
    public const int NetworkStatsFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.NetworkStats networkStats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.NetworkStats NetworkStats {
      get { return networkStats_; }
      set {
        networkStats_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkStateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkStateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (!object.Equals(NetworkStats, other.NetworkStats)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (networkStats_ != null) hash ^= NetworkStats.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (networkStats_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NetworkStats);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (networkStats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkStats);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkStateResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.networkStats_ != null) {
        if (networkStats_ == null) {
          NetworkStats = new global::Anki.Vector.ExternalInterface.NetworkStats();
        }
        NetworkStats.MergeFrom(other.NetworkStats);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 18: {
            if (networkStats_ == null) {
              NetworkStats = new global::Anki.Vector.ExternalInterface.NetworkStats();
            }
            input.ReadMessage(NetworkStats);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SayTextRequest : pb::IMessage<SayTextRequest> {
    private static readonly pb::MessageParser<SayTextRequest> _parser = new pb::MessageParser<SayTextRequest>(() => new SayTextRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SayTextRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayTextRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayTextRequest(SayTextRequest other) : this() {
      text_ = other.text_;
      useVectorVoice_ = other.useVectorVoice_;
      durationScalar_ = other.durationScalar_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayTextRequest Clone() {
      return new SayTextRequest(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "use_vector_voice" field.</summary>
    public const int UseVectorVoiceFieldNumber = 2;
    private bool useVectorVoice_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseVectorVoice {
      get { return useVectorVoice_; }
      set {
        useVectorVoice_ = value;
      }
    }

    /// <summary>Field number for the "duration_scalar" field.</summary>
    public const int DurationScalarFieldNumber = 3;
    private float durationScalar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DurationScalar {
      get { return durationScalar_; }
      set {
        durationScalar_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SayTextRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SayTextRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      if (UseVectorVoice != other.UseVectorVoice) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DurationScalar, other.DurationScalar)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (UseVectorVoice != false) hash ^= UseVectorVoice.GetHashCode();
      if (DurationScalar != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DurationScalar);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (UseVectorVoice != false) {
        output.WriteRawTag(16);
        output.WriteBool(UseVectorVoice);
      }
      if (DurationScalar != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DurationScalar);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (UseVectorVoice != false) {
        size += 1 + 1;
      }
      if (DurationScalar != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SayTextRequest other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      if (other.UseVectorVoice != false) {
        UseVectorVoice = other.UseVectorVoice;
      }
      if (other.DurationScalar != 0F) {
        DurationScalar = other.DurationScalar;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
          case 16: {
            UseVectorVoice = input.ReadBool();
            break;
          }
          case 29: {
            DurationScalar = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SayTextResponse : pb::IMessage<SayTextResponse> {
    private static readonly pb::MessageParser<SayTextResponse> _parser = new pb::MessageParser<SayTextResponse>(() => new SayTextResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SayTextResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayTextResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayTextResponse(SayTextResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SayTextResponse Clone() {
      return new SayTextResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 2;
    private global::Anki.Vector.ExternalInterface.SayTextResponse.Types.UtteranceState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.SayTextResponse.Types.UtteranceState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SayTextResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SayTextResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (State != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SayTextResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
          case 16: {
            State = (global::Anki.Vector.ExternalInterface.SayTextResponse.Types.UtteranceState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SayTextResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum UtteranceState {
        [pbr::OriginalName("INVALID")] Invalid = 0,
        [pbr::OriginalName("GENERATING")] Generating = 1,
        [pbr::OriginalName("READY")] Ready = 2,
        [pbr::OriginalName("PLAYING")] Playing = 3,
        [pbr::OriginalName("FINISHED")] Finished = 4,
      }

    }
    #endregion

  }

  public sealed partial class StimulationInfo : pb::IMessage<StimulationInfo> {
    private static readonly pb::MessageParser<StimulationInfo> _parser = new pb::MessageParser<StimulationInfo>(() => new StimulationInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StimulationInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StimulationInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StimulationInfo(StimulationInfo other) : this() {
      emotionEvents_ = other.emotionEvents_.Clone();
      value_ = other.value_;
      velocity_ = other.velocity_;
      accel_ = other.accel_;
      valueBeforeEvent_ = other.valueBeforeEvent_;
      minValue_ = other.minValue_;
      maxValue_ = other.maxValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StimulationInfo Clone() {
      return new StimulationInfo(this);
    }

    /// <summary>Field number for the "emotion_events" field.</summary>
    public const int EmotionEventsFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_emotionEvents_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> emotionEvents_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// may be empty
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> EmotionEvents {
      get { return emotionEvents_; }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "velocity" field.</summary>
    public const int VelocityFieldNumber = 3;
    private float velocity_;
    /// <summary>
    /// value per second
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Velocity {
      get { return velocity_; }
      set {
        velocity_ = value;
      }
    }

    /// <summary>Field number for the "accel" field.</summary>
    public const int AccelFieldNumber = 4;
    private float accel_;
    /// <summary>
    /// value per sec per sec
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Accel {
      get { return accel_; }
      set {
        accel_ = value;
      }
    }

    /// <summary>Field number for the "value_before_event" field.</summary>
    public const int ValueBeforeEventFieldNumber = 5;
    private float valueBeforeEvent_;
    /// <summary>
    /// matches value if there were no emotion events
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ValueBeforeEvent {
      get { return valueBeforeEvent_; }
      set {
        valueBeforeEvent_ = value;
      }
    }

    /// <summary>Field number for the "min_value" field.</summary>
    public const int MinValueFieldNumber = 6;
    private float minValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MinValue {
      get { return minValue_; }
      set {
        minValue_ = value;
      }
    }

    /// <summary>Field number for the "max_value" field.</summary>
    public const int MaxValueFieldNumber = 7;
    private float maxValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxValue {
      get { return maxValue_; }
      set {
        maxValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StimulationInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StimulationInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!emotionEvents_.Equals(other.emotionEvents_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Velocity, other.Velocity)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Accel, other.Accel)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ValueBeforeEvent, other.ValueBeforeEvent)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinValue, other.MinValue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxValue, other.MaxValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= emotionEvents_.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (Velocity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Velocity);
      if (Accel != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Accel);
      if (ValueBeforeEvent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ValueBeforeEvent);
      if (MinValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinValue);
      if (MaxValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      emotionEvents_.WriteTo(output, _repeated_emotionEvents_codec);
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (Velocity != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Velocity);
      }
      if (Accel != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Accel);
      }
      if (ValueBeforeEvent != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ValueBeforeEvent);
      }
      if (MinValue != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(MinValue);
      }
      if (MaxValue != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MaxValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += emotionEvents_.CalculateSize(_repeated_emotionEvents_codec);
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (Velocity != 0F) {
        size += 1 + 4;
      }
      if (Accel != 0F) {
        size += 1 + 4;
      }
      if (ValueBeforeEvent != 0F) {
        size += 1 + 4;
      }
      if (MinValue != 0F) {
        size += 1 + 4;
      }
      if (MaxValue != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StimulationInfo other) {
      if (other == null) {
        return;
      }
      emotionEvents_.Add(other.emotionEvents_);
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.Velocity != 0F) {
        Velocity = other.Velocity;
      }
      if (other.Accel != 0F) {
        Accel = other.Accel;
      }
      if (other.ValueBeforeEvent != 0F) {
        ValueBeforeEvent = other.ValueBeforeEvent;
      }
      if (other.MinValue != 0F) {
        MinValue = other.MinValue;
      }
      if (other.MaxValue != 0F) {
        MaxValue = other.MaxValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            emotionEvents_.AddEntriesFrom(input, _repeated_emotionEvents_codec);
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 29: {
            Velocity = input.ReadFloat();
            break;
          }
          case 37: {
            Accel = input.ReadFloat();
            break;
          }
          case 45: {
            ValueBeforeEvent = input.ReadFloat();
            break;
          }
          case 53: {
            MinValue = input.ReadFloat();
            break;
          }
          case 61: {
            MaxValue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request how the robot should process and send audio
  /// </summary>
  public sealed partial class AudioSendModeRequest : pb::IMessage<AudioSendModeRequest> {
    private static readonly pb::MessageParser<AudioSendModeRequest> _parser = new pb::MessageParser<AudioSendModeRequest>(() => new AudioSendModeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioSendModeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioSendModeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioSendModeRequest(AudioSendModeRequest other) : this() {
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioSendModeRequest Clone() {
      return new AudioSendModeRequest(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.AudioProcessingMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.AudioProcessingMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioSendModeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioSendModeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioSendModeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = (global::Anki.Vector.ExternalInterface.AudioProcessingMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Event sent when the robot changes the mode it's processing and sending audio
  /// </summary>
  public sealed partial class AudioSendModeChanged : pb::IMessage<AudioSendModeChanged> {
    private static readonly pb::MessageParser<AudioSendModeChanged> _parser = new pb::MessageParser<AudioSendModeChanged>(() => new AudioSendModeChanged());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioSendModeChanged> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioSendModeChanged() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioSendModeChanged(AudioSendModeChanged other) : this() {
      mode_ = other.mode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioSendModeChanged Clone() {
      return new AudioSendModeChanged(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.AudioProcessingMode mode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.AudioProcessingMode Mode {
      get { return mode_; }
      set {
        mode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioSendModeChanged);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioSendModeChanged other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode != 0) hash ^= Mode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Mode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioSendModeChanged other) {
      if (other == null) {
        return;
      }
      if (other.Mode != 0) {
        Mode = other.Mode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Mode = (global::Anki.Vector.ExternalInterface.AudioProcessingMode) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// One frame of audio data and associated metadata
  /// </summary>
  public sealed partial class AudioChunk : pb::IMessage<AudioChunk> {
    private static readonly pb::MessageParser<AudioChunk> _parser = new pb::MessageParser<AudioChunk>(() => new AudioChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioChunk(AudioChunk other) : this() {
      robotTimeStamp_ = other.robotTimeStamp_;
      groupId_ = other.groupId_;
      chunkId_ = other.chunkId_;
      audioChunkCount_ = other.audioChunkCount_;
      signalPower_ = other.signalPower_;
      directionStrengths_ = other.directionStrengths_;
      sourceDirection_ = other.sourceDirection_;
      sourceConfidence_ = other.sourceConfidence_;
      noiseFloorPower_ = other.noiseFloorPower_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioChunk Clone() {
      return new AudioChunk(this);
    }

    /// <summary>Field number for the "robot_time_stamp" field.</summary>
    public const int RobotTimeStampFieldNumber = 1;
    private uint robotTimeStamp_;
    /// <summary>
    /// robot time at the final chunk of this audio sample group transmission
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RobotTimeStamp {
      get { return robotTimeStamp_; }
      set {
        robotTimeStamp_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private uint groupId_;
    /// <summary>
    /// the id of this sample transmission group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "chunk_id" field.</summary>
    public const int ChunkIdFieldNumber = 3;
    private uint chunkId_;
    /// <summary>
    /// the current batched chunk id within in this group id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChunkId {
      get { return chunkId_; }
      set {
        chunkId_ = value;
      }
    }

    /// <summary>Field number for the "audio_chunk_count" field.</summary>
    public const int AudioChunkCountFieldNumber = 4;
    private uint audioChunkCount_;
    /// <summary>
    /// number of chunks batched within this group id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AudioChunkCount {
      get { return audioChunkCount_; }
      set {
        audioChunkCount_ = value;
      }
    }

    /// <summary>Field number for the "signal_power" field.</summary>
    public const int SignalPowerFieldNumber = 5;
    private pb::ByteString signalPower_ = pb::ByteString.Empty;
    /// <summary>
    /// mono audio amplitude samples
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SignalPower {
      get { return signalPower_; }
      set {
        signalPower_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "direction_strengths" field.</summary>
    public const int DirectionStrengthsFieldNumber = 6;
    private pb::ByteString directionStrengths_ = pb::ByteString.Empty;
    /// <summary>
    /// histogram data of which directions this audio chunk came from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DirectionStrengths {
      get { return directionStrengths_; }
      set {
        directionStrengths_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_direction" field.</summary>
    public const int SourceDirectionFieldNumber = 7;
    private uint sourceDirection_;
    /// <summary>
    /// 0-11, with 12 representing "invalid"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceDirection {
      get { return sourceDirection_; }
      set {
        sourceDirection_ = value;
      }
    }

    /// <summary>Field number for the "source_confidence" field.</summary>
    public const int SourceConfidenceFieldNumber = 8;
    private uint sourceConfidence_;
    /// <summary>
    /// accuracy of the calculated source_direction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceConfidence {
      get { return sourceConfidence_; }
      set {
        sourceConfidence_ = value;
      }
    }

    /// <summary>Field number for the "noise_floor_power" field.</summary>
    public const int NoiseFloorPowerFieldNumber = 9;
    private uint noiseFloorPower_;
    /// <summary>
    /// power value, convert to db with log_10(value)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoiseFloorPower {
      get { return noiseFloorPower_; }
      set {
        noiseFloorPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RobotTimeStamp != other.RobotTimeStamp) return false;
      if (GroupId != other.GroupId) return false;
      if (ChunkId != other.ChunkId) return false;
      if (AudioChunkCount != other.AudioChunkCount) return false;
      if (SignalPower != other.SignalPower) return false;
      if (DirectionStrengths != other.DirectionStrengths) return false;
      if (SourceDirection != other.SourceDirection) return false;
      if (SourceConfidence != other.SourceConfidence) return false;
      if (NoiseFloorPower != other.NoiseFloorPower) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RobotTimeStamp != 0) hash ^= RobotTimeStamp.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (ChunkId != 0) hash ^= ChunkId.GetHashCode();
      if (AudioChunkCount != 0) hash ^= AudioChunkCount.GetHashCode();
      if (SignalPower.Length != 0) hash ^= SignalPower.GetHashCode();
      if (DirectionStrengths.Length != 0) hash ^= DirectionStrengths.GetHashCode();
      if (SourceDirection != 0) hash ^= SourceDirection.GetHashCode();
      if (SourceConfidence != 0) hash ^= SourceConfidence.GetHashCode();
      if (NoiseFloorPower != 0) hash ^= NoiseFloorPower.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RobotTimeStamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RobotTimeStamp);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (ChunkId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ChunkId);
      }
      if (AudioChunkCount != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(AudioChunkCount);
      }
      if (SignalPower.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(SignalPower);
      }
      if (DirectionStrengths.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(DirectionStrengths);
      }
      if (SourceDirection != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(SourceDirection);
      }
      if (SourceConfidence != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(SourceConfidence);
      }
      if (NoiseFloorPower != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NoiseFloorPower);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RobotTimeStamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotTimeStamp);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (ChunkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkId);
      }
      if (AudioChunkCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AudioChunkCount);
      }
      if (SignalPower.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignalPower);
      }
      if (DirectionStrengths.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DirectionStrengths);
      }
      if (SourceDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceDirection);
      }
      if (SourceConfidence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceConfidence);
      }
      if (NoiseFloorPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoiseFloorPower);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioChunk other) {
      if (other == null) {
        return;
      }
      if (other.RobotTimeStamp != 0) {
        RobotTimeStamp = other.RobotTimeStamp;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.ChunkId != 0) {
        ChunkId = other.ChunkId;
      }
      if (other.AudioChunkCount != 0) {
        AudioChunkCount = other.AudioChunkCount;
      }
      if (other.SignalPower.Length != 0) {
        SignalPower = other.SignalPower;
      }
      if (other.DirectionStrengths.Length != 0) {
        DirectionStrengths = other.DirectionStrengths;
      }
      if (other.SourceDirection != 0) {
        SourceDirection = other.SourceDirection;
      }
      if (other.SourceConfidence != 0) {
        SourceConfidence = other.SourceConfidence;
      }
      if (other.NoiseFloorPower != 0) {
        NoiseFloorPower = other.NoiseFloorPower;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RobotTimeStamp = input.ReadUInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 24: {
            ChunkId = input.ReadUInt32();
            break;
          }
          case 32: {
            AudioChunkCount = input.ReadUInt32();
            break;
          }
          case 42: {
            SignalPower = input.ReadBytes();
            break;
          }
          case 50: {
            DirectionStrengths = input.ReadBytes();
            break;
          }
          case 56: {
            SourceDirection = input.ReadUInt32();
            break;
          }
          case 64: {
            SourceConfidence = input.ReadUInt32();
            break;
          }
          case 72: {
            NoiseFloorPower = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Request the robot to send audio data
  /// </summary>
  public sealed partial class AudioFeedRequest : pb::IMessage<AudioFeedRequest> {
    private static readonly pb::MessageParser<AudioFeedRequest> _parser = new pb::MessageParser<AudioFeedRequest>(() => new AudioFeedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioFeedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioFeedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioFeedRequest(AudioFeedRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioFeedRequest Clone() {
      return new AudioFeedRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioFeedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioFeedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioFeedRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Streamed audio data from the robot
  /// </summary>
  public sealed partial class AudioFeedResponse : pb::IMessage<AudioFeedResponse> {
    private static readonly pb::MessageParser<AudioFeedResponse> _parser = new pb::MessageParser<AudioFeedResponse>(() => new AudioFeedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AudioFeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioFeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioFeedResponse(AudioFeedResponse other) : this() {
      robotTimeStamp_ = other.robotTimeStamp_;
      groupId_ = other.groupId_;
      signalPower_ = other.signalPower_;
      directionStrengths_ = other.directionStrengths_;
      sourceDirection_ = other.sourceDirection_;
      sourceConfidence_ = other.sourceConfidence_;
      noiseFloorPower_ = other.noiseFloorPower_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AudioFeedResponse Clone() {
      return new AudioFeedResponse(this);
    }

    /// <summary>Field number for the "robot_time_stamp" field.</summary>
    public const int RobotTimeStampFieldNumber = 1;
    private uint robotTimeStamp_;
    /// <summary>
    /// robot time at the transmission of this audio sample group
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RobotTimeStamp {
      get { return robotTimeStamp_; }
      set {
        robotTimeStamp_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private uint groupId_;
    /// <summary>
    /// the index of this audio feed response
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "signal_power" field.</summary>
    public const int SignalPowerFieldNumber = 3;
    private pb::ByteString signalPower_ = pb::ByteString.Empty;
    /// <summary>
    /// mono audio amplitude samples
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SignalPower {
      get { return signalPower_; }
      set {
        signalPower_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "direction_strengths" field.</summary>
    public const int DirectionStrengthsFieldNumber = 4;
    private pb::ByteString directionStrengths_ = pb::ByteString.Empty;
    /// <summary>
    /// histogram data of which directions this audio chunk came from
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DirectionStrengths {
      get { return directionStrengths_; }
      set {
        directionStrengths_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_direction" field.</summary>
    public const int SourceDirectionFieldNumber = 5;
    private uint sourceDirection_;
    /// <summary>
    /// 0-11, with 12 representing "invalid"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceDirection {
      get { return sourceDirection_; }
      set {
        sourceDirection_ = value;
      }
    }

    /// <summary>Field number for the "source_confidence" field.</summary>
    public const int SourceConfidenceFieldNumber = 6;
    private uint sourceConfidence_;
    /// <summary>
    /// accuracy of the calculated source_direction
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SourceConfidence {
      get { return sourceConfidence_; }
      set {
        sourceConfidence_ = value;
      }
    }

    /// <summary>Field number for the "noise_floor_power" field.</summary>
    public const int NoiseFloorPowerFieldNumber = 7;
    private uint noiseFloorPower_;
    /// <summary>
    /// power value, convert to db with log_10(value)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NoiseFloorPower {
      get { return noiseFloorPower_; }
      set {
        noiseFloorPower_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AudioFeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AudioFeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RobotTimeStamp != other.RobotTimeStamp) return false;
      if (GroupId != other.GroupId) return false;
      if (SignalPower != other.SignalPower) return false;
      if (DirectionStrengths != other.DirectionStrengths) return false;
      if (SourceDirection != other.SourceDirection) return false;
      if (SourceConfidence != other.SourceConfidence) return false;
      if (NoiseFloorPower != other.NoiseFloorPower) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RobotTimeStamp != 0) hash ^= RobotTimeStamp.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (SignalPower.Length != 0) hash ^= SignalPower.GetHashCode();
      if (DirectionStrengths.Length != 0) hash ^= DirectionStrengths.GetHashCode();
      if (SourceDirection != 0) hash ^= SourceDirection.GetHashCode();
      if (SourceConfidence != 0) hash ^= SourceConfidence.GetHashCode();
      if (NoiseFloorPower != 0) hash ^= NoiseFloorPower.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RobotTimeStamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(RobotTimeStamp);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (SignalPower.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SignalPower);
      }
      if (DirectionStrengths.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(DirectionStrengths);
      }
      if (SourceDirection != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(SourceDirection);
      }
      if (SourceConfidence != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(SourceConfidence);
      }
      if (NoiseFloorPower != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(NoiseFloorPower);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RobotTimeStamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RobotTimeStamp);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (SignalPower.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignalPower);
      }
      if (DirectionStrengths.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DirectionStrengths);
      }
      if (SourceDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceDirection);
      }
      if (SourceConfidence != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SourceConfidence);
      }
      if (NoiseFloorPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NoiseFloorPower);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AudioFeedResponse other) {
      if (other == null) {
        return;
      }
      if (other.RobotTimeStamp != 0) {
        RobotTimeStamp = other.RobotTimeStamp;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.SignalPower.Length != 0) {
        SignalPower = other.SignalPower;
      }
      if (other.DirectionStrengths.Length != 0) {
        DirectionStrengths = other.DirectionStrengths;
      }
      if (other.SourceDirection != 0) {
        SourceDirection = other.SourceDirection;
      }
      if (other.SourceConfidence != 0) {
        SourceConfidence = other.SourceConfidence;
      }
      if (other.NoiseFloorPower != 0) {
        NoiseFloorPower = other.NoiseFloorPower;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RobotTimeStamp = input.ReadUInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 26: {
            SignalPower = input.ReadBytes();
            break;
          }
          case 34: {
            DirectionStrengths = input.ReadBytes();
            break;
          }
          case 40: {
            SourceDirection = input.ReadUInt32();
            break;
          }
          case 48: {
            SourceConfidence = input.ReadUInt32();
            break;
          }
          case 56: {
            NoiseFloorPower = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// When enabled, RobotObservedObject messages will be produced
  /// </summary>
  public sealed partial class EnableMarkerDetectionRequest : pb::IMessage<EnableMarkerDetectionRequest> {
    private static readonly pb::MessageParser<EnableMarkerDetectionRequest> _parser = new pb::MessageParser<EnableMarkerDetectionRequest>(() => new EnableMarkerDetectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableMarkerDetectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMarkerDetectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMarkerDetectionRequest(EnableMarkerDetectionRequest other) : this() {
      enable_ = other.enable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMarkerDetectionRequest Clone() {
      return new EnableMarkerDetectionRequest(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableMarkerDetectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableMarkerDetectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableMarkerDetectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnableMarkerDetectionResponse : pb::IMessage<EnableMarkerDetectionResponse> {
    private static readonly pb::MessageParser<EnableMarkerDetectionResponse> _parser = new pb::MessageParser<EnableMarkerDetectionResponse>(() => new EnableMarkerDetectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableMarkerDetectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMarkerDetectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMarkerDetectionResponse(EnableMarkerDetectionResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMarkerDetectionResponse Clone() {
      return new EnableMarkerDetectionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableMarkerDetectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableMarkerDetectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableMarkerDetectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// When enabled, RobotObservedFace messages will be produced
  /// </summary>
  public sealed partial class EnableFaceDetectionRequest : pb::IMessage<EnableFaceDetectionRequest> {
    private static readonly pb::MessageParser<EnableFaceDetectionRequest> _parser = new pb::MessageParser<EnableFaceDetectionRequest>(() => new EnableFaceDetectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableFaceDetectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableFaceDetectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableFaceDetectionRequest(EnableFaceDetectionRequest other) : this() {
      enable_ = other.enable_;
      enableSmileDetection_ = other.enableSmileDetection_;
      enableExpressionEstimation_ = other.enableExpressionEstimation_;
      enableBlinkDetection_ = other.enableBlinkDetection_;
      enableGazeDetection_ = other.enableGazeDetection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableFaceDetectionRequest Clone() {
      return new EnableFaceDetectionRequest(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    /// <summary>Field number for the "enable_smile_detection" field.</summary>
    public const int EnableSmileDetectionFieldNumber = 2;
    private bool enableSmileDetection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableSmileDetection {
      get { return enableSmileDetection_; }
      set {
        enableSmileDetection_ = value;
      }
    }

    /// <summary>Field number for the "enable_expression_estimation" field.</summary>
    public const int EnableExpressionEstimationFieldNumber = 3;
    private bool enableExpressionEstimation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableExpressionEstimation {
      get { return enableExpressionEstimation_; }
      set {
        enableExpressionEstimation_ = value;
      }
    }

    /// <summary>Field number for the "enable_blink_detection" field.</summary>
    public const int EnableBlinkDetectionFieldNumber = 4;
    private bool enableBlinkDetection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableBlinkDetection {
      get { return enableBlinkDetection_; }
      set {
        enableBlinkDetection_ = value;
      }
    }

    /// <summary>Field number for the "enable_gaze_detection" field.</summary>
    public const int EnableGazeDetectionFieldNumber = 5;
    private bool enableGazeDetection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EnableGazeDetection {
      get { return enableGazeDetection_; }
      set {
        enableGazeDetection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableFaceDetectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableFaceDetectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      if (EnableSmileDetection != other.EnableSmileDetection) return false;
      if (EnableExpressionEstimation != other.EnableExpressionEstimation) return false;
      if (EnableBlinkDetection != other.EnableBlinkDetection) return false;
      if (EnableGazeDetection != other.EnableGazeDetection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (EnableSmileDetection != false) hash ^= EnableSmileDetection.GetHashCode();
      if (EnableExpressionEstimation != false) hash ^= EnableExpressionEstimation.GetHashCode();
      if (EnableBlinkDetection != false) hash ^= EnableBlinkDetection.GetHashCode();
      if (EnableGazeDetection != false) hash ^= EnableGazeDetection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (EnableSmileDetection != false) {
        output.WriteRawTag(16);
        output.WriteBool(EnableSmileDetection);
      }
      if (EnableExpressionEstimation != false) {
        output.WriteRawTag(24);
        output.WriteBool(EnableExpressionEstimation);
      }
      if (EnableBlinkDetection != false) {
        output.WriteRawTag(32);
        output.WriteBool(EnableBlinkDetection);
      }
      if (EnableGazeDetection != false) {
        output.WriteRawTag(40);
        output.WriteBool(EnableGazeDetection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (EnableSmileDetection != false) {
        size += 1 + 1;
      }
      if (EnableExpressionEstimation != false) {
        size += 1 + 1;
      }
      if (EnableBlinkDetection != false) {
        size += 1 + 1;
      }
      if (EnableGazeDetection != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableFaceDetectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      if (other.EnableSmileDetection != false) {
        EnableSmileDetection = other.EnableSmileDetection;
      }
      if (other.EnableExpressionEstimation != false) {
        EnableExpressionEstimation = other.EnableExpressionEstimation;
      }
      if (other.EnableBlinkDetection != false) {
        EnableBlinkDetection = other.EnableBlinkDetection;
      }
      if (other.EnableGazeDetection != false) {
        EnableGazeDetection = other.EnableGazeDetection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
          case 16: {
            EnableSmileDetection = input.ReadBool();
            break;
          }
          case 24: {
            EnableExpressionEstimation = input.ReadBool();
            break;
          }
          case 32: {
            EnableBlinkDetection = input.ReadBool();
            break;
          }
          case 40: {
            EnableGazeDetection = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnableFaceDetectionResponse : pb::IMessage<EnableFaceDetectionResponse> {
    private static readonly pb::MessageParser<EnableFaceDetectionResponse> _parser = new pb::MessageParser<EnableFaceDetectionResponse>(() => new EnableFaceDetectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableFaceDetectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableFaceDetectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableFaceDetectionResponse(EnableFaceDetectionResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableFaceDetectionResponse Clone() {
      return new EnableFaceDetectionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableFaceDetectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableFaceDetectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableFaceDetectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// When enabled, RobotObservedMotion messages will be produced
  /// </summary>
  public sealed partial class EnableMotionDetectionRequest : pb::IMessage<EnableMotionDetectionRequest> {
    private static readonly pb::MessageParser<EnableMotionDetectionRequest> _parser = new pb::MessageParser<EnableMotionDetectionRequest>(() => new EnableMotionDetectionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableMotionDetectionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMotionDetectionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMotionDetectionRequest(EnableMotionDetectionRequest other) : this() {
      enable_ = other.enable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMotionDetectionRequest Clone() {
      return new EnableMotionDetectionRequest(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableMotionDetectionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableMotionDetectionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableMotionDetectionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnableMotionDetectionResponse : pb::IMessage<EnableMotionDetectionResponse> {
    private static readonly pb::MessageParser<EnableMotionDetectionResponse> _parser = new pb::MessageParser<EnableMotionDetectionResponse>(() => new EnableMotionDetectionResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableMotionDetectionResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMotionDetectionResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMotionDetectionResponse(EnableMotionDetectionResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMotionDetectionResponse Clone() {
      return new EnableMotionDetectionResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableMotionDetectionResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableMotionDetectionResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableMotionDetectionResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// When enabled, camera feed will appear on the robot's face, along with any 
  /// detections that are enabled from above messages
  /// </summary>
  public sealed partial class EnableMirrorModeRequest : pb::IMessage<EnableMirrorModeRequest> {
    private static readonly pb::MessageParser<EnableMirrorModeRequest> _parser = new pb::MessageParser<EnableMirrorModeRequest>(() => new EnableMirrorModeRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableMirrorModeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMirrorModeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMirrorModeRequest(EnableMirrorModeRequest other) : this() {
      enable_ = other.enable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMirrorModeRequest Clone() {
      return new EnableMirrorModeRequest(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableMirrorModeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableMirrorModeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableMirrorModeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnableMirrorModeResponse : pb::IMessage<EnableMirrorModeResponse> {
    private static readonly pb::MessageParser<EnableMirrorModeResponse> _parser = new pb::MessageParser<EnableMirrorModeResponse>(() => new EnableMirrorModeResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableMirrorModeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMirrorModeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMirrorModeResponse(EnableMirrorModeResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableMirrorModeResponse Clone() {
      return new EnableMirrorModeResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableMirrorModeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableMirrorModeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableMirrorModeResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sent if MirrorMode (camera feed displayed on face) is currently enabled but is automatically
  /// being disabled
  /// </summary>
  public sealed partial class MirrorModeDisabled : pb::IMessage<MirrorModeDisabled> {
    private static readonly pb::MessageParser<MirrorModeDisabled> _parser = new pb::MessageParser<MirrorModeDisabled>(() => new MirrorModeDisabled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MirrorModeDisabled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MirrorModeDisabled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MirrorModeDisabled(MirrorModeDisabled other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MirrorModeDisabled Clone() {
      return new MirrorModeDisabled(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MirrorModeDisabled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MirrorModeDisabled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MirrorModeDisabled other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Toggle image streaming at the given resolution
  /// </summary>
  public sealed partial class EnableImageStreamingRequest : pb::IMessage<EnableImageStreamingRequest> {
    private static readonly pb::MessageParser<EnableImageStreamingRequest> _parser = new pb::MessageParser<EnableImageStreamingRequest>(() => new EnableImageStreamingRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableImageStreamingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableImageStreamingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableImageStreamingRequest(EnableImageStreamingRequest other) : this() {
      enable_ = other.enable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableImageStreamingRequest Clone() {
      return new EnableImageStreamingRequest(this);
    }

    /// <summary>Field number for the "enable" field.</summary>
    public const int EnableFieldNumber = 1;
    private bool enable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Enable {
      get { return enable_; }
      set {
        enable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableImageStreamingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableImageStreamingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Enable != other.Enable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Enable != false) hash ^= Enable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Enable != false) {
        output.WriteRawTag(8);
        output.WriteBool(Enable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Enable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableImageStreamingRequest other) {
      if (other == null) {
        return;
      }
      if (other.Enable != false) {
        Enable = other.Enable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Enable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnableImageStreamingResponse : pb::IMessage<EnableImageStreamingResponse> {
    private static readonly pb::MessageParser<EnableImageStreamingResponse> _parser = new pb::MessageParser<EnableImageStreamingResponse>(() => new EnableImageStreamingResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnableImageStreamingResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableImageStreamingResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableImageStreamingResponse(EnableImageStreamingResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnableImageStreamingResponse Clone() {
      return new EnableImageStreamingResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnableImageStreamingResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnableImageStreamingResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnableImageStreamingResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Sent when vision modes are automatically disabled due to the SDK no longer having control
  /// of the robot
  /// </summary>
  public sealed partial class VisionModesAutoDisabled : pb::IMessage<VisionModesAutoDisabled> {
    private static readonly pb::MessageParser<VisionModesAutoDisabled> _parser = new pb::MessageParser<VisionModesAutoDisabled>(() => new VisionModesAutoDisabled());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VisionModesAutoDisabled> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisionModesAutoDisabled() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisionModesAutoDisabled(VisionModesAutoDisabled other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VisionModesAutoDisabled Clone() {
      return new VisionModesAutoDisabled(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VisionModesAutoDisabled);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VisionModesAutoDisabled other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VisionModesAutoDisabled other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// One frame of image data and associated metadata
  /// </summary>
  public sealed partial class ImageChunk : pb::IMessage<ImageChunk> {
    private static readonly pb::MessageParser<ImageChunk> _parser = new pb::MessageParser<ImageChunk>(() => new ImageChunk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageChunk(ImageChunk other) : this() {
      frameTimeStamp_ = other.frameTimeStamp_;
      imageId_ = other.imageId_;
      width_ = other.width_;
      height_ = other.height_;
      imageEncoding_ = other.imageEncoding_;
      displayIndex_ = other.displayIndex_;
      imageChunkCount_ = other.imageChunkCount_;
      chunkId_ = other.chunkId_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageChunk Clone() {
      return new ImageChunk(this);
    }

    /// <summary>Field number for the "frame_time_stamp" field.</summary>
    public const int FrameTimeStampFieldNumber = 1;
    private uint frameTimeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameTimeStamp {
      get { return frameTimeStamp_; }
      set {
        frameTimeStamp_ = value;
      }
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 2;
    private uint imageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImageId {
      get { return imageId_; }
      set {
        imageId_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "image_encoding" field.</summary>
    public const int ImageEncodingFieldNumber = 5;
    private global::Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding imageEncoding_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding ImageEncoding {
      get { return imageEncoding_; }
      set {
        imageEncoding_ = value;
      }
    }

    /// <summary>Field number for the "display_index" field.</summary>
    public const int DisplayIndexFieldNumber = 6;
    private uint displayIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DisplayIndex {
      get { return displayIndex_; }
      set {
        displayIndex_ = value;
      }
    }

    /// <summary>Field number for the "image_chunk_count" field.</summary>
    public const int ImageChunkCountFieldNumber = 7;
    private uint imageChunkCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImageChunkCount {
      get { return imageChunkCount_; }
      set {
        imageChunkCount_ = value;
      }
    }

    /// <summary>Field number for the "chunk_id" field.</summary>
    public const int ChunkIdFieldNumber = 8;
    private uint chunkId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ChunkId {
      get { return chunkId_; }
      set {
        chunkId_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 9;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameTimeStamp != other.FrameTimeStamp) return false;
      if (ImageId != other.ImageId) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (ImageEncoding != other.ImageEncoding) return false;
      if (DisplayIndex != other.DisplayIndex) return false;
      if (ImageChunkCount != other.ImageChunkCount) return false;
      if (ChunkId != other.ChunkId) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameTimeStamp != 0) hash ^= FrameTimeStamp.GetHashCode();
      if (ImageId != 0) hash ^= ImageId.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (ImageEncoding != 0) hash ^= ImageEncoding.GetHashCode();
      if (DisplayIndex != 0) hash ^= DisplayIndex.GetHashCode();
      if (ImageChunkCount != 0) hash ^= ImageChunkCount.GetHashCode();
      if (ChunkId != 0) hash ^= ChunkId.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameTimeStamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FrameTimeStamp);
      }
      if (ImageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImageId);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Width);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Height);
      }
      if (ImageEncoding != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) ImageEncoding);
      }
      if (DisplayIndex != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DisplayIndex);
      }
      if (ImageChunkCount != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(ImageChunkCount);
      }
      if (ChunkId != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ChunkId);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameTimeStamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameTimeStamp);
      }
      if (ImageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImageId);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (ImageEncoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImageEncoding);
      }
      if (DisplayIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DisplayIndex);
      }
      if (ImageChunkCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImageChunkCount);
      }
      if (ChunkId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ChunkId);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageChunk other) {
      if (other == null) {
        return;
      }
      if (other.FrameTimeStamp != 0) {
        FrameTimeStamp = other.FrameTimeStamp;
      }
      if (other.ImageId != 0) {
        ImageId = other.ImageId;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.ImageEncoding != 0) {
        ImageEncoding = other.ImageEncoding;
      }
      if (other.DisplayIndex != 0) {
        DisplayIndex = other.DisplayIndex;
      }
      if (other.ImageChunkCount != 0) {
        ImageChunkCount = other.ImageChunkCount;
      }
      if (other.ChunkId != 0) {
        ChunkId = other.ChunkId;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameTimeStamp = input.ReadUInt32();
            break;
          }
          case 16: {
            ImageId = input.ReadUInt32();
            break;
          }
          case 24: {
            Width = input.ReadUInt32();
            break;
          }
          case 32: {
            Height = input.ReadUInt32();
            break;
          }
          case 40: {
            ImageEncoding = (global::Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding) input.ReadEnum();
            break;
          }
          case 48: {
            DisplayIndex = input.ReadUInt32();
            break;
          }
          case 56: {
            ImageChunkCount = input.ReadUInt32();
            break;
          }
          case 64: {
            ChunkId = input.ReadUInt32();
            break;
          }
          case 74: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ImageChunk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ImageEncoding {
        [pbr::OriginalName("NONE_IMAGE_ENCODING")] NoneImageEncoding = 0,
        /// <summary>
        /// no compression
        /// </summary>
        [pbr::OriginalName("RAW_GRAY")] RawGray = 1,
        /// <summary>
        /// no compression, just [RGBRGBRG...]
        /// </summary>
        [pbr::OriginalName("RAW_RGB")] RawRgb = 2,
        [pbr::OriginalName("YUYV")] Yuyv = 3,
        [pbr::OriginalName("YUV420SP")] Yuv420Sp = 4,
        [pbr::OriginalName("BAYER")] Bayer = 5,
        [pbr::OriginalName("JPEG_GRAY")] JpegGray = 6,
        [pbr::OriginalName("JPEG_COLOR")] JpegColor = 7,
        [pbr::OriginalName("JPEG_COLOR_HALF_WIDTH")] JpegColorHalfWidth = 8,
        /// <summary>
        /// Minimized grayscale JPEG - no header, no footer, no byte stuffing
        /// </summary>
        [pbr::OriginalName("JPEG_MINIMIZED_GRAY")] JpegMinimizedGray = 9,
        /// <summary>
        /// Minimized grayscale JPEG - no header, no footer, no byte stuffing, with added color data
        /// </summary>
        [pbr::OriginalName("JPEG_MINIMIZED_COLOR")] JpegMinimizedColor = 10,
      }

    }
    #endregion

  }

  public sealed partial class CameraFeedRequest : pb::IMessage<CameraFeedRequest> {
    private static readonly pb::MessageParser<CameraFeedRequest> _parser = new pb::MessageParser<CameraFeedRequest>(() => new CameraFeedRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraFeedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFeedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFeedRequest(CameraFeedRequest other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFeedRequest Clone() {
      return new CameraFeedRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraFeedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraFeedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraFeedRequest other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CameraFeedResponse : pb::IMessage<CameraFeedResponse> {
    private static readonly pb::MessageParser<CameraFeedResponse> _parser = new pb::MessageParser<CameraFeedResponse>(() => new CameraFeedResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraFeedResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFeedResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFeedResponse(CameraFeedResponse other) : this() {
      frameTimeStamp_ = other.frameTimeStamp_;
      imageId_ = other.imageId_;
      imageEncoding_ = other.imageEncoding_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraFeedResponse Clone() {
      return new CameraFeedResponse(this);
    }

    /// <summary>Field number for the "frame_time_stamp" field.</summary>
    public const int FrameTimeStampFieldNumber = 1;
    private uint frameTimeStamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint FrameTimeStamp {
      get { return frameTimeStamp_; }
      set {
        frameTimeStamp_ = value;
      }
    }

    /// <summary>Field number for the "image_id" field.</summary>
    public const int ImageIdFieldNumber = 2;
    private uint imageId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ImageId {
      get { return imageId_; }
      set {
        imageId_ = value;
      }
    }

    /// <summary>Field number for the "image_encoding" field.</summary>
    public const int ImageEncodingFieldNumber = 3;
    private global::Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding imageEncoding_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding ImageEncoding {
      get { return imageEncoding_; }
      set {
        imageEncoding_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraFeedResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraFeedResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameTimeStamp != other.FrameTimeStamp) return false;
      if (ImageId != other.ImageId) return false;
      if (ImageEncoding != other.ImageEncoding) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FrameTimeStamp != 0) hash ^= FrameTimeStamp.GetHashCode();
      if (ImageId != 0) hash ^= ImageId.GetHashCode();
      if (ImageEncoding != 0) hash ^= ImageEncoding.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FrameTimeStamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(FrameTimeStamp);
      }
      if (ImageId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(ImageId);
      }
      if (ImageEncoding != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ImageEncoding);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FrameTimeStamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameTimeStamp);
      }
      if (ImageId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ImageId);
      }
      if (ImageEncoding != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ImageEncoding);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraFeedResponse other) {
      if (other == null) {
        return;
      }
      if (other.FrameTimeStamp != 0) {
        FrameTimeStamp = other.FrameTimeStamp;
      }
      if (other.ImageId != 0) {
        ImageId = other.ImageId;
      }
      if (other.ImageEncoding != 0) {
        ImageEncoding = other.ImageEncoding;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameTimeStamp = input.ReadUInt32();
            break;
          }
          case 16: {
            ImageId = input.ReadUInt32();
            break;
          }
          case 24: {
            ImageEncoding = (global::Anki.Vector.ExternalInterface.ImageChunk.Types.ImageEncoding) input.ReadEnum();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetEyeColorRequest : pb::IMessage<SetEyeColorRequest> {
    private static readonly pb::MessageParser<SetEyeColorRequest> _parser = new pb::MessageParser<SetEyeColorRequest>(() => new SetEyeColorRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetEyeColorRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetEyeColorRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetEyeColorRequest(SetEyeColorRequest other) : this() {
      hue_ = other.hue_;
      saturation_ = other.saturation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetEyeColorRequest Clone() {
      return new SetEyeColorRequest(this);
    }

    /// <summary>Field number for the "hue" field.</summary>
    public const int HueFieldNumber = 1;
    private float hue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Hue {
      get { return hue_; }
      set {
        hue_ = value;
      }
    }

    /// <summary>Field number for the "saturation" field.</summary>
    public const int SaturationFieldNumber = 2;
    private float saturation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Saturation {
      get { return saturation_; }
      set {
        saturation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetEyeColorRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetEyeColorRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Hue, other.Hue)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Saturation, other.Saturation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Hue);
      if (Saturation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Saturation);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hue != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Hue);
      }
      if (Saturation != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Saturation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hue != 0F) {
        size += 1 + 4;
      }
      if (Saturation != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetEyeColorRequest other) {
      if (other == null) {
        return;
      }
      if (other.Hue != 0F) {
        Hue = other.Hue;
      }
      if (other.Saturation != 0F) {
        Saturation = other.Saturation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Hue = input.ReadFloat();
            break;
          }
          case 21: {
            Saturation = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetEyeColorResponse : pb::IMessage<SetEyeColorResponse> {
    private static readonly pb::MessageParser<SetEyeColorResponse> _parser = new pb::MessageParser<SetEyeColorResponse>(() => new SetEyeColorResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetEyeColorResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetEyeColorResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetEyeColorResponse(SetEyeColorResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetEyeColorResponse Clone() {
      return new SetEyeColorResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetEyeColorResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetEyeColorResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetEyeColorResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SDKInitializationRequest : pb::IMessage<SDKInitializationRequest> {
    private static readonly pb::MessageParser<SDKInitializationRequest> _parser = new pb::MessageParser<SDKInitializationRequest>(() => new SDKInitializationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SDKInitializationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SDKInitializationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SDKInitializationRequest(SDKInitializationRequest other) : this() {
      sdkModuleVersion_ = other.sdkModuleVersion_;
      pythonVersion_ = other.pythonVersion_;
      pythonImplementation_ = other.pythonImplementation_;
      osVersion_ = other.osVersion_;
      cpuVersion_ = other.cpuVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SDKInitializationRequest Clone() {
      return new SDKInitializationRequest(this);
    }

    /// <summary>Field number for the "sdk_module_version" field.</summary>
    public const int SdkModuleVersionFieldNumber = 1;
    private string sdkModuleVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SdkModuleVersion {
      get { return sdkModuleVersion_; }
      set {
        sdkModuleVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "python_version" field.</summary>
    public const int PythonVersionFieldNumber = 2;
    private string pythonVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PythonVersion {
      get { return pythonVersion_; }
      set {
        pythonVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "python_implementation" field.</summary>
    public const int PythonImplementationFieldNumber = 3;
    private string pythonImplementation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PythonImplementation {
      get { return pythonImplementation_; }
      set {
        pythonImplementation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "os_version" field.</summary>
    public const int OsVersionFieldNumber = 4;
    private string osVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsVersion {
      get { return osVersion_; }
      set {
        osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cpu_version" field.</summary>
    public const int CpuVersionFieldNumber = 5;
    private string cpuVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CpuVersion {
      get { return cpuVersion_; }
      set {
        cpuVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SDKInitializationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SDKInitializationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SdkModuleVersion != other.SdkModuleVersion) return false;
      if (PythonVersion != other.PythonVersion) return false;
      if (PythonImplementation != other.PythonImplementation) return false;
      if (OsVersion != other.OsVersion) return false;
      if (CpuVersion != other.CpuVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SdkModuleVersion.Length != 0) hash ^= SdkModuleVersion.GetHashCode();
      if (PythonVersion.Length != 0) hash ^= PythonVersion.GetHashCode();
      if (PythonImplementation.Length != 0) hash ^= PythonImplementation.GetHashCode();
      if (OsVersion.Length != 0) hash ^= OsVersion.GetHashCode();
      if (CpuVersion.Length != 0) hash ^= CpuVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SdkModuleVersion.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SdkModuleVersion);
      }
      if (PythonVersion.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PythonVersion);
      }
      if (PythonImplementation.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PythonImplementation);
      }
      if (OsVersion.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(OsVersion);
      }
      if (CpuVersion.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CpuVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SdkModuleVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SdkModuleVersion);
      }
      if (PythonVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PythonVersion);
      }
      if (PythonImplementation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PythonImplementation);
      }
      if (OsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
      }
      if (CpuVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CpuVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SDKInitializationRequest other) {
      if (other == null) {
        return;
      }
      if (other.SdkModuleVersion.Length != 0) {
        SdkModuleVersion = other.SdkModuleVersion;
      }
      if (other.PythonVersion.Length != 0) {
        PythonVersion = other.PythonVersion;
      }
      if (other.PythonImplementation.Length != 0) {
        PythonImplementation = other.PythonImplementation;
      }
      if (other.OsVersion.Length != 0) {
        OsVersion = other.OsVersion;
      }
      if (other.CpuVersion.Length != 0) {
        CpuVersion = other.CpuVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SdkModuleVersion = input.ReadString();
            break;
          }
          case 18: {
            PythonVersion = input.ReadString();
            break;
          }
          case 26: {
            PythonImplementation = input.ReadString();
            break;
          }
          case 34: {
            OsVersion = input.ReadString();
            break;
          }
          case 42: {
            CpuVersion = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SDKInitializationResponse : pb::IMessage<SDKInitializationResponse> {
    private static readonly pb::MessageParser<SDKInitializationResponse> _parser = new pb::MessageParser<SDKInitializationResponse>(() => new SDKInitializationResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SDKInitializationResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Anki.Vector.ExternalInterface.MessagesReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SDKInitializationResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SDKInitializationResponse(SDKInitializationResponse other) : this() {
      status_ = other.status_ != null ? other.status_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SDKInitializationResponse Clone() {
      return new SDKInitializationResponse(this);
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 1;
    private global::Anki.Vector.ExternalInterface.ResponseStatus status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Anki.Vector.ExternalInterface.ResponseStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SDKInitializationResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SDKInitializationResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Status, other.Status)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (status_ != null) hash ^= Status.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (status_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Status);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (status_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SDKInitializationResponse other) {
      if (other == null) {
        return;
      }
      if (other.status_ != null) {
        if (status_ == null) {
          Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
        }
        Status.MergeFrom(other.Status);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (status_ == null) {
              Status = new global::Anki.Vector.ExternalInterface.ResponseStatus();
            }
            input.ReadMessage(Status);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
